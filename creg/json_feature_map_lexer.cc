#line 2 "creg/json_feature_map_lexer.cc"

#line 4 "creg/json_feature_map_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 22
#define YY_END_OF_BUFFER 23
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[5115] =
    {
 {   0,   0 }, {   0,4859 }, {   0,   0 }, {   0,4857 }, {   1,3612 },
 {   2,3612 }, {   3,3612 }, {   4,3612 }, {   5,3612 }, {   6,3612 },
 {   7,3612 }, {   8,3612 }, {   9,3622 }, {  10,3870 }, {  11,3612 },
 {  12,3612 }, {  13,3622 }, {  14,3612 }, {  15,3612 }, {  16,3612 },
 {  17,3612 }, {  18,3612 }, {  19,3612 }, {  20,3612 }, {  21,3612 },
 {  22,3612 }, {  23,3612 }, {  24,3612 }, {  25,3612 }, {  26,3612 },
 {  27,3612 }, {  28,3612 }, {  29,3612 }, {  30,3612 }, {  31,3612 },
 {  32,3622 }, {  33,3612 }, {  34,3612 }, {  35,3612 }, {  36,3612 },
 {  37,3612 }, {  38,3612 }, {  39,3612 }, {  40,3612 }, {  41,3612 },
 {  42,3612 }, {  43,3612 }, {  44,3612 }, {  45,3612 }, {  46,3612 },

 {  47,3612 }, {  48,3612 }, {  49,3612 }, {  50,3612 }, {  51,3612 },
 {  52,3612 }, {  53,3612 }, {  54,3612 }, {  55,3612 }, {  56,3612 },
 {  57,3612 }, {  58,3612 }, {  59,3612 }, {  60,3612 }, {  61,3612 },
 {  62,3612 }, {  63,3612 }, {  64,3612 }, {  65,3612 }, {  66,3612 },
 {  67,3612 }, {  68,3612 }, {  69,3612 }, {  70,3612 }, {  71,3612 },
 {  72,3612 }, {  73,3612 }, {  74,3612 }, {  75,3612 }, {  76,3612 },
 {  77,3612 }, {  78,3612 }, {  79,3612 }, {  80,3612 }, {  81,3612 },
 {  82,3612 }, {  83,3612 }, {  84,3612 }, {  85,3612 }, {  86,3612 },
 {  87,3612 }, {  88,3612 }, {  89,3612 }, {  90,3612 }, {  91,3612 },
 {  92,3612 }, {  93,3612 }, {  94,3612 }, {  95,3612 }, {  96,3612 },

 {  97,3612 }, {  98,3612 }, {  99,3612 }, { 100,3612 }, { 101,3612 },
 { 102,3612 }, { 103,3612 }, { 104,3612 }, { 105,3612 }, { 106,3612 },
 { 107,3612 }, { 108,3612 }, { 109,3612 }, { 110,3612 }, { 111,3612 },
 { 112,3612 }, { 113,3612 }, { 114,3612 }, { 115,3612 }, { 116,3612 },
 { 117,3612 }, { 118,3612 }, { 119,3612 }, { 120,3612 }, { 121,3612 },
 { 122,3612 }, { 123,3612 }, { 124,3612 }, { 125,3612 }, { 126,3612 },
 { 127,3612 }, { 128,3612 }, { 129,3612 }, { 130,3612 }, { 131,3612 },
 { 132,3612 }, { 133,3612 }, { 134,3612 }, { 135,3612 }, { 136,3612 },
 { 137,3612 }, { 138,3612 }, { 139,3612 }, { 140,3612 }, { 141,3612 },
 { 142,3612 }, { 143,3612 }, { 144,3612 }, { 145,3612 }, { 146,3612 },

 { 147,3612 }, { 148,3612 }, { 149,3612 }, { 150,3612 }, { 151,3612 },
 { 152,3612 }, { 153,3612 }, { 154,3612 }, { 155,3612 }, { 156,3612 },
 { 157,3612 }, { 158,3612 }, { 159,3612 }, { 160,3612 }, { 161,3612 },
 { 162,3612 }, { 163,3612 }, { 164,3612 }, { 165,3612 }, { 166,3612 },
 { 167,3612 }, { 168,3612 }, { 169,3612 }, { 170,3612 }, { 171,3612 },
 { 172,3612 }, { 173,3612 }, { 174,3612 }, { 175,3612 }, { 176,3612 },
 { 177,3612 }, { 178,3612 }, { 179,3612 }, { 180,3612 }, { 181,3612 },
 { 182,3612 }, { 183,3612 }, { 184,3612 }, { 185,3612 }, { 186,3612 },
 { 187,3612 }, { 188,3612 }, { 189,3612 }, { 190,3612 }, { 191,3612 },
 { 192,3612 }, { 193,3612 }, { 194,3612 }, { 195,3612 }, { 196,3612 },

 { 197,3612 }, { 198,3612 }, { 199,3612 }, { 200,3612 }, { 201,3612 },
 { 202,3612 }, { 203,3612 }, { 204,3612 }, { 205,3612 }, { 206,3612 },
 { 207,3612 }, { 208,3612 }, { 209,3612 }, { 210,3612 }, { 211,3612 },
 { 212,3612 }, { 213,3612 }, { 214,3612 }, { 215,3612 }, { 216,3612 },
 { 217,3612 }, { 218,3612 }, { 219,3612 }, { 220,3612 }, { 221,3612 },
 { 222,3612 }, { 223,3612 }, { 224,3612 }, { 225,3612 }, { 226,3612 },
 { 227,3612 }, { 228,3612 }, { 229,3612 }, { 230,3612 }, { 231,3612 },
 { 232,3612 }, { 233,3612 }, { 234,3612 }, { 235,3612 }, { 236,3612 },
 { 237,3612 }, { 238,3612 }, { 239,3612 }, { 240,3612 }, { 241,3612 },
 { 242,3612 }, { 243,3612 }, { 244,3612 }, { 245,3612 }, { 246,3612 },

 { 247,3612 }, { 248,3612 }, { 249,3612 }, { 250,3612 }, { 251,3612 },
 { 252,3612 }, { 253,3612 }, { 254,3612 }, { 255,3612 }, { 256,3612 },
 {   0,   0 }, {   0,4599 }, {   1,3354 }, {   2,3354 }, {   3,3354 },
 {   4,3354 }, {   5,3354 }, {   6,3354 }, {   7,3354 }, {   8,3354 },
 {   9,3364 }, {  10,3612 }, {  11,3354 }, {  12,3354 }, {  13,3364 },
 {  14,3354 }, {  15,3354 }, {  16,3354 }, {  17,3354 }, {  18,3354 },
 {  19,3354 }, {  20,3354 }, {  21,3354 }, {  22,3354 }, {  23,3354 },
 {  24,3354 }, {  25,3354 }, {  26,3354 }, {  27,3354 }, {  28,3354 },
 {  29,3354 }, {  30,3354 }, {  31,3354 }, {  32,3364 }, {  33,3354 },
 {  34,3354 }, {  35,3354 }, {  36,3354 }, {  37,3354 }, {  38,3354 },

 {  39,3354 }, {  40,3354 }, {  41,3354 }, {  42,3354 }, {  43,3354 },
 {  44,3354 }, {  45,3354 }, {  46,3354 }, {  47,3354 }, {  48,3354 },
 {  49,3354 }, {  50,3354 }, {  51,3354 }, {  52,3354 }, {  53,3354 },
 {  54,3354 }, {  55,3354 }, {  56,3354 }, {  57,3354 }, {  58,3354 },
 {  59,3354 }, {  60,3354 }, {  61,3354 }, {  62,3354 }, {  63,3354 },
 {  64,3354 }, {  65,3354 }, {  66,3354 }, {  67,3354 }, {  68,3354 },
 {  69,3354 }, {  70,3354 }, {  71,3354 }, {  72,3354 }, {  73,3354 },
 {  74,3354 }, {  75,3354 }, {  76,3354 }, {  77,3354 }, {  78,3354 },
 {  79,3354 }, {  80,3354 }, {  81,3354 }, {  82,3354 }, {  83,3354 },
 {  84,3354 }, {  85,3354 }, {  86,3354 }, {  87,3354 }, {  88,3354 },

 {  89,3354 }, {  90,3354 }, {  91,3354 }, {  92,3354 }, {  93,3354 },
 {  94,3354 }, {  95,3354 }, {  96,3354 }, {  97,3354 }, {  98,3354 },
 {  99,3354 }, { 100,3354 }, { 101,3354 }, { 102,3354 }, { 103,3354 },
 { 104,3354 }, { 105,3354 }, { 106,3354 }, { 107,3354 }, { 108,3354 },
 { 109,3354 }, { 110,3354 }, { 111,3354 }, { 112,3354 }, { 113,3354 },
 { 114,3354 }, { 115,3354 }, { 116,3354 }, { 117,3354 }, { 118,3354 },
 { 119,3354 }, { 120,3354 }, { 121,3354 }, { 122,3354 }, { 123,3354 },
 { 124,3354 }, { 125,3354 }, { 126,3354 }, { 127,3354 }, { 128,3354 },
 { 129,3354 }, { 130,3354 }, { 131,3354 }, { 132,3354 }, { 133,3354 },
 { 134,3354 }, { 135,3354 }, { 136,3354 }, { 137,3354 }, { 138,3354 },

 { 139,3354 }, { 140,3354 }, { 141,3354 }, { 142,3354 }, { 143,3354 },
 { 144,3354 }, { 145,3354 }, { 146,3354 }, { 147,3354 }, { 148,3354 },
 { 149,3354 }, { 150,3354 }, { 151,3354 }, { 152,3354 }, { 153,3354 },
 { 154,3354 }, { 155,3354 }, { 156,3354 }, { 157,3354 }, { 158,3354 },
 { 159,3354 }, { 160,3354 }, { 161,3354 }, { 162,3354 }, { 163,3354 },
 { 164,3354 }, { 165,3354 }, { 166,3354 }, { 167,3354 }, { 168,3354 },
 { 169,3354 }, { 170,3354 }, { 171,3354 }, { 172,3354 }, { 173,3354 },
 { 174,3354 }, { 175,3354 }, { 176,3354 }, { 177,3354 }, { 178,3354 },
 { 179,3354 }, { 180,3354 }, { 181,3354 }, { 182,3354 }, { 183,3354 },
 { 184,3354 }, { 185,3354 }, { 186,3354 }, { 187,3354 }, { 188,3354 },

 { 189,3354 }, { 190,3354 }, { 191,3354 }, { 192,3354 }, { 193,3354 },
 { 194,3354 }, { 195,3354 }, { 196,3354 }, { 197,3354 }, { 198,3354 },
 { 199,3354 }, { 200,3354 }, { 201,3354 }, { 202,3354 }, { 203,3354 },
 { 204,3354 }, { 205,3354 }, { 206,3354 }, { 207,3354 }, { 208,3354 },
 { 209,3354 }, { 210,3354 }, { 211,3354 }, { 212,3354 }, { 213,3354 },
 { 214,3354 }, { 215,3354 }, { 216,3354 }, { 217,3354 }, { 218,3354 },
 { 219,3354 }, { 220,3354 }, { 221,3354 }, { 222,3354 }, { 223,3354 },
 { 224,3354 }, { 225,3354 }, { 226,3354 }, { 227,3354 }, { 228,3354 },
 { 229,3354 }, { 230,3354 }, { 231,3354 }, { 232,3354 }, { 233,3354 },
 { 234,3354 }, { 235,3354 }, { 236,3354 }, { 237,3354 }, { 238,3354 },

 { 239,3354 }, { 240,3354 }, { 241,3354 }, { 242,3354 }, { 243,3354 },
 { 244,3354 }, { 245,3354 }, { 246,3354 }, { 247,3354 }, { 248,3354 },
 { 249,3354 }, { 250,3354 }, { 251,3354 }, { 252,3354 }, { 253,3354 },
 { 254,3354 }, { 255,3354 }, { 256,3354 }, {   0,   0 }, {   0,4341 },
 {   1,3354 }, {   2,3354 }, {   3,3354 }, {   4,3354 }, {   5,3354 },
 {   6,3354 }, {   7,3354 }, {   8,3354 }, {   9,3356 }, {  10,3356 },
 {  11,3354 }, {  12,3354 }, {  13,3356 }, {  14,3354 }, {  15,3354 },
 {  16,3354 }, {  17,3354 }, {  18,3354 }, {  19,3354 }, {  20,3354 },
 {  21,3354 }, {  22,3354 }, {  23,3354 }, {  24,3354 }, {  25,3354 },
 {  26,3354 }, {  27,3354 }, {  28,3354 }, {  29,3354 }, {  30,3354 },

 {  31,3354 }, {  32,3356 }, {  33,3354 }, {  34,3354 }, {  35,3354 },
 {  36,3354 }, {  37,3354 }, {  38,3354 }, {  39,3354 }, {  40,3354 },
 {  41,3354 }, {  42,3354 }, {  43,3354 }, {  44,3354 }, {  45,3354 },
 {  46,3354 }, {  47,3354 }, {  48,3354 }, {  49,3354 }, {  50,3354 },
 {  51,3354 }, {  52,3354 }, {  53,3354 }, {  54,3354 }, {  55,3354 },
 {  56,3354 }, {  57,3354 }, {  58,3354 }, {  59,3354 }, {  60,3354 },
 {  61,3354 }, {  62,3354 }, {  63,3354 }, {  64,3354 }, {  65,3354 },
 {  66,3354 }, {  67,3354 }, {  68,3354 }, {  69,3354 }, {  70,3354 },
 {  71,3354 }, {  72,3354 }, {  73,3354 }, {  74,3354 }, {  75,3354 },
 {  76,3354 }, {  77,3354 }, {  78,3354 }, {  79,3354 }, {  80,3354 },

 {  81,3354 }, {  82,3354 }, {  83,3354 }, {  84,3354 }, {  85,3354 },
 {  86,3354 }, {  87,3354 }, {  88,3354 }, {  89,3354 }, {  90,3354 },
 {  91,3354 }, {  92,3354 }, {  93,3354 }, {  94,3354 }, {  95,3354 },
 {  96,3354 }, {  97,3354 }, {  98,3354 }, {  99,3354 }, { 100,3354 },
 { 101,3354 }, { 102,3354 }, { 103,3354 }, { 104,3354 }, { 105,3354 },
 { 106,3354 }, { 107,3354 }, { 108,3354 }, { 109,3354 }, { 110,3354 },
 { 111,3354 }, { 112,3354 }, { 113,3354 }, { 114,3354 }, { 115,3354 },
 { 116,3354 }, { 117,3354 }, { 118,3354 }, { 119,3354 }, { 120,3354 },
 { 121,3354 }, { 122,3354 }, { 123,3358 }, { 124,3354 }, { 125,3354 },
 { 126,3354 }, { 127,3354 }, { 128,3354 }, { 129,3354 }, { 130,3354 },

 { 131,3354 }, { 132,3354 }, { 133,3354 }, { 134,3354 }, { 135,3354 },
 { 136,3354 }, { 137,3354 }, { 138,3354 }, { 139,3354 }, { 140,3354 },
 { 141,3354 }, { 142,3354 }, { 143,3354 }, { 144,3354 }, { 145,3354 },
 { 146,3354 }, { 147,3354 }, { 148,3354 }, { 149,3354 }, { 150,3354 },
 { 151,3354 }, { 152,3354 }, { 153,3354 }, { 154,3354 }, { 155,3354 },
 { 156,3354 }, { 157,3354 }, { 158,3354 }, { 159,3354 }, { 160,3354 },
 { 161,3354 }, { 162,3354 }, { 163,3354 }, { 164,3354 }, { 165,3354 },
 { 166,3354 }, { 167,3354 }, { 168,3354 }, { 169,3354 }, { 170,3354 },
 { 171,3354 }, { 172,3354 }, { 173,3354 }, { 174,3354 }, { 175,3354 },
 { 176,3354 }, { 177,3354 }, { 178,3354 }, { 179,3354 }, { 180,3354 },

 { 181,3354 }, { 182,3354 }, { 183,3354 }, { 184,3354 }, { 185,3354 },
 { 186,3354 }, { 187,3354 }, { 188,3354 }, { 189,3354 }, { 190,3354 },
 { 191,3354 }, { 192,3354 }, { 193,3354 }, { 194,3354 }, { 195,3354 },
 { 196,3354 }, { 197,3354 }, { 198,3354 }, { 199,3354 }, { 200,3354 },
 { 201,3354 }, { 202,3354 }, { 203,3354 }, { 204,3354 }, { 205,3354 },
 { 206,3354 }, { 207,3354 }, { 208,3354 }, { 209,3354 }, { 210,3354 },
 { 211,3354 }, { 212,3354 }, { 213,3354 }, { 214,3354 }, { 215,3354 },
 { 216,3354 }, { 217,3354 }, { 218,3354 }, { 219,3354 }, { 220,3354 },
 { 221,3354 }, { 222,3354 }, { 223,3354 }, { 224,3354 }, { 225,3354 },
 { 226,3354 }, { 227,3354 }, { 228,3354 }, { 229,3354 }, { 230,3354 },

 { 231,3354 }, { 232,3354 }, { 233,3354 }, { 234,3354 }, { 235,3354 },
 { 236,3354 }, { 237,3354 }, { 238,3354 }, { 239,3354 }, { 240,3354 },
 { 241,3354 }, { 242,3354 }, { 243,3354 }, { 244,3354 }, { 245,3354 },
 { 246,3354 }, { 247,3354 }, { 248,3354 }, { 249,3354 }, { 250,3354 },
 { 251,3354 }, { 252,3354 }, { 253,3354 }, { 254,3354 }, { 255,3354 },
 { 256,3354 }, {   0,   0 }, {   0,4083 }, {   1,3096 }, {   2,3096 },
 {   3,3096 }, {   4,3096 }, {   5,3096 }, {   6,3096 }, {   7,3096 },
 {   8,3096 }, {   9,3098 }, {  10,3098 }, {  11,3096 }, {  12,3096 },
 {  13,3098 }, {  14,3096 }, {  15,3096 }, {  16,3096 }, {  17,3096 },
 {  18,3096 }, {  19,3096 }, {  20,3096 }, {  21,3096 }, {  22,3096 },

 {  23,3096 }, {  24,3096 }, {  25,3096 }, {  26,3096 }, {  27,3096 },
 {  28,3096 }, {  29,3096 }, {  30,3096 }, {  31,3096 }, {  32,3098 },
 {  33,3096 }, {  34,3096 }, {  35,3096 }, {  36,3096 }, {  37,3096 },
 {  38,3096 }, {  39,3096 }, {  40,3096 }, {  41,3096 }, {  42,3096 },
 {  43,3096 }, {  44,3096 }, {  45,3096 }, {  46,3096 }, {  47,3096 },
 {  48,3096 }, {  49,3096 }, {  50,3096 }, {  51,3096 }, {  52,3096 },
 {  53,3096 }, {  54,3096 }, {  55,3096 }, {  56,3096 }, {  57,3096 },
 {  58,3096 }, {  59,3096 }, {  60,3096 }, {  61,3096 }, {  62,3096 },
 {  63,3096 }, {  64,3096 }, {  65,3096 }, {  66,3096 }, {  67,3096 },
 {  68,3096 }, {  69,3096 }, {  70,3096 }, {  71,3096 }, {  72,3096 },

 {  73,3096 }, {  74,3096 }, {  75,3096 }, {  76,3096 }, {  77,3096 },
 {  78,3096 }, {  79,3096 }, {  80,3096 }, {  81,3096 }, {  82,3096 },
 {  83,3096 }, {  84,3096 }, {  85,3096 }, {  86,3096 }, {  87,3096 },
 {  88,3096 }, {  89,3096 }, {  90,3096 }, {  91,3096 }, {  92,3096 },
 {  93,3096 }, {  94,3096 }, {  95,3096 }, {  96,3096 }, {  97,3096 },
 {  98,3096 }, {  99,3096 }, { 100,3096 }, { 101,3096 }, { 102,3096 },
 { 103,3096 }, { 104,3096 }, { 105,3096 }, { 106,3096 }, { 107,3096 },
 { 108,3096 }, { 109,3096 }, { 110,3096 }, { 111,3096 }, { 112,3096 },
 { 113,3096 }, { 114,3096 }, { 115,3096 }, { 116,3096 }, { 117,3096 },
 { 118,3096 }, { 119,3096 }, { 120,3096 }, { 121,3096 }, { 122,3096 },

 { 123,3100 }, { 124,3096 }, { 125,3096 }, { 126,3096 }, { 127,3096 },
 { 128,3096 }, { 129,3096 }, { 130,3096 }, { 131,3096 }, { 132,3096 },
 { 133,3096 }, { 134,3096 }, { 135,3096 }, { 136,3096 }, { 137,3096 },
 { 138,3096 }, { 139,3096 }, { 140,3096 }, { 141,3096 }, { 142,3096 },
 { 143,3096 }, { 144,3096 }, { 145,3096 }, { 146,3096 }, { 147,3096 },
 { 148,3096 }, { 149,3096 }, { 150,3096 }, { 151,3096 }, { 152,3096 },
 { 153,3096 }, { 154,3096 }, { 155,3096 }, { 156,3096 }, { 157,3096 },
 { 158,3096 }, { 159,3096 }, { 160,3096 }, { 161,3096 }, { 162,3096 },
 { 163,3096 }, { 164,3096 }, { 165,3096 }, { 166,3096 }, { 167,3096 },
 { 168,3096 }, { 169,3096 }, { 170,3096 }, { 171,3096 }, { 172,3096 },

 { 173,3096 }, { 174,3096 }, { 175,3096 }, { 176,3096 }, { 177,3096 },
 { 178,3096 }, { 179,3096 }, { 180,3096 }, { 181,3096 }, { 182,3096 },
 { 183,3096 }, { 184,3096 }, { 185,3096 }, { 186,3096 }, { 187,3096 },
 { 188,3096 }, { 189,3096 }, { 190,3096 }, { 191,3096 }, { 192,3096 },
 { 193,3096 }, { 194,3096 }, { 195,3096 }, { 196,3096 }, { 197,3096 },
 { 198,3096 }, { 199,3096 }, { 200,3096 }, { 201,3096 }, { 202,3096 },
 { 203,3096 }, { 204,3096 }, { 205,3096 }, { 206,3096 }, { 207,3096 },
 { 208,3096 }, { 209,3096 }, { 210,3096 }, { 211,3096 }, { 212,3096 },
 { 213,3096 }, { 214,3096 }, { 215,3096 }, { 216,3096 }, { 217,3096 },
 { 218,3096 }, { 219,3096 }, { 220,3096 }, { 221,3096 }, { 222,3096 },

 { 223,3096 }, { 224,3096 }, { 225,3096 }, { 226,3096 }, { 227,3096 },
 { 228,3096 }, { 229,3096 }, { 230,3096 }, { 231,3096 }, { 232,3096 },
 { 233,3096 }, { 234,3096 }, { 235,3096 }, { 236,3096 }, { 237,3096 },
 { 238,3096 }, { 239,3096 }, { 240,3096 }, { 241,3096 }, { 242,3096 },
 { 243,3096 }, { 244,3096 }, { 245,3096 }, { 246,3096 }, { 247,3096 },
 { 248,3096 }, { 249,3096 }, { 250,3096 }, { 251,3096 }, { 252,3096 },
 { 253,3096 }, { 254,3096 }, { 255,3096 }, { 256,3096 }, {   0,   0 },
 {   0,3825 }, {   1,2590 }, {   2,2590 }, {   3,2590 }, {   4,2590 },
 {   5,2590 }, {   6,2590 }, {   7,2590 }, {   8,2590 }, {   9,2590 },
 {  10,2838 }, {  11,2590 }, {  12,2590 }, {  13,2590 }, {  14,2590 },

 {  15,2590 }, {  16,2590 }, {  17,2590 }, {  18,2590 }, {  19,2590 },
 {  20,2590 }, {  21,2590 }, {  22,2590 }, {  23,2590 }, {  24,2590 },
 {  25,2590 }, {  26,2590 }, {  27,2590 }, {  28,2590 }, {  29,2590 },
 {  30,2590 }, {  31,2590 }, {  32,2590 }, {  33,2590 }, {  34,2844 },
 {  35,2590 }, {  36,2590 }, {  37,2590 }, {  38,2590 }, {  39,2590 },
 {  40,2590 }, {  41,2590 }, {  42,2590 }, {  43,2590 }, {  44,2590 },
 {  45,2590 }, {  46,2590 }, {  47,2590 }, {  48,2590 }, {  49,2590 },
 {  50,2590 }, {  51,2590 }, {  52,2590 }, {  53,2590 }, {  54,2590 },
 {  55,2590 }, {  56,2590 }, {  57,2590 }, {  58,2590 }, {  59,2590 },
 {  60,2590 }, {  61,2590 }, {  62,2590 }, {  63,2590 }, {  64,2590 },

 {  65,2590 }, {  66,2590 }, {  67,2590 }, {  68,2590 }, {  69,2590 },
 {  70,2590 }, {  71,2590 }, {  72,2590 }, {  73,2590 }, {  74,2590 },
 {  75,2590 }, {  76,2590 }, {  77,2590 }, {  78,2590 }, {  79,2590 },
 {  80,2590 }, {  81,2590 }, {  82,2590 }, {  83,2590 }, {  84,2590 },
 {  85,2590 }, {  86,2590 }, {  87,2590 }, {  88,2590 }, {  89,2590 },
 {  90,2590 }, {  91,2590 }, {  92,2590 }, {  93,2590 }, {  94,2590 },
 {  95,2590 }, {  96,2590 }, {  97,2590 }, {  98,2590 }, {  99,2590 },
 { 100,2590 }, { 101,2590 }, { 102,2590 }, { 103,2590 }, { 104,2590 },
 { 105,2590 }, { 106,2590 }, { 107,2590 }, { 108,2590 }, { 109,2590 },
 { 110,2590 }, { 111,2590 }, { 112,2590 }, { 113,2590 }, { 114,2590 },

 { 115,2590 }, { 116,2590 }, { 117,2590 }, { 118,2590 }, { 119,2590 },
 { 120,2590 }, { 121,2590 }, { 122,2590 }, { 123,2590 }, { 124,2590 },
 { 125,2590 }, { 126,2590 }, { 127,2590 }, { 128,2590 }, { 129,2590 },
 { 130,2590 }, { 131,2590 }, { 132,2590 }, { 133,2590 }, { 134,2590 },
 { 135,2590 }, { 136,2590 }, { 137,2590 }, { 138,2590 }, { 139,2590 },
 { 140,2590 }, { 141,2590 }, { 142,2590 }, { 143,2590 }, { 144,2590 },
 { 145,2590 }, { 146,2590 }, { 147,2590 }, { 148,2590 }, { 149,2590 },
 { 150,2590 }, { 151,2590 }, { 152,2590 }, { 153,2590 }, { 154,2590 },
 { 155,2590 }, { 156,2590 }, { 157,2590 }, { 158,2590 }, { 159,2590 },
 { 160,2590 }, { 161,2590 }, { 162,2590 }, { 163,2590 }, { 164,2590 },

 { 165,2590 }, { 166,2590 }, { 167,2590 }, { 168,2590 }, { 169,2590 },
 { 170,2590 }, { 171,2590 }, { 172,2590 }, { 173,2590 }, { 174,2590 },
 { 175,2590 }, { 176,2590 }, { 177,2590 }, { 178,2590 }, { 179,2590 },
 { 180,2590 }, { 181,2590 }, { 182,2590 }, { 183,2590 }, { 184,2590 },
 { 185,2590 }, { 186,2590 }, { 187,2590 }, { 188,2590 }, { 189,2590 },
 { 190,2590 }, { 191,2590 }, { 192,2590 }, { 193,2590 }, { 194,2590 },
 { 195,2590 }, { 196,2590 }, { 197,2590 }, { 198,2590 }, { 199,2590 },
 { 200,2590 }, { 201,2590 }, { 202,2590 }, { 203,2590 }, { 204,2590 },
 { 205,2590 }, { 206,2590 }, { 207,2590 }, { 208,2590 }, { 209,2590 },
 { 210,2590 }, { 211,2590 }, { 212,2590 }, { 213,2590 }, { 214,2590 },

 { 215,2590 }, { 216,2590 }, { 217,2590 }, { 218,2590 }, { 219,2590 },
 { 220,2590 }, { 221,2590 }, { 222,2590 }, { 223,2590 }, { 224,2590 },
 { 225,2590 }, { 226,2590 }, { 227,2590 }, { 228,2590 }, { 229,2590 },
 { 230,2590 }, { 231,2590 }, { 232,2590 }, { 233,2590 }, { 234,2590 },
 { 235,2590 }, { 236,2590 }, { 237,2590 }, { 238,2590 }, { 239,2590 },
 { 240,2590 }, { 241,2590 }, { 242,2590 }, { 243,2590 }, { 244,2590 },
 { 245,2590 }, { 246,2590 }, { 247,2590 }, { 248,2590 }, { 249,2590 },
 { 250,2590 }, { 251,2590 }, { 252,2590 }, { 253,2590 }, { 254,2590 },
 { 255,2590 }, { 256,2590 }, {   0,   0 }, {   0,3567 }, {   1,2332 },
 {   2,2332 }, {   3,2332 }, {   4,2332 }, {   5,2332 }, {   6,2332 },

 {   7,2332 }, {   8,2332 }, {   9,2332 }, {  10,2580 }, {  11,2332 },
 {  12,2332 }, {  13,2332 }, {  14,2332 }, {  15,2332 }, {  16,2332 },
 {  17,2332 }, {  18,2332 }, {  19,2332 }, {  20,2332 }, {  21,2332 },
 {  22,2332 }, {  23,2332 }, {  24,2332 }, {  25,2332 }, {  26,2332 },
 {  27,2332 }, {  28,2332 }, {  29,2332 }, {  30,2332 }, {  31,2332 },
 {  32,2332 }, {  33,2332 }, {  34,2586 }, {  35,2332 }, {  36,2332 },
 {  37,2332 }, {  38,2332 }, {  39,2332 }, {  40,2332 }, {  41,2332 },
 {  42,2332 }, {  43,2332 }, {  44,2332 }, {  45,2332 }, {  46,2332 },
 {  47,2332 }, {  48,2332 }, {  49,2332 }, {  50,2332 }, {  51,2332 },
 {  52,2332 }, {  53,2332 }, {  54,2332 }, {  55,2332 }, {  56,2332 },

 {  57,2332 }, {  58,2332 }, {  59,2332 }, {  60,2332 }, {  61,2332 },
 {  62,2332 }, {  63,2332 }, {  64,2332 }, {  65,2332 }, {  66,2332 },
 {  67,2332 }, {  68,2332 }, {  69,2332 }, {  70,2332 }, {  71,2332 },
 {  72,2332 }, {  73,2332 }, {  74,2332 }, {  75,2332 }, {  76,2332 },
 {  77,2332 }, {  78,2332 }, {  79,2332 }, {  80,2332 }, {  81,2332 },
 {  82,2332 }, {  83,2332 }, {  84,2332 }, {  85,2332 }, {  86,2332 },
 {  87,2332 }, {  88,2332 }, {  89,2332 }, {  90,2332 }, {  91,2332 },
 {  92,2332 }, {  93,2332 }, {  94,2332 }, {  95,2332 }, {  96,2332 },
 {  97,2332 }, {  98,2332 }, {  99,2332 }, { 100,2332 }, { 101,2332 },
 { 102,2332 }, { 103,2332 }, { 104,2332 }, { 105,2332 }, { 106,2332 },

 { 107,2332 }, { 108,2332 }, { 109,2332 }, { 110,2332 }, { 111,2332 },
 { 112,2332 }, { 113,2332 }, { 114,2332 }, { 115,2332 }, { 116,2332 },
 { 117,2332 }, { 118,2332 }, { 119,2332 }, { 120,2332 }, { 121,2332 },
 { 122,2332 }, { 123,2332 }, { 124,2332 }, { 125,2332 }, { 126,2332 },
 { 127,2332 }, { 128,2332 }, { 129,2332 }, { 130,2332 }, { 131,2332 },
 { 132,2332 }, { 133,2332 }, { 134,2332 }, { 135,2332 }, { 136,2332 },
 { 137,2332 }, { 138,2332 }, { 139,2332 }, { 140,2332 }, { 141,2332 },
 { 142,2332 }, { 143,2332 }, { 144,2332 }, { 145,2332 }, { 146,2332 },
 { 147,2332 }, { 148,2332 }, { 149,2332 }, { 150,2332 }, { 151,2332 },
 { 152,2332 }, { 153,2332 }, { 154,2332 }, { 155,2332 }, { 156,2332 },

 { 157,2332 }, { 158,2332 }, { 159,2332 }, { 160,2332 }, { 161,2332 },
 { 162,2332 }, { 163,2332 }, { 164,2332 }, { 165,2332 }, { 166,2332 },
 { 167,2332 }, { 168,2332 }, { 169,2332 }, { 170,2332 }, { 171,2332 },
 { 172,2332 }, { 173,2332 }, { 174,2332 }, { 175,2332 }, { 176,2332 },
 { 177,2332 }, { 178,2332 }, { 179,2332 }, { 180,2332 }, { 181,2332 },
 { 182,2332 }, { 183,2332 }, { 184,2332 }, { 185,2332 }, { 186,2332 },
 { 187,2332 }, { 188,2332 }, { 189,2332 }, { 190,2332 }, { 191,2332 },
 { 192,2332 }, { 193,2332 }, { 194,2332 }, { 195,2332 }, { 196,2332 },
 { 197,2332 }, { 198,2332 }, { 199,2332 }, { 200,2332 }, { 201,2332 },
 { 202,2332 }, { 203,2332 }, { 204,2332 }, { 205,2332 }, { 206,2332 },

 { 207,2332 }, { 208,2332 }, { 209,2332 }, { 210,2332 }, { 211,2332 },
 { 212,2332 }, { 213,2332 }, { 214,2332 }, { 215,2332 }, { 216,2332 },
 { 217,2332 }, { 218,2332 }, { 219,2332 }, { 220,2332 }, { 221,2332 },
 { 222,2332 }, { 223,2332 }, { 224,2332 }, { 225,2332 }, { 226,2332 },
 { 227,2332 }, { 228,2332 }, { 229,2332 }, { 230,2332 }, { 231,2332 },
 { 232,2332 }, { 233,2332 }, { 234,2332 }, { 235,2332 }, { 236,2332 },
 { 237,2332 }, { 238,2332 }, { 239,2332 }, { 240,2332 }, { 241,2332 },
 { 242,2332 }, { 243,2332 }, { 244,2332 }, { 245,2332 }, { 246,2332 },
 { 247,2332 }, { 248,2332 }, { 249,2332 }, { 250,2332 }, { 251,2332 },
 { 252,2332 }, { 253,2332 }, { 254,2332 }, { 255,2332 }, { 256,2332 },

 {   0,   0 }, {   0,3309 }, {   1,2330 }, {   2,2330 }, {   3,2330 },
 {   4,2330 }, {   5,2330 }, {   6,2330 }, {   7,2330 }, {   8,2322 },
 {   9,2322 }, {  10,2322 }, {  11,2330 }, {  12,2322 }, {  13,2322 },
 {  14,2330 }, {  15,2330 }, {  16,2330 }, {  17,2330 }, {  18,2330 },
 {  19,2330 }, {  20,2330 }, {  21,2330 }, {  22,2330 }, {  23,2330 },
 {  24,2330 }, {  25,2330 }, {  26,2330 }, {  27,2330 }, {  28,2330 },
 {  29,2330 }, {  30,2330 }, {  31,2330 }, {  32,2330 }, {  33,2330 },
 {  34,2332 }, {  35,2330 }, {  36,2330 }, {  37,2330 }, {  38,2330 },
 {  39,2330 }, {  40,2330 }, {  41,2330 }, {  42,2330 }, {  43,2330 },
 {  44,2330 }, {  45,2330 }, {  46,2330 }, {  47,2330 }, {  48,2330 },

 {  49,2330 }, {  50,2330 }, {  51,2330 }, {  52,2330 }, {  53,2330 },
 {  54,2330 }, {  55,2330 }, {  56,2330 }, {  57,2330 }, {  58,2330 },
 {  59,2330 }, {  60,2330 }, {  61,2330 }, {  62,2330 }, {  63,2330 },
 {  64,2330 }, {  65,2330 }, {  66,2330 }, {  67,2330 }, {  68,2330 },
 {  69,2330 }, {  70,2330 }, {  71,2330 }, {  72,2330 }, {  73,2330 },
 {  74,2330 }, {  75,2330 }, {  76,2330 }, {  77,2330 }, {  78,2330 },
 {  79,2330 }, {  80,2330 }, {  81,2330 }, {  82,2330 }, {  83,2330 },
 {  84,2330 }, {  85,2330 }, {  86,2330 }, {  87,2330 }, {  88,2330 },
 {  89,2330 }, {  90,2330 }, {  91,2330 }, {  92,2342 }, {  93,2330 },
 {  94,2330 }, {  95,2330 }, {  96,2330 }, {  97,2330 }, {  98,2330 },

 {  99,2330 }, { 100,2330 }, { 101,2330 }, { 102,2330 }, { 103,2330 },
 { 104,2330 }, { 105,2330 }, { 106,2330 }, { 107,2330 }, { 108,2330 },
 { 109,2330 }, { 110,2330 }, { 111,2330 }, { 112,2330 }, { 113,2330 },
 { 114,2330 }, { 115,2330 }, { 116,2330 }, { 117,2330 }, { 118,2330 },
 { 119,2330 }, { 120,2330 }, { 121,2330 }, { 122,2330 }, { 123,2330 },
 { 124,2330 }, { 125,2330 }, { 126,2330 }, { 127,2330 }, { 128,2330 },
 { 129,2330 }, { 130,2330 }, { 131,2330 }, { 132,2330 }, { 133,2330 },
 { 134,2330 }, { 135,2330 }, { 136,2330 }, { 137,2330 }, { 138,2330 },
 { 139,2330 }, { 140,2330 }, { 141,2330 }, { 142,2330 }, { 143,2330 },
 { 144,2330 }, { 145,2330 }, { 146,2330 }, { 147,2330 }, { 148,2330 },

 { 149,2330 }, { 150,2330 }, { 151,2330 }, { 152,2330 }, { 153,2330 },
 { 154,2330 }, { 155,2330 }, { 156,2330 }, { 157,2330 }, { 158,2330 },
 { 159,2330 }, { 160,2330 }, { 161,2330 }, { 162,2330 }, { 163,2330 },
 { 164,2330 }, { 165,2330 }, { 166,2330 }, { 167,2330 }, { 168,2330 },
 { 169,2330 }, { 170,2330 }, { 171,2330 }, { 172,2330 }, { 173,2330 },
 { 174,2330 }, { 175,2330 }, { 176,2330 }, { 177,2330 }, { 178,2330 },
 { 179,2330 }, { 180,2330 }, { 181,2330 }, { 182,2330 }, { 183,2330 },
 { 184,2330 }, { 185,2330 }, { 186,2330 }, { 187,2330 }, { 188,2330 },
 { 189,2330 }, { 190,2330 }, { 191,2330 }, { 192,2330 }, { 193,2330 },
 { 194,2330 }, { 195,2330 }, { 196,2330 }, { 197,2330 }, { 198,2330 },

 { 199,2330 }, { 200,2330 }, { 201,2330 }, { 202,2330 }, { 203,2330 },
 { 204,2330 }, { 205,2330 }, { 206,2330 }, { 207,2330 }, { 208,2330 },
 { 209,2330 }, { 210,2330 }, { 211,2330 }, { 212,2330 }, { 213,2330 },
 { 214,2330 }, { 215,2330 }, { 216,2330 }, { 217,2330 }, { 218,2330 },
 { 219,2330 }, { 220,2330 }, { 221,2330 }, { 222,2330 }, { 223,2330 },
 { 224,2330 }, { 225,2330 }, { 226,2330 }, { 227,2330 }, { 228,2330 },
 { 229,2330 }, { 230,2330 }, { 231,2330 }, { 232,2330 }, { 233,2330 },
 { 234,2330 }, { 235,2330 }, { 236,2330 }, { 237,2330 }, { 238,2330 },
 { 239,2330 }, { 240,2330 }, { 241,2330 }, { 242,2330 }, { 243,2330 },
 { 244,2330 }, { 245,2330 }, { 246,2330 }, { 247,2330 }, { 248,2330 },

 { 249,2330 }, { 250,2330 }, { 251,2330 }, { 252,2330 }, { 253,2330 },
 { 254,2330 }, { 255,2330 }, { 256,2330 }, {   0,   0 }, {   0,3051 },
 {   1,2072 }, {   2,2072 }, {   3,2072 }, {   4,2072 }, {   5,2072 },
 {   6,2072 }, {   7,2072 }, {   8,2064 }, {   9,2064 }, {  10,2064 },
 {  11,2072 }, {  12,2064 }, {  13,2064 }, {  14,2072 }, {  15,2072 },
 {  16,2072 }, {  17,2072 }, {  18,2072 }, {  19,2072 }, {  20,2072 },
 {  21,2072 }, {  22,2072 }, {  23,2072 }, {  24,2072 }, {  25,2072 },
 {  26,2072 }, {  27,2072 }, {  28,2072 }, {  29,2072 }, {  30,2072 },
 {  31,2072 }, {  32,2072 }, {  33,2072 }, {  34,2074 }, {  35,2072 },
 {  36,2072 }, {  37,2072 }, {  38,2072 }, {  39,2072 }, {  40,2072 },

 {  41,2072 }, {  42,2072 }, {  43,2072 }, {  44,2072 }, {  45,2072 },
 {  46,2072 }, {  47,2072 }, {  48,2072 }, {  49,2072 }, {  50,2072 },
 {  51,2072 }, {  52,2072 }, {  53,2072 }, {  54,2072 }, {  55,2072 },
 {  56,2072 }, {  57,2072 }, {  58,2072 }, {  59,2072 }, {  60,2072 },
 {  61,2072 }, {  62,2072 }, {  63,2072 }, {  64,2072 }, {  65,2072 },
 {  66,2072 }, {  67,2072 }, {  68,2072 }, {  69,2072 }, {  70,2072 },
 {  71,2072 }, {  72,2072 }, {  73,2072 }, {  74,2072 }, {  75,2072 },
 {  76,2072 }, {  77,2072 }, {  78,2072 }, {  79,2072 }, {  80,2072 },
 {  81,2072 }, {  82,2072 }, {  83,2072 }, {  84,2072 }, {  85,2072 },
 {  86,2072 }, {  87,2072 }, {  88,2072 }, {  89,2072 }, {  90,2072 },

 {  91,2072 }, {  92,2084 }, {  93,2072 }, {  94,2072 }, {  95,2072 },
 {  96,2072 }, {  97,2072 }, {  98,2072 }, {  99,2072 }, { 100,2072 },
 { 101,2072 }, { 102,2072 }, { 103,2072 }, { 104,2072 }, { 105,2072 },
 { 106,2072 }, { 107,2072 }, { 108,2072 }, { 109,2072 }, { 110,2072 },
 { 111,2072 }, { 112,2072 }, { 113,2072 }, { 114,2072 }, { 115,2072 },
 { 116,2072 }, { 117,2072 }, { 118,2072 }, { 119,2072 }, { 120,2072 },
 { 121,2072 }, { 122,2072 }, { 123,2072 }, { 124,2072 }, { 125,2072 },
 { 126,2072 }, { 127,2072 }, { 128,2072 }, { 129,2072 }, { 130,2072 },
 { 131,2072 }, { 132,2072 }, { 133,2072 }, { 134,2072 }, { 135,2072 },
 { 136,2072 }, { 137,2072 }, { 138,2072 }, { 139,2072 }, { 140,2072 },

 { 141,2072 }, { 142,2072 }, { 143,2072 }, { 144,2072 }, { 145,2072 },
 { 146,2072 }, { 147,2072 }, { 148,2072 }, { 149,2072 }, { 150,2072 },
 { 151,2072 }, { 152,2072 }, { 153,2072 }, { 154,2072 }, { 155,2072 },
 { 156,2072 }, { 157,2072 }, { 158,2072 }, { 159,2072 }, { 160,2072 },
 { 161,2072 }, { 162,2072 }, { 163,2072 }, { 164,2072 }, { 165,2072 },
 { 166,2072 }, { 167,2072 }, { 168,2072 }, { 169,2072 }, { 170,2072 },
 { 171,2072 }, { 172,2072 }, { 173,2072 }, { 174,2072 }, { 175,2072 },
 { 176,2072 }, { 177,2072 }, { 178,2072 }, { 179,2072 }, { 180,2072 },
 { 181,2072 }, { 182,2072 }, { 183,2072 }, { 184,2072 }, { 185,2072 },
 { 186,2072 }, { 187,2072 }, { 188,2072 }, { 189,2072 }, { 190,2072 },

 { 191,2072 }, { 192,2072 }, { 193,2072 }, { 194,2072 }, { 195,2072 },
 { 196,2072 }, { 197,2072 }, { 198,2072 }, { 199,2072 }, { 200,2072 },
 { 201,2072 }, { 202,2072 }, { 203,2072 }, { 204,2072 }, { 205,2072 },
 { 206,2072 }, { 207,2072 }, { 208,2072 }, { 209,2072 }, { 210,2072 },
 { 211,2072 }, { 212,2072 }, { 213,2072 }, { 214,2072 }, { 215,2072 },
 { 216,2072 }, { 217,2072 }, { 218,2072 }, { 219,2072 }, { 220,2072 },
 { 221,2072 }, { 222,2072 }, { 223,2072 }, { 224,2072 }, { 225,2072 },
 { 226,2072 }, { 227,2072 }, { 228,2072 }, { 229,2072 }, { 230,2072 },
 { 231,2072 }, { 232,2072 }, { 233,2072 }, { 234,2072 }, { 235,2072 },
 { 236,2072 }, { 237,2072 }, { 238,2072 }, { 239,2072 }, { 240,2072 },

 { 241,2072 }, { 242,2072 }, { 243,2072 }, { 244,2072 }, { 245,2072 },
 { 246,2072 }, { 247,2072 }, { 248,2072 }, { 249,2072 }, { 250,2072 },
 { 251,2072 }, { 252,2072 }, { 253,2072 }, { 254,2072 }, { 255,2072 },
 { 256,2072 }, {   0,   0 }, {   0,2793 }, {   1,1558 }, {   2,1558 },
 {   3,1558 }, {   4,1558 }, {   5,1558 }, {   6,1558 }, {   7,1558 },
 {   8,1558 }, {   9,1834 }, {  10,1836 }, {  11,1558 }, {  12,1558 },
 {  13,1834 }, {  14,1558 }, {  15,1558 }, {  16,1558 }, {  17,1558 },
 {  18,1558 }, {  19,1558 }, {  20,1558 }, {  21,1558 }, {  22,1558 },
 {  23,1558 }, {  24,1558 }, {  25,1558 }, {  26,1558 }, {  27,1558 },
 {  28,1558 }, {  29,1558 }, {  30,1558 }, {  31,1558 }, {  32,1834 },

 {  33,1558 }, {  34,1558 }, {  35,1558 }, {  36,1558 }, {  37,1558 },
 {  38,1558 }, {  39,1558 }, {  40,1558 }, {  41,1558 }, {  42,1558 },
 {  43,1558 }, {  44,1558 }, {  45,1558 }, {  46,1558 }, {  47,1558 },
 {  48,1558 }, {  49,1558 }, {  50,1558 }, {  51,1558 }, {  52,1558 },
 {  53,1558 }, {  54,1558 }, {  55,1558 }, {  56,1558 }, {  57,1558 },
 {  58,1852 }, {  59,1558 }, {  60,1558 }, {  61,1558 }, {  62,1558 },
 {  63,1558 }, {  64,1558 }, {  65,1558 }, {  66,1558 }, {  67,1558 },
 {  68,1558 }, {  69,1558 }, {  70,1558 }, {  71,1558 }, {  72,1558 },
 {  73,1558 }, {  74,1558 }, {  75,1558 }, {  76,1558 }, {  77,1558 },
 {  78,1558 }, {  79,1558 }, {  80,1558 }, {  81,1558 }, {  82,1558 },

 {  83,1558 }, {  84,1558 }, {  85,1558 }, {  86,1558 }, {  87,1558 },
 {  88,1558 }, {  89,1558 }, {  90,1558 }, {  91,1558 }, {  92,1558 },
 {  93,1558 }, {  94,1558 }, {  95,1558 }, {  96,1558 }, {  97,1558 },
 {  98,1558 }, {  99,1558 }, { 100,1558 }, { 101,1558 }, { 102,1558 },
 { 103,1558 }, { 104,1558 }, { 105,1558 }, { 106,1558 }, { 107,1558 },
 { 108,1558 }, { 109,1558 }, { 110,1558 }, { 111,1558 }, { 112,1558 },
 { 113,1558 }, { 114,1558 }, { 115,1558 }, { 116,1558 }, { 117,1558 },
 { 118,1558 }, { 119,1558 }, { 120,1558 }, { 121,1558 }, { 122,1558 },
 { 123,1558 }, { 124,1558 }, { 125,1558 }, { 126,1558 }, { 127,1558 },
 { 128,1558 }, { 129,1558 }, { 130,1558 }, { 131,1558 }, { 132,1558 },

 { 133,1558 }, { 134,1558 }, { 135,1558 }, { 136,1558 }, { 137,1558 },
 { 138,1558 }, { 139,1558 }, { 140,1558 }, { 141,1558 }, { 142,1558 },
 { 143,1558 }, { 144,1558 }, { 145,1558 }, { 146,1558 }, { 147,1558 },
 { 148,1558 }, { 149,1558 }, { 150,1558 }, { 151,1558 }, { 152,1558 },
 { 153,1558 }, { 154,1558 }, { 155,1558 }, { 156,1558 }, { 157,1558 },
 { 158,1558 }, { 159,1558 }, { 160,1558 }, { 161,1558 }, { 162,1558 },
 { 163,1558 }, { 164,1558 }, { 165,1558 }, { 166,1558 }, { 167,1558 },
 { 168,1558 }, { 169,1558 }, { 170,1558 }, { 171,1558 }, { 172,1558 },
 { 173,1558 }, { 174,1558 }, { 175,1558 }, { 176,1558 }, { 177,1558 },
 { 178,1558 }, { 179,1558 }, { 180,1558 }, { 181,1558 }, { 182,1558 },

 { 183,1558 }, { 184,1558 }, { 185,1558 }, { 186,1558 }, { 187,1558 },
 { 188,1558 }, { 189,1558 }, { 190,1558 }, { 191,1558 }, { 192,1558 },
 { 193,1558 }, { 194,1558 }, { 195,1558 }, { 196,1558 }, { 197,1558 },
 { 198,1558 }, { 199,1558 }, { 200,1558 }, { 201,1558 }, { 202,1558 },
 { 203,1558 }, { 204,1558 }, { 205,1558 }, { 206,1558 }, { 207,1558 },
 { 208,1558 }, { 209,1558 }, { 210,1558 }, { 211,1558 }, { 212,1558 },
 { 213,1558 }, { 214,1558 }, { 215,1558 }, { 216,1558 }, { 217,1558 },
 { 218,1558 }, { 219,1558 }, { 220,1558 }, { 221,1558 }, { 222,1558 },
 { 223,1558 }, { 224,1558 }, { 225,1558 }, { 226,1558 }, { 227,1558 },
 { 228,1558 }, { 229,1558 }, { 230,1558 }, { 231,1558 }, { 232,1558 },

 { 233,1558 }, { 234,1558 }, { 235,1558 }, { 236,1558 }, { 237,1558 },
 { 238,1558 }, { 239,1558 }, { 240,1558 }, { 241,1558 }, { 242,1558 },
 { 243,1558 }, { 244,1558 }, { 245,1558 }, { 246,1558 }, { 247,1558 },
 { 248,1558 }, { 249,1558 }, { 250,1558 }, { 251,1558 }, { 252,1558 },
 { 253,1558 }, { 254,1558 }, { 255,1558 }, { 256,1558 }, {   0,   0 },
 {   0,2535 }, {   1,1300 }, {   2,1300 }, {   3,1300 }, {   4,1300 },
 {   5,1300 }, {   6,1300 }, {   7,1300 }, {   8,1300 }, {   9,1576 },
 {  10,1578 }, {  11,1300 }, {  12,1300 }, {  13,1576 }, {  14,1300 },
 {  15,1300 }, {  16,1300 }, {  17,1300 }, {  18,1300 }, {  19,1300 },
 {  20,1300 }, {  21,1300 }, {  22,1300 }, {  23,1300 }, {  24,1300 },

 {  25,1300 }, {  26,1300 }, {  27,1300 }, {  28,1300 }, {  29,1300 },
 {  30,1300 }, {  31,1300 }, {  32,1576 }, {  33,1300 }, {  34,1300 },
 {  35,1300 }, {  36,1300 }, {  37,1300 }, {  38,1300 }, {  39,1300 },
 {  40,1300 }, {  41,1300 }, {  42,1300 }, {  43,1300 }, {  44,1300 },
 {  45,1300 }, {  46,1300 }, {  47,1300 }, {  48,1300 }, {  49,1300 },
 {  50,1300 }, {  51,1300 }, {  52,1300 }, {  53,1300 }, {  54,1300 },
 {  55,1300 }, {  56,1300 }, {  57,1300 }, {  58,1594 }, {  59,1300 },
 {  60,1300 }, {  61,1300 }, {  62,1300 }, {  63,1300 }, {  64,1300 },
 {  65,1300 }, {  66,1300 }, {  67,1300 }, {  68,1300 }, {  69,1300 },
 {  70,1300 }, {  71,1300 }, {  72,1300 }, {  73,1300 }, {  74,1300 },

 {  75,1300 }, {  76,1300 }, {  77,1300 }, {  78,1300 }, {  79,1300 },
 {  80,1300 }, {  81,1300 }, {  82,1300 }, {  83,1300 }, {  84,1300 },
 {  85,1300 }, {  86,1300 }, {  87,1300 }, {  88,1300 }, {  89,1300 },
 {  90,1300 }, {  91,1300 }, {  92,1300 }, {  93,1300 }, {  94,1300 },
 {  95,1300 }, {  96,1300 }, {  97,1300 }, {  98,1300 }, {  99,1300 },
 { 100,1300 }, { 101,1300 }, { 102,1300 }, { 103,1300 }, { 104,1300 },
 { 105,1300 }, { 106,1300 }, { 107,1300 }, { 108,1300 }, { 109,1300 },
 { 110,1300 }, { 111,1300 }, { 112,1300 }, { 113,1300 }, { 114,1300 },
 { 115,1300 }, { 116,1300 }, { 117,1300 }, { 118,1300 }, { 119,1300 },
 { 120,1300 }, { 121,1300 }, { 122,1300 }, { 123,1300 }, { 124,1300 },

 { 125,1300 }, { 126,1300 }, { 127,1300 }, { 128,1300 }, { 129,1300 },
 { 130,1300 }, { 131,1300 }, { 132,1300 }, { 133,1300 }, { 134,1300 },
 { 135,1300 }, { 136,1300 }, { 137,1300 }, { 138,1300 }, { 139,1300 },
 { 140,1300 }, { 141,1300 }, { 142,1300 }, { 143,1300 }, { 144,1300 },
 { 145,1300 }, { 146,1300 }, { 147,1300 }, { 148,1300 }, { 149,1300 },
 { 150,1300 }, { 151,1300 }, { 152,1300 }, { 153,1300 }, { 154,1300 },
 { 155,1300 }, { 156,1300 }, { 157,1300 }, { 158,1300 }, { 159,1300 },
 { 160,1300 }, { 161,1300 }, { 162,1300 }, { 163,1300 }, { 164,1300 },
 { 165,1300 }, { 166,1300 }, { 167,1300 }, { 168,1300 }, { 169,1300 },
 { 170,1300 }, { 171,1300 }, { 172,1300 }, { 173,1300 }, { 174,1300 },

 { 175,1300 }, { 176,1300 }, { 177,1300 }, { 178,1300 }, { 179,1300 },
 { 180,1300 }, { 181,1300 }, { 182,1300 }, { 183,1300 }, { 184,1300 },
 { 185,1300 }, { 186,1300 }, { 187,1300 }, { 188,1300 }, { 189,1300 },
 { 190,1300 }, { 191,1300 }, { 192,1300 }, { 193,1300 }, { 194,1300 },
 { 195,1300 }, { 196,1300 }, { 197,1300 }, { 198,1300 }, { 199,1300 },
 { 200,1300 }, { 201,1300 }, { 202,1300 }, { 203,1300 }, { 204,1300 },
 { 205,1300 }, { 206,1300 }, { 207,1300 }, { 208,1300 }, { 209,1300 },
 { 210,1300 }, { 211,1300 }, { 212,1300 }, { 213,1300 }, { 214,1300 },
 { 215,1300 }, { 216,1300 }, { 217,1300 }, { 218,1300 }, { 219,1300 },
 { 220,1300 }, { 221,1300 }, { 222,1300 }, { 223,1300 }, { 224,1300 },

 { 225,1300 }, { 226,1300 }, { 227,1300 }, { 228,1300 }, { 229,1300 },
 { 230,1300 }, { 231,1300 }, { 232,1300 }, { 233,1300 }, { 234,1300 },
 { 235,1300 }, { 236,1300 }, { 237,1300 }, { 238,1300 }, { 239,1300 },
 { 240,1300 }, { 241,1300 }, { 242,1300 }, { 243,1300 }, { 244,1300 },
 { 245,1300 }, { 246,1300 }, { 247,1300 }, { 248,1300 }, { 249,1300 },
 { 250,1300 }, { 251,1300 }, { 252,1300 }, { 253,1300 }, { 254,1300 },
 { 255,1300 }, { 256,1300 }, {   0,   0 }, {   0,2277 }, {   1,1042 },
 {   2,1042 }, {   3,1042 }, {   4,1042 }, {   5,1042 }, {   6,1042 },
 {   7,1042 }, {   8,1042 }, {   9,1338 }, {  10,1354 }, {  11,1042 },
 {  12,1042 }, {  13,1338 }, {  14,1042 }, {  15,1042 }, {  16,1042 },

 {  17,1042 }, {  18,1042 }, {  19,1042 }, {  20,1042 }, {  21,1042 },
 {  22,1042 }, {  23,1042 }, {  24,1042 }, {  25,1042 }, {  26,1042 },
 {  27,1042 }, {  28,1042 }, {  29,1042 }, {  30,1042 }, {  31,1042 },
 {  32,1338 }, {  33,1042 }, {  34,1042 }, {  35,1042 }, {  36,1042 },
 {  37,1042 }, {  38,1042 }, {  39,1042 }, {  40,1042 }, {  41,1042 },
 {  42,1042 }, {  43,1042 }, {  44,1356 }, {  45,1042 }, {  46,1042 },
 {  47,1042 }, {  48,1042 }, {  49,1042 }, {  50,1042 }, {  51,1042 },
 {  52,1042 }, {  53,1042 }, {  54,1042 }, {  55,1042 }, {  56,1042 },
 {  57,1042 }, {  58,1042 }, {  59,1042 }, {  60,1042 }, {  61,1042 },
 {  62,1042 }, {  63,1042 }, {  64,1042 }, {  65,1042 }, {  66,1042 },

 {  67,1042 }, {  68,1042 }, {  69,1042 }, {  70,1042 }, {  71,1042 },
 {  72,1042 }, {  73,1042 }, {  74,1042 }, {  75,1042 }, {  76,1042 },
 {  77,1042 }, {  78,1042 }, {  79,1042 }, {  80,1042 }, {  81,1042 },
 {  82,1042 }, {  83,1042 }, {  84,1042 }, {  85,1042 }, {  86,1042 },
 {  87,1042 }, {  88,1042 }, {  89,1042 }, {  90,1042 }, {  91,1042 },
 {  92,1042 }, {  93,1042 }, {  94,1042 }, {  95,1042 }, {  96,1042 },
 {  97,1042 }, {  98,1042 }, {  99,1042 }, { 100,1042 }, { 101,1042 },
 { 102,1042 }, { 103,1042 }, { 104,1042 }, { 105,1042 }, { 106,1042 },
 { 107,1042 }, { 108,1042 }, { 109,1042 }, { 110,1042 }, { 111,1042 },
 { 112,1042 }, { 113,1042 }, { 114,1042 }, { 115,1042 }, { 116,1042 },

 { 117,1042 }, { 118,1042 }, { 119,1042 }, { 120,1042 }, { 121,1042 },
 { 122,1042 }, { 123,1042 }, { 124,1042 }, { 125,1361 }, { 126,1042 },
 { 127,1042 }, { 128,1042 }, { 129,1042 }, { 130,1042 }, { 131,1042 },
 { 132,1042 }, { 133,1042 }, { 134,1042 }, { 135,1042 }, { 136,1042 },
 { 137,1042 }, { 138,1042 }, { 139,1042 }, { 140,1042 }, { 141,1042 },
 { 142,1042 }, { 143,1042 }, { 144,1042 }, { 145,1042 }, { 146,1042 },
 { 147,1042 }, { 148,1042 }, { 149,1042 }, { 150,1042 }, { 151,1042 },
 { 152,1042 }, { 153,1042 }, { 154,1042 }, { 155,1042 }, { 156,1042 },
 { 157,1042 }, { 158,1042 }, { 159,1042 }, { 160,1042 }, { 161,1042 },
 { 162,1042 }, { 163,1042 }, { 164,1042 }, { 165,1042 }, { 166,1042 },

 { 167,1042 }, { 168,1042 }, { 169,1042 }, { 170,1042 }, { 171,1042 },
 { 172,1042 }, { 173,1042 }, { 174,1042 }, { 175,1042 }, { 176,1042 },
 { 177,1042 }, { 178,1042 }, { 179,1042 }, { 180,1042 }, { 181,1042 },
 { 182,1042 }, { 183,1042 }, { 184,1042 }, { 185,1042 }, { 186,1042 },
 { 187,1042 }, { 188,1042 }, { 189,1042 }, { 190,1042 }, { 191,1042 },
 { 192,1042 }, { 193,1042 }, { 194,1042 }, { 195,1042 }, { 196,1042 },
 { 197,1042 }, { 198,1042 }, { 199,1042 }, { 200,1042 }, { 201,1042 },
 { 202,1042 }, { 203,1042 }, { 204,1042 }, { 205,1042 }, { 206,1042 },
 { 207,1042 }, { 208,1042 }, { 209,1042 }, { 210,1042 }, { 211,1042 },
 { 212,1042 }, { 213,1042 }, { 214,1042 }, { 215,1042 }, { 216,1042 },

 { 217,1042 }, { 218,1042 }, { 219,1042 }, { 220,1042 }, { 221,1042 },
 { 222,1042 }, { 223,1042 }, { 224,1042 }, { 225,1042 }, { 226,1042 },
 { 227,1042 }, { 228,1042 }, { 229,1042 }, { 230,1042 }, { 231,1042 },
 { 232,1042 }, { 233,1042 }, { 234,1042 }, { 235,1042 }, { 236,1042 },
 { 237,1042 }, { 238,1042 }, { 239,1042 }, { 240,1042 }, { 241,1042 },
 { 242,1042 }, { 243,1042 }, { 244,1042 }, { 245,1042 }, { 246,1042 },
 { 247,1042 }, { 248,1042 }, { 249,1042 }, { 250,1042 }, { 251,1042 },
 { 252,1042 }, { 253,1042 }, { 254,1042 }, { 255,1042 }, { 256,1042 },
 {   0,   0 }, {   0,2019 }, {   1, 784 }, {   2, 784 }, {   3, 784 },
 {   4, 784 }, {   5, 784 }, {   6, 784 }, {   7, 784 }, {   8, 784 },

 {   9,1080 }, {  10,1096 }, {  11, 784 }, {  12, 784 }, {  13,1080 },
 {  14, 784 }, {  15, 784 }, {  16, 784 }, {  17, 784 }, {  18, 784 },
 {  19, 784 }, {  20, 784 }, {  21, 784 }, {  22, 784 }, {  23, 784 },
 {  24, 784 }, {  25, 784 }, {  26, 784 }, {  27, 784 }, {  28, 784 },
 {  29, 784 }, {  30, 784 }, {  31, 784 }, {  32,1080 }, {  33, 784 },
 {  34, 784 }, {  35, 784 }, {  36, 784 }, {  37, 784 }, {  38, 784 },
 {  39, 784 }, {  40, 784 }, {  41, 784 }, {  42, 784 }, {  43, 784 },
 {  44,1098 }, {  45, 784 }, {  46, 784 }, {  47, 784 }, {  48, 784 },
 {  49, 784 }, {  50, 784 }, {  51, 784 }, {  52, 784 }, {  53, 784 },
 {  54, 784 }, {  55, 784 }, {  56, 784 }, {  57, 784 }, {  58, 784 },

 {  59, 784 }, {  60, 784 }, {  61, 784 }, {  62, 784 }, {  63, 784 },
 {  64, 784 }, {  65, 784 }, {  66, 784 }, {  67, 784 }, {  68, 784 },
 {  69, 784 }, {  70, 784 }, {  71, 784 }, {  72, 784 }, {  73, 784 },
 {  74, 784 }, {  75, 784 }, {  76, 784 }, {  77, 784 }, {  78, 784 },
 {  79, 784 }, {  80, 784 }, {  81, 784 }, {  82, 784 }, {  83, 784 },
 {  84, 784 }, {  85, 784 }, {  86, 784 }, {  87, 784 }, {  88, 784 },
 {  89, 784 }, {  90, 784 }, {  91, 784 }, {  92, 784 }, {  93, 784 },
 {  94, 784 }, {  95, 784 }, {  96, 784 }, {  97, 784 }, {  98, 784 },
 {  99, 784 }, { 100, 784 }, { 101, 784 }, { 102, 784 }, { 103, 784 },
 { 104, 784 }, { 105, 784 }, { 106, 784 }, { 107, 784 }, { 108, 784 },

 { 109, 784 }, { 110, 784 }, { 111, 784 }, { 112, 784 }, { 113, 784 },
 { 114, 784 }, { 115, 784 }, { 116, 784 }, { 117, 784 }, { 118, 784 },
 { 119, 784 }, { 120, 784 }, { 121, 784 }, { 122, 784 }, { 123, 784 },
 { 124, 784 }, { 125,1103 }, { 126, 784 }, { 127, 784 }, { 128, 784 },
 { 129, 784 }, { 130, 784 }, { 131, 784 }, { 132, 784 }, { 133, 784 },
 { 134, 784 }, { 135, 784 }, { 136, 784 }, { 137, 784 }, { 138, 784 },
 { 139, 784 }, { 140, 784 }, { 141, 784 }, { 142, 784 }, { 143, 784 },
 { 144, 784 }, { 145, 784 }, { 146, 784 }, { 147, 784 }, { 148, 784 },
 { 149, 784 }, { 150, 784 }, { 151, 784 }, { 152, 784 }, { 153, 784 },
 { 154, 784 }, { 155, 784 }, { 156, 784 }, { 157, 784 }, { 158, 784 },

 { 159, 784 }, { 160, 784 }, { 161, 784 }, { 162, 784 }, { 163, 784 },
 { 164, 784 }, { 165, 784 }, { 166, 784 }, { 167, 784 }, { 168, 784 },
 { 169, 784 }, { 170, 784 }, { 171, 784 }, { 172, 784 }, { 173, 784 },
 { 174, 784 }, { 175, 784 }, { 176, 784 }, { 177, 784 }, { 178, 784 },
 { 179, 784 }, { 180, 784 }, { 181, 784 }, { 182, 784 }, { 183, 784 },
 { 184, 784 }, { 185, 784 }, { 186, 784 }, { 187, 784 }, { 188, 784 },
 { 189, 784 }, { 190, 784 }, { 191, 784 }, { 192, 784 }, { 193, 784 },
 { 194, 784 }, { 195, 784 }, { 196, 784 }, { 197, 784 }, { 198, 784 },
 { 199, 784 }, { 200, 784 }, { 201, 784 }, { 202, 784 }, { 203, 784 },
 { 204, 784 }, { 205, 784 }, { 206, 784 }, { 207, 784 }, { 208, 784 },

 { 209, 784 }, { 210, 784 }, { 211, 784 }, { 212, 784 }, { 213, 784 },
 { 214, 784 }, { 215, 784 }, { 216, 784 }, { 217, 784 }, { 218, 784 },
 { 219, 784 }, { 220, 784 }, { 221, 784 }, { 222, 784 }, { 223, 784 },
 { 224, 784 }, { 225, 784 }, { 226, 784 }, { 227, 784 }, { 228, 784 },
 { 229, 784 }, { 230, 784 }, { 231, 784 }, { 232, 784 }, { 233, 784 },
 { 234, 784 }, { 235, 784 }, { 236, 784 }, { 237, 784 }, { 238, 784 },
 { 239, 784 }, { 240, 784 }, { 241, 784 }, { 242, 784 }, { 243, 784 },
 { 244, 784 }, { 245, 784 }, { 246, 784 }, { 247, 784 }, { 248, 784 },
 { 249, 784 }, { 250, 784 }, { 251, 784 }, { 252, 784 }, { 253, 784 },
 { 254, 784 }, { 255, 784 }, { 256, 784 }, {   0,   0 }, {   0,1761 },

 {   1, 857 }, {   2, 857 }, {   3, 857 }, {   4, 857 }, {   5, 857 },
 {   6, 857 }, {   7, 857 }, {   8, 857 }, {   9, 857 }, {  10, 774 },
 {  11, 857 }, {  12, 857 }, {  13, 857 }, {  14, 857 }, {  15, 857 },
 {  16, 857 }, {  17, 857 }, {  18, 857 }, {  19, 857 }, {  20, 857 },
 {  21, 857 }, {  22, 857 }, {  23, 857 }, {  24, 857 }, {  25, 857 },
 {  26, 857 }, {  27, 857 }, {  28, 857 }, {  29, 857 }, {  30, 857 },
 {  31, 857 }, {  32, 857 }, {  33, 857 }, {  34, 857 }, {  35, 857 },
 {  36, 857 }, {  37, 857 }, {  38, 857 }, {  39, 857 }, {  40, 857 },
 {  41, 857 }, {  42, 857 }, {  43, 857 }, {  44, 857 }, {  45, 864 },
 {  46, 857 }, {  47, 857 }, {  48, 876 }, {  49, 876 }, {  50, 876 },

 {  51, 876 }, {  52, 876 }, {  53, 876 }, {  54, 876 }, {  55, 876 },
 {  56, 876 }, {  57, 876 }, {  58, 857 }, {  59, 857 }, {  60, 857 },
 {  61, 857 }, {  62, 857 }, {  63, 857 }, {  64, 857 }, {  65, 857 },
 {  66, 857 }, {  67, 857 }, {  68, 857 }, {  69, 857 }, {  70, 857 },
 {  71, 857 }, {  72, 857 }, {  73, 857 }, {  74, 857 }, {  75, 857 },
 {  76, 857 }, {  77, 857 }, {  78, 857 }, {  79, 857 }, {  80, 857 },
 {  81, 857 }, {  82, 857 }, {  83, 857 }, {  84, 857 }, {  85, 857 },
 {  86, 857 }, {  87, 857 }, {  88, 857 }, {  89, 857 }, {  90, 857 },
 {  91, 857 }, {  92, 857 }, {  93, 857 }, {  94, 857 }, {  95, 857 },
 {  96, 857 }, {  97, 857 }, {  98, 857 }, {  99, 857 }, { 100, 857 },

 { 101, 857 }, { 102, 857 }, { 103, 857 }, { 104, 857 }, { 105, 857 },
 { 106, 857 }, { 107, 857 }, { 108, 857 }, { 109, 857 }, { 110, 857 },
 { 111, 857 }, { 112, 857 }, { 113, 857 }, { 114, 857 }, { 115, 857 },
 { 116, 857 }, { 117, 857 }, { 118, 857 }, { 119, 857 }, { 120, 857 },
 { 121, 857 }, { 122, 857 }, { 123, 857 }, { 124, 857 }, { 125, 857 },
 { 126, 857 }, { 127, 857 }, { 128, 857 }, { 129, 857 }, { 130, 857 },
 { 131, 857 }, { 132, 857 }, { 133, 857 }, { 134, 857 }, { 135, 857 },
 { 136, 857 }, { 137, 857 }, { 138, 857 }, { 139, 857 }, { 140, 857 },
 { 141, 857 }, { 142, 857 }, { 143, 857 }, { 144, 857 }, { 145, 857 },
 { 146, 857 }, { 147, 857 }, { 148, 857 }, { 149, 857 }, { 150, 857 },

 { 151, 857 }, { 152, 857 }, { 153, 857 }, { 154, 857 }, { 155, 857 },
 { 156, 857 }, { 157, 857 }, { 158, 857 }, { 159, 857 }, { 160, 857 },
 { 161, 857 }, { 162, 857 }, { 163, 857 }, { 164, 857 }, { 165, 857 },
 { 166, 857 }, { 167, 857 }, { 168, 857 }, { 169, 857 }, { 170, 857 },
 { 171, 857 }, { 172, 857 }, { 173, 857 }, { 174, 857 }, { 175, 857 },
 { 176, 857 }, { 177, 857 }, { 178, 857 }, { 179, 857 }, { 180, 857 },
 { 181, 857 }, { 182, 857 }, { 183, 857 }, { 184, 857 }, { 185, 857 },
 { 186, 857 }, { 187, 857 }, { 188, 857 }, { 189, 857 }, { 190, 857 },
 { 191, 857 }, { 192, 857 }, { 193, 857 }, { 194, 857 }, { 195, 857 },
 { 196, 857 }, { 197, 857 }, { 198, 857 }, { 199, 857 }, { 200, 857 },

 { 201, 857 }, { 202, 857 }, { 203, 857 }, { 204, 857 }, { 205, 857 },
 { 206, 857 }, { 207, 857 }, { 208, 857 }, { 209, 857 }, { 210, 857 },
 { 211, 857 }, { 212, 857 }, { 213, 857 }, { 214, 857 }, { 215, 857 },
 { 216, 857 }, { 217, 857 }, { 218, 857 }, { 219, 857 }, { 220, 857 },
 { 221, 857 }, { 222, 857 }, { 223, 857 }, { 224, 857 }, { 225, 857 },
 { 226, 857 }, { 227, 857 }, { 228, 857 }, { 229, 857 }, { 230, 857 },
 { 231, 857 }, { 232, 857 }, { 233, 857 }, { 234, 857 }, { 235, 857 },
 { 236, 857 }, { 237, 857 }, { 238, 857 }, { 239, 857 }, { 240, 857 },
 { 241, 857 }, { 242, 857 }, { 243, 857 }, { 244, 857 }, { 245, 857 },
 { 246, 857 }, { 247, 857 }, { 248, 857 }, { 249, 857 }, { 250, 857 },

 { 251, 857 }, { 252, 857 }, { 253, 857 }, { 254, 857 }, { 255, 857 },
 { 256, 857 }, {   0,   0 }, {   0,1503 }, {   1, 599 }, {   2, 599 },
 {   3, 599 }, {   4, 599 }, {   5, 599 }, {   6, 599 }, {   7, 599 },
 {   8, 599 }, {   9, 599 }, {  10, 516 }, {  11, 599 }, {  12, 599 },
 {  13, 599 }, {  14, 599 }, {  15, 599 }, {  16, 599 }, {  17, 599 },
 {  18, 599 }, {  19, 599 }, {  20, 599 }, {  21, 599 }, {  22, 599 },
 {  23, 599 }, {  24, 599 }, {  25, 599 }, {  26, 599 }, {  27, 599 },
 {  28, 599 }, {  29, 599 }, {  30, 599 }, {  31, 599 }, {  32, 599 },
 {  33, 599 }, {  34, 599 }, {  35, 599 }, {  36, 599 }, {  37, 599 },
 {  38, 599 }, {  39, 599 }, {  40, 599 }, {  41, 599 }, {  42, 599 },

 {  43, 599 }, {  44, 599 }, {  45, 606 }, {  46, 599 }, {  47, 599 },
 {  48, 618 }, {  49, 618 }, {  50, 618 }, {  51, 618 }, {  52, 618 },
 {  53, 618 }, {  54, 618 }, {  55, 618 }, {  56, 618 }, {  57, 618 },
 {  58, 599 }, {  59, 599 }, {  60, 599 }, {  61, 599 }, {  62, 599 },
 {  63, 599 }, {  64, 599 }, {  65, 599 }, {  66, 599 }, {  67, 599 },
 {  68, 599 }, {  69, 599 }, {  70, 599 }, {  71, 599 }, {  72, 599 },
 {  73, 599 }, {  74, 599 }, {  75, 599 }, {  76, 599 }, {  77, 599 },
 {  78, 599 }, {  79, 599 }, {  80, 599 }, {  81, 599 }, {  82, 599 },
 {  83, 599 }, {  84, 599 }, {  85, 599 }, {  86, 599 }, {  87, 599 },
 {  88, 599 }, {  89, 599 }, {  90, 599 }, {  91, 599 }, {  92, 599 },

 {  93, 599 }, {  94, 599 }, {  95, 599 }, {  96, 599 }, {  97, 599 },
 {  98, 599 }, {  99, 599 }, { 100, 599 }, { 101, 599 }, { 102, 599 },
 { 103, 599 }, { 104, 599 }, { 105, 599 }, { 106, 599 }, { 107, 599 },
 { 108, 599 }, { 109, 599 }, { 110, 599 }, { 111, 599 }, { 112, 599 },
 { 113, 599 }, { 114, 599 }, { 115, 599 }, { 116, 599 }, { 117, 599 },
 { 118, 599 }, { 119, 599 }, { 120, 599 }, { 121, 599 }, { 122, 599 },
 { 123, 599 }, { 124, 599 }, { 125, 599 }, { 126, 599 }, { 127, 599 },
 { 128, 599 }, { 129, 599 }, { 130, 599 }, { 131, 599 }, { 132, 599 },
 { 133, 599 }, { 134, 599 }, { 135, 599 }, { 136, 599 }, { 137, 599 },
 { 138, 599 }, { 139, 599 }, { 140, 599 }, { 141, 599 }, { 142, 599 },

 { 143, 599 }, { 144, 599 }, { 145, 599 }, { 146, 599 }, { 147, 599 },
 { 148, 599 }, { 149, 599 }, { 150, 599 }, { 151, 599 }, { 152, 599 },
 { 153, 599 }, { 154, 599 }, { 155, 599 }, { 156, 599 }, { 157, 599 },
 { 158, 599 }, { 159, 599 }, { 160, 599 }, { 161, 599 }, { 162, 599 },
 { 163, 599 }, { 164, 599 }, { 165, 599 }, { 166, 599 }, { 167, 599 },
 { 168, 599 }, { 169, 599 }, { 170, 599 }, { 171, 599 }, { 172, 599 },
 { 173, 599 }, { 174, 599 }, { 175, 599 }, { 176, 599 }, { 177, 599 },
 { 178, 599 }, { 179, 599 }, { 180, 599 }, { 181, 599 }, { 182, 599 },
 { 183, 599 }, { 184, 599 }, { 185, 599 }, { 186, 599 }, { 187, 599 },
 { 188, 599 }, { 189, 599 }, { 190, 599 }, { 191, 599 }, { 192, 599 },

 { 193, 599 }, { 194, 599 }, { 195, 599 }, { 196, 599 }, { 197, 599 },
 { 198, 599 }, { 199, 599 }, { 200, 599 }, { 201, 599 }, { 202, 599 },
 { 203, 599 }, { 204, 599 }, { 205, 599 }, { 206, 599 }, { 207, 599 },
 { 208, 599 }, { 209, 599 }, { 210, 599 }, { 211, 599 }, { 212, 599 },
 { 213, 599 }, { 214, 599 }, { 215, 599 }, { 216, 599 }, { 217, 599 },
 { 218, 599 }, { 219, 599 }, { 220, 599 }, { 221, 599 }, { 222, 599 },
 { 223, 599 }, { 224, 599 }, { 225, 599 }, { 226, 599 }, { 227, 599 },
 { 228, 599 }, { 229, 599 }, { 230, 599 }, { 231, 599 }, { 232, 599 },
 { 233, 599 }, { 234, 599 }, { 235, 599 }, { 236, 599 }, { 237, 599 },
 { 238, 599 }, { 239, 599 }, { 240, 599 }, { 241, 599 }, { 242, 599 },

 { 243, 599 }, { 244, 599 }, { 245, 599 }, { 246, 599 }, { 247, 599 },
 { 248, 599 }, { 249, 599 }, { 250, 599 }, { 251, 599 }, { 252, 599 },
 { 253, 599 }, { 254, 599 }, { 255, 599 }, { 256, 599 }, {   0,   1 },
 {   0,1245 }, {   1, 451 }, {   2, 451 }, {   3, 451 }, {   4, 451 },
 {   5, 451 }, {   6, 451 }, {   7, 451 }, {   8, 451 }, {   0,  21 },
 {   0,1235 }, {  11, 451 }, {  12, 451 }, {   0,   0 }, {  14, 451 },
 {  15, 451 }, {  16, 451 }, {  17, 451 }, {  18, 451 }, {  19, 451 },
 {  20, 451 }, {  21, 451 }, {  22, 451 }, {  23, 451 }, {  24, 451 },
 {  25, 451 }, {  26, 451 }, {  27, 451 }, {  28, 451 }, {  29, 451 },
 {  30, 451 }, {  31, 451 }, {   0,   0 }, {  33, 451 }, {  34, 451 },

 {  35, 451 }, {  36, 451 }, {  37, 451 }, {  38, 451 }, {  39, 451 },
 {  40, 451 }, {  41, 451 }, {  42, 451 }, {  43, 451 }, {  44, 451 },
 {  45, 451 }, {  46, 451 }, {  47, 451 }, {  48, 451 }, {  49, 451 },
 {  50, 451 }, {  51, 451 }, {  52, 451 }, {  53, 451 }, {  54, 451 },
 {  55, 451 }, {  56, 451 }, {  57, 451 }, {  58, 451 }, {  59, 451 },
 {  60, 451 }, {  61, 451 }, {  62, 451 }, {  63, 451 }, {  64, 451 },
 {  65, 451 }, {  66, 451 }, {  67, 451 }, {  68, 451 }, {  69, 451 },
 {  70, 451 }, {  71, 451 }, {  72, 451 }, {  73, 451 }, {  74, 451 },
 {  75, 451 }, {  76, 451 }, {  77, 451 }, {  78, 451 }, {  79, 451 },
 {  80, 451 }, {  81, 451 }, {  82, 451 }, {  83, 451 }, {  84, 451 },

 {  85, 451 }, {  86, 451 }, {  87, 451 }, {  88, 451 }, {  89, 451 },
 {  90, 451 }, {  91, 451 }, {  92, 451 }, {  93, 451 }, {  94, 451 },
 {  95, 451 }, {  96, 451 }, {  97, 451 }, {  98, 451 }, {  99, 451 },
 { 100, 451 }, { 101, 451 }, { 102, 451 }, { 103, 451 }, { 104, 451 },
 { 105, 451 }, { 106, 451 }, { 107, 451 }, { 108, 451 }, { 109, 451 },
 { 110, 451 }, { 111, 451 }, { 112, 451 }, { 113, 451 }, { 114, 451 },
 { 115, 451 }, { 116, 451 }, { 117, 451 }, { 118, 451 }, { 119, 451 },
 { 120, 451 }, { 121, 451 }, { 122, 451 }, { 123, 451 }, { 124, 451 },
 { 125, 451 }, { 126, 451 }, { 127, 451 }, { 128, 451 }, { 129, 451 },
 { 130, 451 }, { 131, 451 }, { 132, 451 }, { 133, 451 }, { 134, 451 },

 { 135, 451 }, { 136, 451 }, { 137, 451 }, { 138, 451 }, { 139, 451 },
 { 140, 451 }, { 141, 451 }, { 142, 451 }, { 143, 451 }, { 144, 451 },
 { 145, 451 }, { 146, 451 }, { 147, 451 }, { 148, 451 }, { 149, 451 },
 { 150, 451 }, { 151, 451 }, { 152, 451 }, { 153, 451 }, { 154, 451 },
 { 155, 451 }, { 156, 451 }, { 157, 451 }, { 158, 451 }, { 159, 451 },
 { 160, 451 }, { 161, 451 }, { 162, 451 }, { 163, 451 }, { 164, 451 },
 { 165, 451 }, { 166, 451 }, { 167, 451 }, { 168, 451 }, { 169, 451 },
 { 170, 451 }, { 171, 451 }, { 172, 451 }, { 173, 451 }, { 174, 451 },
 { 175, 451 }, { 176, 451 }, { 177, 451 }, { 178, 451 }, { 179, 451 },
 { 180, 451 }, { 181, 451 }, { 182, 451 }, { 183, 451 }, { 184, 451 },

 { 185, 451 }, { 186, 451 }, { 187, 451 }, { 188, 451 }, { 189, 451 },
 { 190, 451 }, { 191, 451 }, { 192, 451 }, { 193, 451 }, { 194, 451 },
 { 195, 451 }, { 196, 451 }, { 197, 451 }, { 198, 451 }, { 199, 451 },
 { 200, 451 }, { 201, 451 }, { 202, 451 }, { 203, 451 }, { 204, 451 },
 { 205, 451 }, { 206, 451 }, { 207, 451 }, { 208, 451 }, { 209, 451 },
 { 210, 451 }, { 211, 451 }, { 212, 451 }, { 213, 451 }, { 214, 451 },
 { 215, 451 }, { 216, 451 }, { 217, 451 }, { 218, 451 }, { 219, 451 },
 { 220, 451 }, { 221, 451 }, { 222, 451 }, { 223, 451 }, { 224, 451 },
 { 225, 451 }, { 226, 451 }, { 227, 451 }, { 228, 451 }, { 229, 451 },
 { 230, 451 }, { 231, 451 }, { 232, 451 }, { 233, 451 }, { 234, 451 },

 { 235, 451 }, { 236, 451 }, { 237, 451 }, { 238, 451 }, { 239, 451 },
 { 240, 451 }, { 241, 451 }, { 242, 451 }, { 243, 451 }, { 244, 451 },
 { 245, 451 }, { 246, 451 }, { 247, 451 }, { 248, 451 }, { 249, 451 },
 { 250, 451 }, { 251, 451 }, { 252, 451 }, { 253, 451 }, { 254, 451 },
 { 255, 451 }, { 256, 451 }, {   0,  22 }, {   0, 987 }, {   0,  22 },
 {   0, 985 }, {   0,   2 }, {   0, 983 }, {   0,   4 }, {   0, 981 },
 {   0,   6 }, {   0, 979 }, {   0,   5 }, {   0, 977 }, {   9, 449 },
 {  10, 449 }, {   9, 454 }, {  10, 454 }, {  13, 449 }, {   0,   0 },
 {  13, 454 }, {   0,   0 }, {   0,  22 }, {   0, 967 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,  21 }, {   0, 959 }, {   0,  22 }, {   0, 957 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32, 449 }, {   0,   0 }, {  32, 454 },
 {   9, 468 }, {  10, 468 }, {   9, 466 }, {  10, 466 }, {  13, 468 },
 {   0,   0 }, {  13, 466 }, {   0,   0 }, {   0,  16 }, {   0, 941 },
 {   0,  21 }, {   0, 939 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  34,  74 }, {   9, 432 }, {  10, 432 },
 {   9, 450 }, {  10, 450 }, {  13, 432 }, {  32, 468 }, {  13, 450 },
 {  32, 466 }, {   0,  22 }, {   0, 923 }, {   0,  18 }, {   0, 921 },
 {  47,  80 }, {   0,   0 }, {   0,   0 }, {   0,  19 }, {   0, 916 },
 {   0,   0 }, {   9, 434 }, {  10, 434 }, {   9, 483 }, {  10, 483 },

 {  13, 434 }, {  32, 432 }, {  13, 483 }, {  32, 450 }, {  10, 480 },
 {   0,  20 }, {   0, 904 }, {   0,   3 }, {   0, 902 }, {  58, 142 },
 {   0,   0 }, {  58, 140 }, {   0,  20 }, {   0, 897 }, {   0,   0 },
 {  44, 486 }, {   0,   7 }, {   0, 893 }, {  10, 491 }, {  32, 434 },
 {   0,   0 }, {  32, 483 }, {   0,   9 }, {   0, 887 }, {   0,  17 },
 {   0, 885 }, {   0,   8 }, {   0, 883 }, {   0,  10 }, {   0, 881 },
 {   0,   0 }, {  44, 470 }, {   0,  11 }, {   0, 877 }, {   0,   0 },
 {  92,  84 }, {   0,  12 }, {   0, 873 }, {   0,  13 }, {   0, 871 },
 {   0,   0 }, {  98,  86 }, {   0,  14 }, {   0, 867 }, {   0,   0 },
 { 102,  90 }, {   0,   0 }, {   0,   0 }, { 123, 451 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, { 125,  81 }, { 110,  94 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 114,  96 }, {   0,   0 }, { 116, 100 },
 { 117, 450 }, {  48, 463 }, {  49, 463 }, {  50, 463 }, {  51, 463 },
 {  52, 463 }, {  53, 463 }, {  54, 463 }, {  55, 463 }, {  56, 463 },
 {  57, 463 }, {  46, 462 }, {   0,   0 }, {  48, 451 }, {  49, 451 },
 {  50, 451 }, {  51, 451 }, {  52, 451 }, {  53, 451 }, {  54, 451 },
 {  55, 451 }, {  56, 451 }, {  57, 451 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  16 }, {   0, 817 }, {  69, 483 },
 {   0,   0 }, { 125, 498 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   9, 308 }, {  10, 308 }, {   0,   0 },
 {   0,   0 }, {  13, 308 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 125, 482 }, {   0,   0 }, {   0,   0 },
 {   0,   1 }, {   0, 794 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {  32, 308 }, { 101, 483 }, {  11,   0 }, {  12,   0 }, {   0,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 },

 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },

 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 },

 { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 },
 { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 },
 { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 },
 { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 },
 { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 },
 { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 },
 { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 },
 { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 },
 { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 },
 { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 },

 { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 },
 { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 },
 { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 },
 { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 },
 { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 },
 { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 },
 { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 },
 { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 },
 { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 },
 { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 },

 { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 },
 { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 },
 { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 },
 { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 },
 { 254,   0 }, { 255,   0 }, { 256,   0 }, {   0,   0 }, {   0, 536 },
 {   0,   2 }, {   0, 534 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   2 }, {   0, 529 }, {   0,   0 }, {   9,   0 }, {  10,   0 },
 {   9,   5 }, {  10,   5 }, {  13,   0 }, {   0,   0 }, {  13,   5 },
 {   9,   0 }, {  10,   0 }, {   0,   0 }, {   0, 517 }, {  13,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,  16 }, {   0, 509 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {   0,   0 }, {  32,   5 }, {   0,   0 },
 {   9,   0 }, {  10,   0 }, {   0,   0 }, {  32,   0 }, {  13,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 491 },
 {   0,   0 }, {   0, 489 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {  10,   0 },
 {   9,   0 }, {  10,   0 }, {  13,   0 }, {  32,   0 }, {  13,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48, 125 }, {  49, 125 }, {  50, 125 }, {  51, 125 },
 {  52, 125 }, {  53, 125 }, {  54, 125 }, {  55, 125 }, {  56, 125 },

 {  57, 125 }, {  32,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  18 }, {   0, 453 }, {  65, 125 }, {  66, 125 },
 {  67, 125 }, {  68, 125 }, {  69, 125 }, {  70, 125 }, {   0,   0 },
 {  44,  36 }, {   9,  15 }, {  10,  15 }, {   0,  19 }, {   0, 441 },
 {  13,  15 }, {   0,  18 }, {   0, 438 }, {   0,  19 }, {   0, 436 },
 {   0,  17 }, {   0, 434 }, {  58,-326 }, {   0,   0 }, {  10,   5 },
 {   0,   0 }, {   9,   0 }, {  10,   0 }, {   0,   0 }, {  10,   0 },
 {  13,   0 }, {   0,   0 }, {   0, 423 }, {   0,   0 }, {  32,  15 },
 {  97, 125 }, {  98, 125 }, {  99, 125 }, { 100, 125 }, { 101, 125 },
 { 102, 125 }, {   0,   0 }, { 123,   2 }, {   0,   3 }, {   0, 411 },

 {   0,   0 }, { 125,-368 }, {   0,  15 }, {   0, 407 }, {  32,   0 },
 {   0,   0 }, { 125,-373 }, {   0,   0 }, {   0, 402 }, {  10,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 392 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  46,  11 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {  48,  68 }, {  49,  68 }, {  50,  68 }, {  51,  68 }, {  52,  68 },
 {  53,  68 }, {  54,  68 }, {  55,  68 }, {  56,  68 }, {  57,  68 },
 {  69,  32 }, { 125,  48 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  43,  71 }, {   0,   0 }, {  45,  71 }, {   0,  17 },
 {   0, 355 }, {  48,  82 }, {  49,  82 }, {  50,  82 }, {  51,  82 },
 {  52,  82 }, {  53,  82 }, {  54,  82 }, {  55,  82 }, {  56,  82 },
 {  57,  82 }, {  48,  96 }, {  49,  96 }, {  50,  96 }, {  51,  96 },
 {  52,  96 }, {  53,  96 }, {  54,  96 }, {  55,  96 }, {  56,  96 },
 {  57,  96 }, {   0,   0 }, { 101,  32 }, {   0,   0 }, {   0, 331 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,  96 }, {  66,  96 },
 {  67,  96 }, {  68,  96 }, {  69,  96 }, {  70,  96 }, {   0,  17 },
 {   0, 320 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0, 296 },
 {  97,  96 }, {  98,  96 }, {  99,  96 }, { 100,  96 }, { 101,  96 },
 { 102,  96 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, -47 },
 {   0,   0 }, {   0,   0 }, {  48,  11 }, {  49,  11 }, {  50,  11 },
 {  51,  11 }, {  52,  11 }, {  53,  11 }, {  54,  11 }, {  55,  11 },
 {  56,  11 }, {  57,  11 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0, 258 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 101, -47 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,  38 }, {  49,  38 }, {  50,  38 },
 {  51,  38 }, {  52,  38 }, {  53,  38 }, {  54,  38 }, {  55,  38 },
 {  56,  38 }, {  57,  38 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,  38 },
 {  66,  38 }, {  67,  38 }, {  68,  38 }, {  69,  38 }, {  70,  38 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  48,-149 }, {  49,-149 }, {  50,-149 }, {  51,-149 }, {  52,-149 },
 {  53,-149 }, {  54,-149 }, {  55,-149 }, {  56,-149 }, {  57,-149 },
 {   0,   0 }, {  97,  38 }, {  98,  38 }, {  99,  38 }, { 100,  38 },
 { 101,  38 }, { 102,  38 }, {  65,-149 }, {  66,-149 }, {  67,-149 },
 {  68,-149 }, {  69,-149 }, {  70,-149 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-149 },

 {  98,-149 }, {  99,-149 }, { 100,-149 }, { 101,-149 }, { 102,-149 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 257,  23 },
 {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[15] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],
    &yy_transition[1551],
    &yy_transition[1809],
    &yy_transition[2067],
    &yy_transition[2325],
    &yy_transition[2583],
    &yy_transition[2841],
    &yy_transition[3099],
    &yy_transition[3357],

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "creg/json_feature_map_lexer.ll"
#line 3 "creg/json_feature_map_lexer.ll"

#include "json_feature_map_lexer.h"
#include "fdict.h"
#include "fast_sparse_vector.h"

#define YY_DECL int json_fmap_yylex (void)
#undef YY_INPUT
#define YY_INPUT(buf, result, max_size) (result = jfmap_stream->read(buf, max_size).gcount())
#define YY_SKIP_YYWRAP 1
int yywrap() { return 1; }

JSONFeatureMapLexer::FeatureMapCallback json_fmap_callback = NULL;
void* json_fmap_callback_extra = NULL;
std::istream* jfmap_stream = NULL;
bool fl = true;
unsigned spos = 0;
char featname[16000];
#define MAX_FEATS 20000
std::pair<int, float> featmap[MAX_FEATS];
unsigned curfeat = 0;
std::string instid;

inline unsigned unicode_escape_to_utf8(uint16_t w1, uint16_t w2, char* putf8) {
  uint32_t cp;
  if((w1 & 0xfc00) == 0xd800) {
    if((w2 & 0xfc00) == 0xdc00) {
      cp = 0x10000 + (((static_cast<uint32_t>(w1) & 0x3ff) << 10) | (w2 & 0x3ff));
    } else {
      abort();
    }
  } else {
    cp = w1;
  }
  
  
  if(cp < 0x80) {
    putf8[0] = static_cast<char>(cp);
    return 1;
  } else if(cp < 0x0800) {
    putf8[0] = 0xc0 | ((cp >> 6) & 0x1f);
    putf8[1] = 0x80 | (cp & 0x3f);
    return 2;
  } else if(cp < 0x10000) {
    putf8[0] = 0xe0 | ((cp >> 6) & 0x0f);
    putf8[1] = 0x80 | ((cp >> 6) & 0x3f);
    putf8[2] = 0x80 | (cp & 0x3f);
    return 3;
  } else if(cp < 0x1fffff) {
    putf8[0] = 0xf0 | ((cp >> 18) & 0x07);
    putf8[1] = 0x80 | ((cp >> 12) & 0x3f);
    putf8[2] = 0x80 | ((cp >> 6) & 0x3f);
    putf8[3] = 0x80 | (cp & 0x3f);
    return 4;
  } else {
    abort();
  } 
  return 0;
}


#line 1540 "creg/json_feature_map_lexer.cc"

#define INITIAL 0
#define JSON 1
#define PREVAL 2
#define STRING 3
#define JSONVAL 4
#define POSTVAL 5
#define DOUBLE 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 74 "creg/json_feature_map_lexer.ll"


#line 1729 "creg/json_feature_map_lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start)];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "creg/json_feature_map_lexer.ll"
{ instid = yytext; BEGIN(JSON); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 78 "creg/json_feature_map_lexer.ll"
{ BEGIN(PREVAL); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 80 "creg/json_feature_map_lexer.ll"
{const SparseVector<float> x;
                                         json_fmap_callback(instid, x, json_fmap_callback_extra);
                                         curfeat = 0;
                                         BEGIN(INITIAL);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "creg/json_feature_map_lexer.ll"
{ BEGIN(STRING); spos=0; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "creg/json_feature_map_lexer.ll"
{ featname[spos] = 0;
                                           featmap[curfeat].first = FD::Convert(featname);
                                           BEGIN(JSONVAL);
                                         }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 91 "creg/json_feature_map_lexer.ll"
{ featname[spos++] = yytext[0]; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 92 "creg/json_feature_map_lexer.ll"
{ featname[spos++] = '"'; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "creg/json_feature_map_lexer.ll"
{ featname[spos++] = '\\'; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "creg/json_feature_map_lexer.ll"
{ featname[spos++] = '/'; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 95 "creg/json_feature_map_lexer.ll"
{ }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "creg/json_feature_map_lexer.ll"
{ }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 97 "creg/json_feature_map_lexer.ll"
{ }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "creg/json_feature_map_lexer.ll"
{ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 99 "creg/json_feature_map_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 100 "creg/json_feature_map_lexer.ll"
{ uint16_t hex = strtol(&yytext[2], NULL, 16);
                                           spos += unicode_escape_to_utf8(hex, 0, &featname[spos++])-1;
                                         }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 104 "creg/json_feature_map_lexer.ll"
{ BEGIN(DOUBLE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "creg/json_feature_map_lexer.ll"
{ featmap[curfeat++].second = strtod(yytext, 0);
                                           BEGIN(POSTVAL); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 108 "creg/json_feature_map_lexer.ll"
{ BEGIN(PREVAL); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 109 "creg/json_feature_map_lexer.ll"
{
                                           const SparseVector<float> x(&featmap[0], &featmap[curfeat]);
                                           json_fmap_callback(instid, x, json_fmap_callback_extra);
                                           curfeat = 0;
                                           BEGIN(INITIAL);
                                         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 116 "creg/json_feature_map_lexer.ll"
{ std::cerr << "bad input symbol where float value expected: " << yytext << std::endl;
                                           abort();
                                         }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "creg/json_feature_map_lexer.ll"
{ std::cerr << "bad input: " << yytext << std::endl; abort(); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "creg/json_feature_map_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1938 "creg/json_feature_map_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(JSON):
case YY_STATE_EOF(PREVAL):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(JSONVAL):
case YY_STATE_EOF(POSTVAL):
case YY_STATE_EOF(DOUBLE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start)];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 122 "creg/json_feature_map_lexer.ll"



void JSONFeatureMapLexer::ReadRules(std::istream* in, FeatureMapCallback func, void* extra) {
  json_fmap_callback = func;
  json_fmap_callback_extra = extra;
  jfmap_stream = in;
  json_fmap_yylex();
}

#if 0
void cb(const std::string& id, const SparseVector<float>& fmap, void* extra) {
  (void) extra;
  static int cc = 0;
  cc++;
}

int main() {
  JSONFeatureMapLexer::ReadRules(&std::cin, cb, NULL);
}
#endif

