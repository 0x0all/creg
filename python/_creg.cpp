/* Generated by Cython 0.15.1 on Mon Jul 16 13:42:32 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__python___creg
#define __PYX_HAVE_API__python___creg
#include <utility>
#include <vector>
#include <string>
#include "creg/fdict.h"
#include "creg/feature_map.h"
#include "creg/creg.cc"
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_creg.pyx",
  "linear.pxi",
  "logistic.pxi",
  "ordinal.pxi",
};

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args, CYTHON_UNUSED PyObject *kwds);

typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);

/*--- Type declarations ---*/
struct __pyx_obj_6python_5_creg_Weights;
struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights;
struct __pyx_obj_6python_5_creg_Dataset;
struct __pyx_obj_6python_5_creg_RealvaluedDataset;
struct __pyx_Generator_object;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__;
struct __pyx_obj_6python_5_creg_Model;
struct __pyx_obj_6python_5_creg_LinearRegression;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict;
struct __pyx_obj_6python_5_creg_OrdinalDataset;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__;
struct __pyx_obj_6python_5_creg_Intercept;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__;
struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__;
struct __pyx_obj_6python_5_creg_CategoricalDataset;
struct __pyx_obj_6python_5_creg_LinearRegressionWeights;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr;
struct __pyx_obj_6python_5_creg_LogisticRegression;
struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict;
struct __pyx_obj_6python_5_creg_OrdinalRegression;
struct __pyx_obj_6python_5_creg_Bias;

/* "python/_creg.pyx":97
 *         return (x, y)
 * 
 * cdef class Weights:             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return num_features()
 */
struct __pyx_obj_6python_5_creg_Weights {
  PyObject_HEAD
};


/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":25
 * 
 * 
 * cdef class OrdinalRegressionWeights(Weights):             # <<<<<<<<<<<<<<
 * 
 *     cdef OrdinalRegression model
 */
struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights {
  struct __pyx_obj_6python_5_creg_Weights __pyx_base;
  struct __pyx_obj_6python_5_creg_OrdinalRegression *model;
};


/* "python/_creg.pyx":27
 *     raise TypeError('Cannot convert %s to string.' % type(name))
 * 
 * cdef class Dataset:             # <<<<<<<<<<<<<<
 *     cdef vector[TrainingInstance]* instances
 *     cdef FeatureMapStorage* fms
 */
struct __pyx_obj_6python_5_creg_Dataset {
  PyObject_HEAD
  std::vector<TrainingInstance> *instances;
  FeatureMapStorage *fms;
  int categorical;
};


/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":1
 * cdef class RealvaluedDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, data):
 */
struct __pyx_obj_6python_5_creg_RealvaluedDataset {
  struct __pyx_obj_6python_5_creg_Dataset __pyx_base;
};


/* "python/_creg.pyx":72
 *                 (len(self), num_features())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(len(self)):
 */
struct __pyx_Generator_object {
  PyObject_HEAD
  __pyx_generator_body_t body;
  int is_running;
  int resume_label;
  PyObject *exc_type;
  PyObject *exc_value;
  PyObject *exc_traceback;
};


/* "python/_creg.pyx":105
 * 
 *     property df:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return sum(1 for _, w in self if w != 0)
 * 
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "python/_creg.pyx":112
 * 
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     cdef vector[double]* weight_vector
 * 
 */
struct __pyx_obj_6python_5_creg_Model {
  PyObject_HEAD
  std::vector<double> *weight_vector;
};


/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":32
 * 
 * 
 * cdef class LinearRegression(Model):             # <<<<<<<<<<<<<<
 * 
 *     cdef UnivariateSquaredLoss* loss
 */
struct __pyx_obj_6python_5_creg_LinearRegression {
  struct __pyx_obj_6python_5_creg_Model __pyx_base;
  UnivariateSquaredLoss *loss;
};


/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":65
 *             epsilon, delta, self.weight_vector)
 * 
 *     def predict(self, CategoricalDataset test):             # <<<<<<<<<<<<<<
 *         assert (self.loss != NULL)
 *         cdef unsigned y
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict {
  struct __pyx_Generator_object __pyx_base;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_test;
  unsigned int __pyx_v_y;
  size_t __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":3
 * from libc.math cimport log
 * 
 * cdef class OrdinalDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly set levels
 */
struct __pyx_obj_6python_5_creg_OrdinalDataset {
  struct __pyx_obj_6python_5_creg_Dataset __pyx_base;
  PyObject *levels;
};


/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":56
 *             epsilon, delta, self.weight_vector)
 * 
 *     def predict(self, RealvaluedDataset test):             # <<<<<<<<<<<<<<
 *         assert (self.loss != NULL)
 *         cdef unsigned i
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict {
  struct __pyx_Generator_object __pyx_base;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_test;
  size_t __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":36
 *         return num_features() + K - 2
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(self.model.data.levels)
 *         cdef unsigned k
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ {
  struct __pyx_Generator_object __pyx_base;
  unsigned int __pyx_v_K;
  unsigned int __pyx_v_f;
  PyObject *__pyx_v_fname;
  double __pyx_v_fval;
  unsigned int __pyx_v_k;
  PyObject *__pyx_v_self;
  unsigned int __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "python/_creg.pyx":10
 * BIAS = Bias()
 * 
 * cdef class Intercept:             # <<<<<<<<<<<<<<
 *     cdef unsigned level
 * 
 */
struct __pyx_obj_6python_5_creg_Intercept {
  PyObject_HEAD
  unsigned int level;
};


/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":18
 *         self.model = model
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield BIAS, self.model.weight_vector[0][0]
 *         cdef double fval
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ {
  struct __pyx_Generator_object __pyx_base;
  unsigned int __pyx_v_f;
  PyObject *__pyx_v_fname;
  double __pyx_v_fval;
  PyObject *__pyx_v_self;
  unsigned int __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "python/_creg.pyx":72
 *                 (len(self), num_features())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(len(self)):
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ {
  struct __pyx_Generator_object __pyx_base;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_self;
  Py_ssize_t __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":1
 * cdef class CategoricalDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly list labels
 */
struct __pyx_obj_6python_5_creg_CategoricalDataset {
  struct __pyx_obj_6python_5_creg_Dataset __pyx_base;
  PyObject *labels;
  PyObject *label_map;
};


/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":11
 * 
 * 
 * cdef class LinearRegressionWeights(Weights):             # <<<<<<<<<<<<<<
 * 
 *     cdef LinearRegression model
 */
struct __pyx_obj_6python_5_creg_LinearRegressionWeights {
  struct __pyx_obj_6python_5_creg_Weights __pyx_base;
  struct __pyx_obj_6python_5_creg_LinearRegression *model;
};


/* "python/_creg.pyx":106
 *     property df:
 *         def __get__(self):
 *             return sum(1 for _, w in self if w != 0)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr {
  struct __pyx_Generator_object __pyx_base;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *__pyx_outer_scope;
  PyObject *__pyx_v__;
  PyObject *__pyx_v_w;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":27
 * 
 * 
 * cdef class LogisticRegression(Model):             # <<<<<<<<<<<<<<
 * 
 *     cdef MulticlassLogLoss* loss
 */
struct __pyx_obj_6python_5_creg_LogisticRegression {
  struct __pyx_obj_6python_5_creg_Model __pyx_base;
  MulticlassLogLoss *loss;
  struct __pyx_obj_6python_5_creg_CategoricalDataset *data;
};


/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":85
 *             epsilon, delta, self.weight_vector)
 * 
 *     def predict(self, OrdinalDataset test):             # <<<<<<<<<<<<<<
 *         assert (self.loss != NULL)
 *         cdef unsigned i
 */
struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict {
  struct __pyx_Generator_object __pyx_base;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_test;
  size_t __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":55
 * 
 * 
 * cdef class OrdinalRegression(Model):             # <<<<<<<<<<<<<<
 * 
 *     cdef OrdinalLogLoss* loss
 */
struct __pyx_obj_6python_5_creg_OrdinalRegression {
  struct __pyx_obj_6python_5_creg_Model __pyx_base;
  OrdinalLogLoss *loss;
  struct __pyx_obj_6python_5_creg_OrdinalDataset *data;
};


/* "python/_creg.pyx":4
 * from cython.operator import preincrement as pinc
 * 
 * cdef class Bias:             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return '***BIAS***'
 */
struct __pyx_obj_6python_5_creg_Bias {
  PyObject_HEAD
};


#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE int __Pyx_NegateNonNeg(int b) { 
    return unlikely(b < 0) ? b : !b; 
}
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(d == Py_None)) {
        __Pyx_RaiseNoneIndexingError();
        return NULL;
    }
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred())
            PyErr_SetObject(PyExc_KeyError, key);
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

static PyTypeObject __pyx_binding_PyCFunctionType_type;
static PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

static int __pyx_binding_PyCFunctionType_init(void); /* proto */

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static int __Pyx_check_binary_version(void);

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'python._creg' */
static PyTypeObject *__pyx_ptype_6python_5_creg_Bias = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_Intercept = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_Dataset = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_Weights = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_Model = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_RealvaluedDataset = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_LinearRegressionWeights = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_LinearRegression = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_CategoricalDataset = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_LogisticRegression = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_OrdinalDataset = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_OrdinalRegressionWeights = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg_OrdinalRegression = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_Generator = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct____iter__ = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_1___get__ = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_2_genexpr = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_3___iter__ = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_4_predict = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_5_predict = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_6___iter__ = 0;
static PyTypeObject *__pyx_ptype_6python_5_creg___pyx_scope_struct_7_predict = 0;
static CYTHON_INLINE unsigned int __pyx_f_6python_5_creg_num_features(void); /*proto*/
static char *__pyx_f_6python_5_creg_as_str(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "python._creg"
int __pyx_module_is_main_python___creg = 0;

/* Implementation of 'python._creg' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_enumerate;
static char __pyx_k_1[] = "***BIAS***";
static char __pyx_k_2[] = "y>=%d";
static char __pyx_k_4[] = "Cannot convert %s to string.";
static char __pyx_k_5[] = "<Dataset: %d instances, %d features>";
static char __pyx_k_6[] = "training set index out of range";
static char __pyx_k_8[] = "python._creg";
static char __pyx_k_9[] = "<Weights: %d values, %d non-zero>";
static char __pyx_k__df[] = "df";
static char __pyx_k__l1[] = "l1";
static char __pyx_k__l2[] = "l2";
static char __pyx_k__key[] = "key";
static char __pyx_k__sum[] = "sum";
static char __pyx_k__BIAS[] = "BIAS";
static char __pyx_k__data[] = "data";
static char __pyx_k__utf8[] = "utf8";
static char __pyx_k__delta[] = "delta";
static char __pyx_k__heapq[] = "heapq";
static char __pyx_k__level[] = "level";
static char __pyx_k__model[] = "model";
static char __pyx_k__range[] = "range";
static char __pyx_k__super[] = "super";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__labels[] = "labels";
static char __pyx_k__epsilon[] = "epsilon";
static char __pyx_k__weights[] = "weights";
static char __pyx_k__KeyError[] = "KeyError";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__nlargest[] = "nlargest";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__enumerate[] = "enumerate";
static char __pyx_k__get_label[] = "get_label";
static char __pyx_k__iteritems[] = "iteritems";
static char __pyx_k__setdefault[] = "setdefault";
static char __pyx_k__categorical[] = "categorical";
static char __pyx_k__get_response[] = "get_response";
static char __pyx_k__num_features[] = "num_features";
static char __pyx_k__memory_buffers[] = "memory_buffers";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_n_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__BIAS;
static PyObject *__pyx_n_s__KeyError;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__categorical;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__delta;
static PyObject *__pyx_n_s__df;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__enumerate;
static PyObject *__pyx_n_s__epsilon;
static PyObject *__pyx_n_s__get_label;
static PyObject *__pyx_n_s__get_response;
static PyObject *__pyx_n_s__heapq;
static PyObject *__pyx_n_s__iteritems;
static PyObject *__pyx_n_s__key;
static PyObject *__pyx_n_s__l1;
static PyObject *__pyx_n_s__l2;
static PyObject *__pyx_n_s__labels;
static PyObject *__pyx_n_s__level;
static PyObject *__pyx_n_s__memory_buffers;
static PyObject *__pyx_n_s__model;
static PyObject *__pyx_n_s__nlargest;
static PyObject *__pyx_n_s__num_features;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__setdefault;
static PyObject *__pyx_n_s__sum;
static PyObject *__pyx_n_s__super;
static PyObject *__pyx_n_s__utf8;
static PyObject *__pyx_n_s__weights;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_7;

/* "python/_creg.pyx":5
 * 
 * cdef class Bias:
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '***BIAS***'
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_4Bias___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_4Bias___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__");

  /* "python/_creg.pyx":6
 * cdef class Bias:
 *     def __repr__(self):
 *         return '***BIAS***'             # <<<<<<<<<<<<<<
 * 
 * BIAS = Bias()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __pyx_r = ((PyObject *)__pyx_kp_s_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":13
 *     cdef unsigned level
 * 
 *     def __cinit__(self, level):             # <<<<<<<<<<<<<<
 *         self.level = level
 * 
 */

static int __pyx_pf_6python_5_creg_9Intercept___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6python_5_creg_9Intercept___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_level = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__level,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__level);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_level = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.Intercept.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "python/_creg.pyx":14
 * 
 *     def __cinit__(self, level):
 *         self.level = level             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_level); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_6python_5_creg_Intercept *)__pyx_v_self)->level = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.Intercept.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":16
 *         self.level = level
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'y>=%d' % self.level
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_9Intercept_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_9Intercept_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__");

  /* "python/_creg.pyx":17
 * 
 *     def __repr__(self):
 *         return 'y>=%d' % self.level             # <<<<<<<<<<<<<<
 * 
 * cdef char* as_str(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_6python_5_creg_Intercept *)__pyx_v_self)->level); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_2), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python._creg.Intercept.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":19
 *         return 'y>=%d' % self.level
 * 
 * cdef char* as_str(name):             # <<<<<<<<<<<<<<
 *     if isinstance(name, bytes):
 *         return name
 */

static char *__pyx_f_6python_5_creg_as_str(PyObject *__pyx_v_name) {
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_str");
  __Pyx_INCREF(__pyx_v_name);

  /* "python/_creg.pyx":20
 * 
 * cdef char* as_str(name):
 *     if isinstance(name, bytes):             # <<<<<<<<<<<<<<
 *         return name
 *     elif isinstance(name, unicode):
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyBytes_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_name, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "python/_creg.pyx":21
 * cdef char* as_str(name):
 *     if isinstance(name, bytes):
 *         return name             # <<<<<<<<<<<<<<
 *     elif isinstance(name, unicode):
 *         name = name.encode('utf8')
 */
    __pyx_t_3 = PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;
    goto __pyx_L3;
  }

  /* "python/_creg.pyx":22
 *     if isinstance(name, bytes):
 *         return name
 *     elif isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *         name = name.encode('utf8')
 *         return name
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyUnicode_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_name, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "python/_creg.pyx":23
 *         return name
 *     elif isinstance(name, unicode):
 *         name = name.encode('utf8')             # <<<<<<<<<<<<<<
 *         return name
 *     raise TypeError('Cannot convert %s to string.' % type(name))
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_name, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_name);
    __pyx_v_name = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "python/_creg.pyx":24
 *     elif isinstance(name, unicode):
 *         name = name.encode('utf8')
 *         return name             # <<<<<<<<<<<<<<
 *     raise TypeError('Cannot convert %s to string.' % type(name))
 * 
 */
    __pyx_t_3 = PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "python/_creg.pyx":25
 *         name = name.encode('utf8')
 *         return name
 *     raise TypeError('Cannot convert %s to string.' % type(name))             # <<<<<<<<<<<<<<
 * 
 * cdef class Dataset:
 */
  __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_4), ((PyObject *)Py_TYPE(__pyx_v_name))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("python._creg.as_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":32
 *     cdef bint categorical
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.instances = new vector[TrainingInstance]()
 *         self.fms = new FeatureMapStorage()
 */

static int __pyx_pf_6python_5_creg_7Dataset___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6python_5_creg_7Dataset___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "python/_creg.pyx":33
 * 
 *     def __cinit__(self):
 *         self.instances = new vector[TrainingInstance]()             # <<<<<<<<<<<<<<
 *         self.fms = new FeatureMapStorage()
 * 
 */
  ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->instances = new std::vector<TrainingInstance>();

  /* "python/_creg.pyx":34
 *     def __cinit__(self):
 *         self.instances = new vector[TrainingInstance]()
 *         self.fms = new FeatureMapStorage()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, data, categorical):
 */
  ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->fms = new FeatureMapStorage();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":36
 *         self.fms = new FeatureMapStorage()
 * 
 *     def __init__(self, data, categorical):             # <<<<<<<<<<<<<<
 *         self.categorical = categorical
 *         cdef TrainingInstance* instance
 */

static int __pyx_pf_6python_5_creg_7Dataset_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6python_5_creg_7Dataset_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_categorical = 0;
  TrainingInstance *__pyx_v_instance;
  std::pair<int,float> *__pyx_v_fpair;
  std::pair<int,float> *__pyx_v_front;
  std::pair<int,float> *__pyx_v_back;
  std::vector<std::pair<int,float> > *__pyx_v_featmap;
  PyObject *__pyx_v_features = NULL;
  PyObject *__pyx_v_response = NULL;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_v_fval = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  unsigned int __pyx_t_10;
  float __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,&__pyx_n_s__categorical,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__categorical);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_data = values[0];
    __pyx_v_categorical = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.Dataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "python/_creg.pyx":37
 * 
 *     def __init__(self, data, categorical):
 *         self.categorical = categorical             # <<<<<<<<<<<<<<
 *         cdef TrainingInstance* instance
 *         cdef pair[int, float] *fpair, *front, *back
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_categorical); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->categorical = __pyx_t_1;

  /* "python/_creg.pyx":41
 *         cdef pair[int, float] *fpair, *front, *back
 *         cdef vector[pair[int, float]]* featmap
 *         for features, response in data:             # <<<<<<<<<<<<<<
 *             instance = new TrainingInstance()
 *             if categorical:
 */
  if (PyList_CheckExact(__pyx_v_data) || PyTuple_CheckExact(__pyx_v_data)) {
    __pyx_t_2 = __pyx_v_data; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
    } else if (PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      if (likely(PyTuple_CheckExact(sequence))) {
        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_features);
    __pyx_v_features = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_v_response);
    __pyx_v_response = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "python/_creg.pyx":42
 *         cdef vector[pair[int, float]]* featmap
 *         for features, response in data:
 *             instance = new TrainingInstance()             # <<<<<<<<<<<<<<
 *             if categorical:
 *                 instance.y.label = self.get_label(response)
 */
    __pyx_v_instance = new TrainingInstance();

    /* "python/_creg.pyx":43
 *         for features, response in data:
 *             instance = new TrainingInstance()
 *             if categorical:             # <<<<<<<<<<<<<<
 *                 instance.y.label = self.get_label(response)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_categorical); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_1) {

      /* "python/_creg.pyx":44
 *             instance = new TrainingInstance()
 *             if categorical:
 *                 instance.y.label = self.get_label(response)             # <<<<<<<<<<<<<<
 *             else:
 *                 instance.y.value = response
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_label); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __Pyx_INCREF(__pyx_v_response);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_response);
      __Pyx_GIVEREF(__pyx_v_response);
      __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_6); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_instance->y.label = __pyx_t_10;
      goto __pyx_L10;
    }
    /*else*/ {

      /* "python/_creg.pyx":46
 *                 instance.y.label = self.get_label(response)
 *             else:
 *                 instance.y.value = response             # <<<<<<<<<<<<<<
 *             featmap = new vector[pair[int, float]]()
 *             for fname, fval in features.iteritems():
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_response); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_instance->y.value = __pyx_t_11;
    }
    __pyx_L10:;

    /* "python/_creg.pyx":47
 *             else:
 *                 instance.y.value = response
 *             featmap = new vector[pair[int, float]]()             # <<<<<<<<<<<<<<
 *             for fname, fval in features.iteritems():
 *                 fpair = new pair[int, float](Convert(as_str(fname)), fval)
 */
    __pyx_v_featmap = new std::vector<std::pair<int,float> >();

    /* "python/_creg.pyx":48
 *                 instance.y.value = response
 *             featmap = new vector[pair[int, float]]()
 *             for fname, fval in features.iteritems():             # <<<<<<<<<<<<<<
 *                 fpair = new pair[int, float](Convert(as_str(fname)), fval)
 *                 featmap.push_back(fpair[0])
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_features, __pyx_n_s__iteritems); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (PyList_CheckExact(__pyx_t_6)) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++;
      } else if (PyTuple_CheckExact(__pyx_t_6)) {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++;
      } else {
        __pyx_t_7 = __pyx_t_13(__pyx_t_6);
        if (unlikely(!__pyx_t_7)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        if (likely(PyTuple_CheckExact(sequence))) {
          if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
            if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
            else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
            if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
            else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_14); if (unlikely(!__pyx_t_5)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_8 = __pyx_t_9(__pyx_t_14); if (unlikely(!__pyx_t_8)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_14), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L14_unpacking_done;
        __pyx_L13_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
        if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L14_unpacking_done:;
      }
      __Pyx_XDECREF(__pyx_v_fname);
      __pyx_v_fname = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_v_fval);
      __pyx_v_fval = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "python/_creg.pyx":49
 *             featmap = new vector[pair[int, float]]()
 *             for fname, fval in features.iteritems():
 *                 fpair = new pair[int, float](Convert(as_str(fname)), fval)             # <<<<<<<<<<<<<<
 *                 featmap.push_back(fpair[0])
 *                 del fpair
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_fval); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_fpair = new std::pair<int,float>(FD::Convert(__pyx_f_6python_5_creg_as_str(__pyx_v_fname)), __pyx_t_11);

      /* "python/_creg.pyx":50
 *             for fname, fval in features.iteritems():
 *                 fpair = new pair[int, float](Convert(as_str(fname)), fval)
 *                 featmap.push_back(fpair[0])             # <<<<<<<<<<<<<<
 *                 del fpair
 *             front = &featmap.front()
 */
      __pyx_v_featmap->push_back((__pyx_v_fpair[0]));

      /* "python/_creg.pyx":51
 *                 fpair = new pair[int, float](Convert(as_str(fname)), fval)
 *                 featmap.push_back(fpair[0])
 *                 del fpair             # <<<<<<<<<<<<<<
 *             front = &featmap.front()
 *             back = &featmap.back()+1
 */
      delete __pyx_v_fpair;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "python/_creg.pyx":52
 *                 featmap.push_back(fpair[0])
 *                 del fpair
 *             front = &featmap.front()             # <<<<<<<<<<<<<<
 *             back = &featmap.back()+1
 *             instance.x = self.fms.AddFeatureMap(front, back)
 */
    __pyx_v_front = (&__pyx_v_featmap->front());

    /* "python/_creg.pyx":53
 *                 del fpair
 *             front = &featmap.front()
 *             back = &featmap.back()+1             # <<<<<<<<<<<<<<
 *             instance.x = self.fms.AddFeatureMap(front, back)
 *             del featmap
 */
    __pyx_v_back = ((&__pyx_v_featmap->back()) + 1);

    /* "python/_creg.pyx":54
 *             front = &featmap.front()
 *             back = &featmap.back()+1
 *             instance.x = self.fms.AddFeatureMap(front, back)             # <<<<<<<<<<<<<<
 *             del featmap
 *             self.instances.push_back(instance[0])
 */
    __pyx_v_instance->x = ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->fms->AddFeatureMap(__pyx_v_front, __pyx_v_back);

    /* "python/_creg.pyx":55
 *             back = &featmap.back()+1
 *             instance.x = self.fms.AddFeatureMap(front, back)
 *             del featmap             # <<<<<<<<<<<<<<
 *             self.instances.push_back(instance[0])
 *             del instance
 */
    delete __pyx_v_featmap;

    /* "python/_creg.pyx":56
 *             instance.x = self.fms.AddFeatureMap(front, back)
 *             del featmap
 *             self.instances.push_back(instance[0])             # <<<<<<<<<<<<<<
 *             del instance
 *         Freeze()
 */
    ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->instances->push_back((__pyx_v_instance[0]));

    /* "python/_creg.pyx":57
 *             del featmap
 *             self.instances.push_back(instance[0])
 *             del instance             # <<<<<<<<<<<<<<
 *         Freeze()
 * 
 */
    delete __pyx_v_instance;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "python/_creg.pyx":58
 *             self.instances.push_back(instance[0])
 *             del instance
 *         Freeze()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  FD::Freeze();

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("python._creg.Dataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_XDECREF(__pyx_v_response);
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XDECREF(__pyx_v_fval);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":60
 *         Freeze()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.instances
 *         del self.fms
 */

static void __pyx_pf_6python_5_creg_7Dataset_2__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6python_5_creg_7Dataset_2__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "python/_creg.pyx":61
 * 
 *     def __dealloc__(self):
 *         del self.instances             # <<<<<<<<<<<<<<
 *         del self.fms
 * 
 */
  delete ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->instances;

  /* "python/_creg.pyx":62
 *     def __dealloc__(self):
 *         del self.instances
 *         del self.fms             # <<<<<<<<<<<<<<
 * 
 *     property num_features:
 */
  delete ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->fms;

  __Pyx_RefNannyFinishContext();
}

/* "python/_creg.pyx":65
 * 
 *     property num_features:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return num_features()
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_7Dataset_12num_features___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Dataset_12num_features___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "python/_creg.pyx":66
 *     property num_features:
 *         def __get__(self):
 *             return num_features()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_f_6python_5_creg_num_features()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.Dataset.num_features.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":68
 *             return num_features()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<Dataset: %d instances, %d features>' %\
 *                 (len(self), num_features())
 */

static PyObject *__pyx_pf_6python_5_creg_7Dataset_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Dataset_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__");

  /* "python/_creg.pyx":69
 * 
 *     def __repr__(self):
 *         return '<Dataset: %d instances, %d features>' %\             # <<<<<<<<<<<<<<
 *                 (len(self), num_features())
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "python/_creg.pyx":70
 *     def __repr__(self):
 *         return '<Dataset: %d instances, %d features>' %\
 *                 (len(self), num_features())             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_f_6python_5_creg_num_features()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_5), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python._creg.Dataset.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_7Dataset_5generator(struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "python/_creg.pyx":72
 *                 (len(self), num_features())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(len(self)):
 */

static PyObject *__pyx_pf_6python_5_creg_7Dataset_4__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Dataset_4__iter__(PyObject *__pyx_v_self) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *)__pyx_ptype_6python_5_creg___pyx_scope_struct____iter__->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_7Dataset_5generator;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_7Dataset_5generator(struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "python/_creg.pyx":74
 *     def __iter__(self):
 *         cdef unsigned i
 *         for i in range(len(self)):             # <<<<<<<<<<<<<<
 *             yield self[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_cur_scope->__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "python/_creg.pyx":75
 *         cdef unsigned i
 *         for i in range(len(self)):
 *             yield self[i]             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_i, sizeof(unsigned int)+1, PyLong_FromUnsignedLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "python/_creg.pyx":77
 *             yield self[i]
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.instances.size()
 * 
 */

static Py_ssize_t __pyx_pf_6python_5_creg_7Dataset_6__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_6python_5_creg_7Dataset_6__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__");

  /* "python/_creg.pyx":78
 * 
 *     def __len__(self):
 *         return self.instances.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int i):
 */
  __pyx_r = ((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->instances->size();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":80
 *         return self.instances.size()
 * 
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < len(self):
 *             raise KeyError('training set index out of range')
 */

static PyObject *__pyx_pf_6python_5_creg_7Dataset_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Dataset_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  TrainingInstance *__pyx_v_instance;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_x = NULL;
  const std::pair<int,float> *__pyx_v_xptr;
  int __pyx_v_f;
  float __pyx_v_fval;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_AsInt(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.Dataset.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "python/_creg.pyx":81
 * 
 *     def __getitem__(self, int i):
 *         if not 0 <= i < len(self):             # <<<<<<<<<<<<<<
 *             raise KeyError('training set index out of range')
 *         cdef TrainingInstance* instance = &self.instances[0][i]
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_2 = PyObject_Length(__pyx_v_self); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (__pyx_v_i < __pyx_t_2);
  }
  __pyx_t_3 = (!__pyx_t_1);
  if (__pyx_t_3) {

    /* "python/_creg.pyx":82
 *     def __getitem__(self, int i):
 *         if not 0 <= i < len(self):
 *             raise KeyError('training set index out of range')             # <<<<<<<<<<<<<<
 *         cdef TrainingInstance* instance = &self.instances[0][i]
 *         y = self.get_response(instance.y.label) if self.categorical else instance.y.value
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_KeyError, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "python/_creg.pyx":83
 *         if not 0 <= i < len(self):
 *             raise KeyError('training set index out of range')
 *         cdef TrainingInstance* instance = &self.instances[0][i]             # <<<<<<<<<<<<<<
 *         y = self.get_response(instance.y.label) if self.categorical else instance.y.value
 *         x = {}
 */
  __pyx_v_instance = (&((((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->instances[0])[__pyx_v_i]));

  /* "python/_creg.pyx":84
 *             raise KeyError('training set index out of range')
 *         cdef TrainingInstance* instance = &self.instances[0][i]
 *         y = self.get_response(instance.y.label) if self.categorical else instance.y.value             # <<<<<<<<<<<<<<
 *         x = {}
 *         cdef const_pair_int_float* xptr = instance.x.begin()
 */
  if (((struct __pyx_obj_6python_5_creg_Dataset *)__pyx_v_self)->categorical) {
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_response); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyLong_FromUnsignedLong(__pyx_v_instance->y.label); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __pyx_t_4 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_instance->y.value); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_v_y = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "python/_creg.pyx":85
 *         cdef TrainingInstance* instance = &self.instances[0][i]
 *         y = self.get_response(instance.y.label) if self.categorical else instance.y.value
 *         x = {}             # <<<<<<<<<<<<<<
 *         cdef const_pair_int_float* xptr = instance.x.begin()
 *         cdef int f
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_v_x = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "python/_creg.pyx":86
 *         y = self.get_response(instance.y.label) if self.categorical else instance.y.value
 *         x = {}
 *         cdef const_pair_int_float* xptr = instance.x.begin()             # <<<<<<<<<<<<<<
 *         cdef int f
 *         cdef float fval
 */
  __pyx_v_xptr = __pyx_v_instance->x.begin();

  /* "python/_creg.pyx":89
 *         cdef int f
 *         cdef float fval
 *         while xptr != instance.x.end():             # <<<<<<<<<<<<<<
 *             f = xptr[0].first
 *             fval = xptr[0].second
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_xptr != __pyx_v_instance->x.end());
    if (!__pyx_t_3) break;

    /* "python/_creg.pyx":90
 *         cdef float fval
 *         while xptr != instance.x.end():
 *             f = xptr[0].first             # <<<<<<<<<<<<<<
 *             fval = xptr[0].second
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 */
    __pyx_v_f = (__pyx_v_xptr[0]).first;

    /* "python/_creg.pyx":91
 *         while xptr != instance.x.end():
 *             f = xptr[0].first
 *             fval = xptr[0].second             # <<<<<<<<<<<<<<
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             x[fname] = fval
 */
    __pyx_v_fval = (__pyx_v_xptr[0]).second;

    /* "python/_creg.pyx":92
 *             f = xptr[0].first
 *             fval = xptr[0].second
 *             fname = unicode(Convert(f).c_str(), 'utf8')             # <<<<<<<<<<<<<<
 *             x[fname] = fval
 *             pinc(xptr)
 */
    __pyx_t_4 = PyBytes_FromString(FD::Convert(__pyx_v_f).c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__utf8));
    PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_n_s__utf8));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__utf8));
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)(&PyUnicode_Type))), ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_XDECREF(((PyObject *)__pyx_v_fname));
    __pyx_v_fname = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "python/_creg.pyx":93
 *             fval = xptr[0].second
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             x[fname] = fval             # <<<<<<<<<<<<<<
 *             pinc(xptr)
 *         return (x, y)
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_fval); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_fname), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "python/_creg.pyx":94
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             x[fname] = fval
 *             pinc(xptr)             # <<<<<<<<<<<<<<
 *         return (x, y)
 * 
 */
    (++__pyx_v_xptr);
  }

  /* "python/_creg.pyx":95
 *             x[fname] = fval
 *             pinc(xptr)
 *         return (x, y)             # <<<<<<<<<<<<<<
 * 
 * cdef class Weights:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_v_x));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_x));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
  __Pyx_INCREF(__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("python._creg.Dataset.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":98
 * 
 * cdef class Weights:
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return num_features()
 * 
 */

static Py_ssize_t __pyx_pf_6python_5_creg_7Weights___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_6python_5_creg_7Weights___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__");

  /* "python/_creg.pyx":99
 * cdef class Weights:
 *     def __len__(self):
 *         return num_features()             # <<<<<<<<<<<<<<
 * 
 *     def top(self, k):
 */
  __pyx_r = __pyx_f_6python_5_creg_num_features();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":102
 * 
 *     def top(self, k):
 *         return heapq.nlargest(k, self, key=lambda kv: abs(kv[1]))             # <<<<<<<<<<<<<<
 * 
 *     property df:
 */

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_kv); /*proto*/
static PyMethodDef __pyx_lambda_methdef_lambda1 = {__Pyx_NAMESTR("lambda1"), (PyCFunction)__pyx_lambda_funcdef_lambda1, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_kv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1");
  __pyx_self = __pyx_self;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_kv, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python._creg.top.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":101
 *         return num_features()
 * 
 *     def top(self, k):             # <<<<<<<<<<<<<<
 *         return heapq.nlargest(k, self, key=lambda kv: abs(kv[1]))
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_7Weights_1top(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Weights_1top(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("top");

  /* "python/_creg.pyx":102
 * 
 *     def top(self, k):
 *         return heapq.nlargest(k, self, key=lambda kv: abs(kv[1]))             # <<<<<<<<<<<<<<
 * 
 *     property df:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__heapq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__nlargest); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_k);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_k);
  __Pyx_GIVEREF(__pyx_v_k);
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_lambda_methdef_lambda1, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__key), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyEval_CallObjectWithKeywords(__pyx_t_2, ((PyObject *)__pyx_t_1), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python._creg.Weights.top", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_7Weights_2df_7__get___1generator6(struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "python/_creg.pyx":106
 *     property df:
 *         def __get__(self):
 *             return sum(1 for _, w in self if w != 0)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

static PyObject *__pyx_pf_6python_5_creg_7Weights_2df_7__get___genexpr(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Weights_2df_7__get___genexpr(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *)__pyx_ptype_6python_5_creg___pyx_scope_struct_2_genexpr->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)__pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_self = __pyx_self;
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_7Weights_2df_7__get___1generator6;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_7Weights_2df_7__get___1generator6(struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }if (PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      if (likely(PyTuple_CheckExact(sequence))) {
        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_XDECREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v__ = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
    __Pyx_XDECREF(__pyx_cur_scope->__pyx_v_w);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_w = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_w, __pyx_int_0, Py_NE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_9) {
      __Pyx_INCREF(__pyx_int_1);
      __pyx_r = __pyx_int_1;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_cur_scope->__pyx_base.resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "python/_creg.pyx":105
 * 
 *     property df:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return sum(1 for _, w in self if w != 0)
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_7Weights_2df___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Weights_2df___get__(PyObject *__pyx_v_self) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)__pyx_ptype_6python_5_creg___pyx_scope_struct_1___get__->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_1___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "python/_creg.pyx":106
 *     property df:
 *         def __get__(self):
 *             return sum(1 for _, w in self if w != 0)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_6python_5_creg_7Weights_2df_7__get___genexpr(((PyObject*)__pyx_cur_scope), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_sum, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python._creg.Weights.df.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":108
 *             return sum(1 for _, w in self if w != 0)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<Weights: %d values, %d non-zero>' % (len(self), self.df)
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_7Weights_2__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_7Weights_2__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__");

  /* "python/_creg.pyx":109
 * 
 *     def __repr__(self):
 *         return '<Weights: %d values, %d non-zero>' % (len(self), self.df)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Length(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__df); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_9), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("python._creg.Weights.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":115
 *     cdef vector[double]* weight_vector
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.weight_vector = new vector[double]()
 * 
 */

static int __pyx_pf_6python_5_creg_5Model___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6python_5_creg_5Model___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "python/_creg.pyx":116
 * 
 *     def __cinit__(self):
 *         self.weight_vector = new vector[double]()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_6python_5_creg_Model *)__pyx_v_self)->weight_vector = new std::vector<double>();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pyx":118
 *         self.weight_vector = new vector[double]()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.weight_vector
 * 
 */

static void __pyx_pf_6python_5_creg_5Model_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6python_5_creg_5Model_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "python/_creg.pyx":119
 * 
 *     def __dealloc__(self):
 *         del self.weight_vector             # <<<<<<<<<<<<<<
 * 
 * include "linear.pxi"
 */
  delete ((struct __pyx_obj_6python_5_creg_Model *)__pyx_v_self)->weight_vector;

  __Pyx_RefNannyFinishContext();
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":3
 * cdef class RealvaluedDataset(Dataset):
 * 
 *     def __init__(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Dataset with real-valued response
 */

static int __pyx_pf_6python_5_creg_17RealvaluedDataset___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6python_5_creg_17RealvaluedDataset___init__[] = "\n        Dataset with real-valued response\n        data: iterator of (dict, float) pairs\n        ";
struct wrapperbase __pyx_wrapperbase_6python_5_creg_17RealvaluedDataset___init__;
static int __pyx_pf_6python_5_creg_17RealvaluedDataset___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.RealvaluedDataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":8
 *         data: iterator of (dict, float) pairs
 *         """
 *         super(RealvaluedDataset, self).__init__(data, False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_RealvaluedDataset)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_RealvaluedDataset)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_RealvaluedDataset)));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_super, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s____init__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python._creg.RealvaluedDataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":15
 *     cdef LinearRegression model
 * 
 *     def __cinit__(self, LinearRegression model):             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */

static int __pyx_pf_6python_5_creg_23LinearRegressionWeights___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6python_5_creg_23LinearRegressionWeights___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6python_5_creg_LinearRegression *__pyx_v_model = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__model,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_model = ((struct __pyx_obj_6python_5_creg_LinearRegression *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.LinearRegressionWeights.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_model), __pyx_ptype_6python_5_creg_LinearRegression, 1, "model", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":16
 * 
 *     def __cinit__(self, LinearRegression model):
 *         self.model = model             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_model));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)__pyx_v_self)->model);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)__pyx_v_self)->model));
  ((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)__pyx_v_self)->model = __pyx_v_model;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.LinearRegressionWeights.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_23LinearRegressionWeights_2generator1(struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":18
 *         self.model = model
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         yield BIAS, self.model.weight_vector[0][0]
 *         cdef double fval
 */

static PyObject *__pyx_pf_6python_5_creg_23LinearRegressionWeights_1__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_23LinearRegressionWeights_1__iter__(PyObject *__pyx_v_self) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *)__pyx_ptype_6python_5_creg___pyx_scope_struct_3___iter__->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_3___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_23LinearRegressionWeights_2generator1;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_23LinearRegressionWeights_2generator1(struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  unsigned int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":19
 * 
 *     def __iter__(self):
 *         yield BIAS, self.model.weight_vector[0][0]             # <<<<<<<<<<<<<<
 *         cdef double fval
 *         cdef unsigned f
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__BIAS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(((((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)__pyx_cur_scope->__pyx_v_self)->model->__pyx_base.weight_vector[0])[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  /* return from generator, yielding value */
  __pyx_cur_scope->__pyx_base.resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":22
 *         cdef double fval
 *         cdef unsigned f
 *         for f in range(1, num_features()):             # <<<<<<<<<<<<<<
 *             fval = self.model.weight_vector[0][1+f]
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 */
  __pyx_t_4 = __pyx_f_6python_5_creg_num_features();
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_f = __pyx_t_5;

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":23
 *         cdef unsigned f
 *         for f in range(1, num_features()):
 *             fval = self.model.weight_vector[0][1+f]             # <<<<<<<<<<<<<<
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             yield fname, fval
 */
    __pyx_cur_scope->__pyx_v_fval = ((((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)__pyx_cur_scope->__pyx_v_self)->model->__pyx_base.weight_vector[0])[(1 + __pyx_cur_scope->__pyx_v_f)]);

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":24
 *         for f in range(1, num_features()):
 *             fval = self.model.weight_vector[0][1+f]
 *             fname = unicode(Convert(f).c_str(), 'utf8')             # <<<<<<<<<<<<<<
 *             yield fname, fval
 * 
 */
    __pyx_t_3 = PyBytes_FromString(FD::Convert(__pyx_cur_scope->__pyx_v_f).c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__utf8));
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__utf8));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__utf8));
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyUnicode_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    __Pyx_XDECREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_fname = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":25
 *             fval = self.model.weight_vector[0][1+f]
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             yield fname, fval             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, fname):
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_fval); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_r = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 2;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":27
 *             yield fname, fval
 * 
 *     def __getitem__(self, fname):             # <<<<<<<<<<<<<<
 *         cdef unsigned u = (0 if fname == BIAS else 1+Convert(<char*> fname))
 *         return self.model.weight_vector[0][u]
 */

static PyObject *__pyx_pf_6python_5_creg_23LinearRegressionWeights_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_23LinearRegressionWeights_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  unsigned int __pyx_v_u;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":28
 * 
 *     def __getitem__(self, fname):
 *         cdef unsigned u = (0 if fname == BIAS else 1+Convert(<char*> fname))             # <<<<<<<<<<<<<<
 *         return self.model.weight_vector[0][u]
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__BIAS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_fname, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
    __pyx_t_1 = 0;
  } else {
    __pyx_t_5 = PyBytes_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (1 + FD::Convert(((char *)__pyx_t_5)));
  }
  __pyx_v_u = __pyx_t_1;

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":29
 *     def __getitem__(self, fname):
 *         cdef unsigned u = (0 if fname == BIAS else 1+Convert(<char*> fname))
 *         return self.model.weight_vector[0][u]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(((((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)__pyx_v_self)->model->__pyx_base.weight_vector[0])[__pyx_v_u])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python._creg.LinearRegressionWeights.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":36
 *     cdef UnivariateSquaredLoss* loss
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.loss != NULL:
 *             del self.loss
 */

static void __pyx_pf_6python_5_creg_16LinearRegression___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6python_5_creg_16LinearRegression___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":37
 * 
 *     def __dealloc__(self):
 *         if self.loss != NULL:             # <<<<<<<<<<<<<<
 *             del self.loss
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss != NULL);
  if (__pyx_t_1) {

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":38
 *     def __dealloc__(self):
 *         if self.loss != NULL:
 *             del self.loss             # <<<<<<<<<<<<<<
 * 
 *     property weights:
 */
    delete ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":41
 * 
 *     property weights:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert (self.weight_vector.size() > 0)
 *             return LinearRegressionWeights(self)
 */

static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_7weights___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_7weights___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":42
 *     property weights:
 *         def __get__(self):
 *             assert (self.weight_vector.size() > 0)             # <<<<<<<<<<<<<<
 *             return LinearRegressionWeights(self)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->__pyx_base.weight_vector->size() > 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":43
 *         def __get__(self):
 *             assert (self.weight_vector.size() > 0)
 *             return LinearRegressionWeights(self)             # <<<<<<<<<<<<<<
 * 
 *     def fit(self, RealvaluedDataset data,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_LinearRegressionWeights)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python._creg.LinearRegression.weights.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":45
 *             return LinearRegressionWeights(self)
 * 
 *     def fit(self, RealvaluedDataset data,             # <<<<<<<<<<<<<<
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):
 */

static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_1fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_1fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6python_5_creg_RealvaluedDataset *__pyx_v_data = 0;
  double __pyx_v_l1;
  double __pyx_v_l2;
  unsigned int __pyx_v_memory_buffers;
  double __pyx_v_epsilon;
  double __pyx_v_delta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,&__pyx_n_s__l1,&__pyx_n_s__l2,&__pyx_n_s__memory_buffers,&__pyx_n_s__epsilon,&__pyx_n_s__delta,0};
  __Pyx_RefNannySetupContext("fit");
  {
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__l1);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__l2);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__memory_buffers);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__epsilon);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delta);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "fit") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = ((struct __pyx_obj_6python_5_creg_RealvaluedDataset *)values[0]);
    if (values[1]) {
      __pyx_v_l1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_l1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":46
 * 
 *     def fit(self, RealvaluedDataset data,
 *             double l1=0, double l2=0, unsigned memory_buffers=40,             # <<<<<<<<<<<<<<
 *             double epsilon=1e-4, double delta=0):
 *         if self.loss == NULL:
 */
      __pyx_v_l1 = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_l2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_l2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_l2 = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_memory_buffers = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_memory_buffers == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_memory_buffers = ((unsigned int)40);
    }
    if (values[4]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":47
 *     def fit(self, RealvaluedDataset data,
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):             # <<<<<<<<<<<<<<
 *         if self.loss == NULL:
 *             self.weight_vector.resize(1 + num_features(), 0.0)
 */
      __pyx_v_epsilon = ((double)1e-4);
    }
    if (values[5]) {
      __pyx_v_delta = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_delta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_delta = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.LinearRegression.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_6python_5_creg_RealvaluedDataset, 1, "data", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":48
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):
 *         if self.loss == NULL:             # <<<<<<<<<<<<<<
 *             self.weight_vector.resize(1 + num_features(), 0.0)
 *         else:
 */
  __pyx_t_1 = (((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss == NULL);
  if (__pyx_t_1) {

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":49
 *             double epsilon=1e-4, double delta=0):
 *         if self.loss == NULL:
 *             self.weight_vector.resize(1 + num_features(), 0.0)             # <<<<<<<<<<<<<<
 *         else:
 *             del self.loss
 */
    ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->__pyx_base.weight_vector->resize((1 + __pyx_f_6python_5_creg_num_features()), 0.0);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":51
 *             self.weight_vector.resize(1 + num_features(), 0.0)
 *         else:
 *             del self.loss             # <<<<<<<<<<<<<<
 *         self.loss = new UnivariateSquaredLoss(data.instances[0], num_features(), l2)
 *         LearnParameters(self.loss[0], l1, 1, memory_buffers,
 */
    delete ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss;
  }
  __pyx_L6:;

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":52
 *         else:
 *             del self.loss
 *         self.loss = new UnivariateSquaredLoss(data.instances[0], num_features(), l2)             # <<<<<<<<<<<<<<
 *         LearnParameters(self.loss[0], l1, 1, memory_buffers,
 *             epsilon, delta, self.weight_vector)
 */
  ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss = new UnivariateSquaredLoss((__pyx_v_data->__pyx_base.instances[0]), __pyx_f_6python_5_creg_num_features(), __pyx_v_l2);

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":54
 *         self.loss = new UnivariateSquaredLoss(data.instances[0], num_features(), l2)
 *         LearnParameters(self.loss[0], l1, 1, memory_buffers,
 *             epsilon, delta, self.weight_vector)             # <<<<<<<<<<<<<<
 * 
 *     def predict(self, RealvaluedDataset test):
 */
  LearnParameters((((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss[0]), __pyx_v_l1, 1, __pyx_v_memory_buffers, __pyx_v_epsilon, __pyx_v_delta, ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->__pyx_base.weight_vector);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.LinearRegression.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_16LinearRegression_3generator2(struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":56
 *             epsilon, delta, self.weight_vector)
 * 
 *     def predict(self, RealvaluedDataset test):             # <<<<<<<<<<<<<<
 *         assert (self.loss != NULL)
 *         cdef unsigned i
 */

static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_2predict(PyObject *__pyx_v_self, PyObject *__pyx_v_test); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_2predict(PyObject *__pyx_v_self, PyObject *__pyx_v_test) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("predict");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *)__pyx_ptype_6python_5_creg___pyx_scope_struct_4_predict->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_4_predict, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_v_test);
  __pyx_cur_scope->__pyx_v_test = __pyx_v_test;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_test);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_cur_scope->__pyx_v_test), __pyx_ptype_6python_5_creg_RealvaluedDataset, 1, "test", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_16LinearRegression_3generator2;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.LinearRegression.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_16LinearRegression_3generator2(struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":57
 * 
 *     def predict(self, RealvaluedDataset test):
 *         assert (self.loss != NULL)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(test.instances.size()):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_cur_scope->__pyx_v_self)->loss != NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":59
 *         assert (self.loss != NULL)
 *         cdef unsigned i
 *         for i in range(test.instances.size()):             # <<<<<<<<<<<<<<
 *             yield self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_6python_5_creg_RealvaluedDataset *)__pyx_cur_scope->__pyx_v_test)->__pyx_base.instances->size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":60
 *         cdef unsigned i
 *         for i in range(test.instances.size()):
 *             yield self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, RealvaluedDataset data):
 */
    __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_cur_scope->__pyx_v_self)->loss->Predict(((((struct __pyx_obj_6python_5_creg_RealvaluedDataset *)__pyx_cur_scope->__pyx_v_test)->__pyx_base.instances[0])[__pyx_cur_scope->__pyx_v_i]).x, (((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_cur_scope->__pyx_v_self)->__pyx_base.weight_vector[0]))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":62
 *             yield self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])
 * 
 *     def evaluate(self, RealvaluedDataset data):             # <<<<<<<<<<<<<<
 *         """ Returns RMSE of the predictions for the dataset"""
 *         assert (self.loss != NULL)
 */

static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_4evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_6python_5_creg_16LinearRegression_4evaluate[] = " Returns RMSE of the predictions for the dataset";
static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_4evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_6python_5_creg_RealvaluedDataset, 1, "data", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":64
 *     def evaluate(self, RealvaluedDataset data):
 *         """ Returns RMSE of the predictions for the dataset"""
 *         assert (self.loss != NULL)             # <<<<<<<<<<<<<<
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss != NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":65
 *         """ Returns RMSE of the predictions for the dataset"""
 *         assert (self.loss != NULL)
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])             # <<<<<<<<<<<<<<
 * 
 *     def _load(self, unsigned num_features, weights):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss->Evaluate((((struct __pyx_obj_6python_5_creg_RealvaluedDataset *)__pyx_v_data)->__pyx_base.instances[0]), (((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->__pyx_base.weight_vector[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.LinearRegression.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/linear.pxi":67
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])
 * 
 *     def _load(self, unsigned num_features, weights):             # <<<<<<<<<<<<<<
 *         assert (self.loss == NULL)
 *         # Initialize weights
 */

static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_5_load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_16LinearRegression_5_load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_num_features;
  PyObject *__pyx_v_weights = 0;
  unsigned int __pyx_v_u;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_v_fval = NULL;
  std::vector<TrainingInstance> __pyx_v_instances;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  long __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__num_features,&__pyx_n_s__weights,0};
  __Pyx_RefNannySetupContext("_load");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num_features);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weights);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_load") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_num_features = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_num_features == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_weights = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.LinearRegression._load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":68
 * 
 *     def _load(self, unsigned num_features, weights):
 *         assert (self.loss == NULL)             # <<<<<<<<<<<<<<
 *         # Initialize weights
 *         self.weight_vector.resize(1 + num_features, 0.0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss == NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":70
 *         assert (self.loss == NULL)
 *         # Initialize weights
 *         self.weight_vector.resize(1 + num_features, 0.0)             # <<<<<<<<<<<<<<
 *         cdef unsigned u
 *         for fname, fval in weights.iteritems():
 */
  ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->__pyx_base.weight_vector->resize((1 + __pyx_v_num_features), 0.0);

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":72
 *         self.weight_vector.resize(1 + num_features, 0.0)
 *         cdef unsigned u
 *         for fname, fval in weights.iteritems():             # <<<<<<<<<<<<<<
 *             u = (0 if fname == BIAS else 1+Convert(as_str(fname)))
 *             self.weight_vector[0][u] = fval
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_weights, __pyx_n_s__iteritems); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++;
    } else if (PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++;
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      if (likely(PyTuple_CheckExact(sequence))) {
        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_fname);
    __pyx_v_fname = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_v_fval);
    __pyx_v_fval = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":73
 *         cdef unsigned u
 *         for fname, fval in weights.iteritems():
 *             u = (0 if fname == BIAS else 1+Convert(as_str(fname)))             # <<<<<<<<<<<<<<
 *             self.weight_vector[0][u] = fval
 *         Freeze()
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__BIAS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_fname, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_10) {
      __pyx_t_9 = 0;
    } else {
      __pyx_t_9 = (1 + FD::Convert(__pyx_f_6python_5_creg_as_str(__pyx_v_fname)));
    }
    __pyx_v_u = __pyx_t_9;

    /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":74
 *         for fname, fval in weights.iteritems():
 *             u = (0 if fname == BIAS else 1+Convert(as_str(fname)))
 *             self.weight_vector[0][u] = fval             # <<<<<<<<<<<<<<
 *         Freeze()
 *         cdef vector[TrainingInstance] instances
 */
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_fval); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->__pyx_base.weight_vector[0])[__pyx_v_u]) = __pyx_t_11;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":75
 *             u = (0 if fname == BIAS else 1+Convert(as_str(fname)))
 *             self.weight_vector[0][u] = fval
 *         Freeze()             # <<<<<<<<<<<<<<
 *         cdef vector[TrainingInstance] instances
 *         self.loss = new UnivariateSquaredLoss(instances, num_features, 0)
 */
  FD::Freeze();

  /* "/Users/vchahun/Sandbox/creg/python/linear.pxi":77
 *         Freeze()
 *         cdef vector[TrainingInstance] instances
 *         self.loss = new UnivariateSquaredLoss(instances, num_features, 0)             # <<<<<<<<<<<<<<
 */
  ((struct __pyx_obj_6python_5_creg_LinearRegression *)__pyx_v_self)->loss = new UnivariateSquaredLoss(__pyx_v_instances, __pyx_v_num_features, 0.0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("python._creg.LinearRegression._load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XDECREF(__pyx_v_fval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":6
 *     cdef readonly dict label_map
 * 
 *     def __init__(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Dataset with categorical response
 */

static int __pyx_pf_6python_5_creg_18CategoricalDataset___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6python_5_creg_18CategoricalDataset___init__[] = "\n        Dataset with categorical response\n        data: iterator of (dict, *) pairs\n        ";
struct wrapperbase __pyx_wrapperbase_6python_5_creg_18CategoricalDataset___init__;
static int __pyx_pf_6python_5_creg_18CategoricalDataset___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.CategoricalDataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":11
 *         data: iterator of (dict, *) pairs
 *         """
 *         self.labels = []             # <<<<<<<<<<<<<<
 *         self.label_map = {}
 *         super(CategoricalDataset, self).__init__(data, True)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels));
  ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":12
 *         """
 *         self.labels = []
 *         self.label_map = {}             # <<<<<<<<<<<<<<
 *         super(CategoricalDataset, self).__init__(data, True)
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map));
  ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":13
 *         self.labels = []
 *         self.label_map = {}
 *         super(CategoricalDataset, self).__init__(data, True)             # <<<<<<<<<<<<<<
 * 
 *     def get_label(self, response):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_CategoricalDataset)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_CategoricalDataset)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_CategoricalDataset)));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_super, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s____init__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python._creg.CategoricalDataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":15
 *         super(CategoricalDataset, self).__init__(data, True)
 * 
 *     def get_label(self, response):             # <<<<<<<<<<<<<<
 *         if response in self.label_map:
 *             label = self.label_map[response]
 */

static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_1get_label(PyObject *__pyx_v_self, PyObject *__pyx_v_response); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_1get_label(PyObject *__pyx_v_self, PyObject *__pyx_v_response) {
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_label");

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":16
 * 
 *     def get_label(self, response):
 *         if response in self.label_map:             # <<<<<<<<<<<<<<
 *             label = self.label_map[response]
 *         else:
 */
  if (unlikely(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyDict_Contains(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map), __pyx_v_response))); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":17
 *     def get_label(self, response):
 *         if response in self.label_map:
 *             label = self.label_map[response]             # <<<<<<<<<<<<<<
 *         else:
 *             label = self.label_map.setdefault(response, len(self.label_map))
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map), __pyx_v_response); if (!__pyx_t_2) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_label = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":19
 *             label = self.label_map[response]
 *         else:
 *             label = self.label_map.setdefault(response, len(self.label_map))             # <<<<<<<<<<<<<<
 *             self.labels.append(response)
 *         return label
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map), __pyx_n_s__setdefault); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = ((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map);
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_4 = PyDict_Size(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_response);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_response);
    __Pyx_GIVEREF(__pyx_v_response);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_v_label = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":20
 *         else:
 *             label = self.label_map.setdefault(response, len(self.label_map))
 *             self.labels.append(response)             # <<<<<<<<<<<<<<
 *         return label
 * 
 */
    if (unlikely(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_6 = PyList_Append(((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels, __pyx_v_response); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":21
 *             label = self.label_map.setdefault(response, len(self.label_map))
 *             self.labels.append(response)
 *         return label             # <<<<<<<<<<<<<<
 * 
 *     def get_response(self, label):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_label);
  __pyx_r = __pyx_v_label;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python._creg.CategoricalDataset.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":23
 *         return label
 * 
 *     def get_response(self, label):             # <<<<<<<<<<<<<<
 *         return self.labels[label]
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_2get_response(PyObject *__pyx_v_self, PyObject *__pyx_v_label); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_2get_response(PyObject *__pyx_v_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_response");

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":24
 * 
 *     def get_response(self, label):
 *         return self.labels[label]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels), __pyx_v_label); if (!__pyx_t_1) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.CategoricalDataset.get_response", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":3
 * cdef class CategoricalDataset(Dataset):
 * 
 *     cdef readonly list labels             # <<<<<<<<<<<<<<
 *     cdef readonly dict label_map
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_6labels___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_6labels___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels));
  __pyx_r = ((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->labels);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":4
 * 
 *     cdef readonly list labels
 *     cdef readonly dict label_map             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, data):
 */

static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_9label_map___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18CategoricalDataset_9label_map___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map));
  __pyx_r = ((PyObject *)((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_self)->label_map);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":32
 *     cdef CategoricalDataset data
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.loss != NULL:
 *             del self.loss
 */

static void __pyx_pf_6python_5_creg_18LogisticRegression___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6python_5_creg_18LogisticRegression___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":33
 * 
 *     def __dealloc__(self):
 *         if self.loss != NULL:             # <<<<<<<<<<<<<<
 *             del self.loss
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss != NULL);
  if (__pyx_t_1) {

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":34
 *     def __dealloc__(self):
 *         if self.loss != NULL:
 *             del self.loss             # <<<<<<<<<<<<<<
 * 
 *     property weights:
 */
    delete ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":37
 * 
 *     property weights:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert (self.weight_vector.size() > 0)
 *             ret_weights = {}
 */

static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_7weights___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_7weights___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_ret_weights = NULL;
  double __pyx_v_w;
  unsigned int __pyx_v_y;
  unsigned int __pyx_v_f;
  unsigned int __pyx_v_K;
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":38
 *     property weights:
 *         def __get__(self):
 *             assert (self.weight_vector.size() > 0)             # <<<<<<<<<<<<<<
 *             ret_weights = {}
 *             cdef double w
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector->size() > 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":39
 *         def __get__(self):
 *             assert (self.weight_vector.size() > 0)
 *             ret_weights = {}             # <<<<<<<<<<<<<<
 *             cdef double w
 *             cdef unsigned y, f
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret_weights = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":42
 *             cdef double w
 *             cdef unsigned y, f
 *             cdef unsigned K = len(self.data.labels)             # <<<<<<<<<<<<<<
 *             for y in range(K-1):
 *                 label = self.data.labels[y]
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_K = __pyx_t_2;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":43
 *             cdef unsigned y, f
 *             cdef unsigned K = len(self.data.labels)
 *             for y in range(K-1):             # <<<<<<<<<<<<<<
 *                 label = self.data.labels[y]
 *                 ret_weights[label] = {BIAS: self.weight_vector[0][y]}
 */
  __pyx_t_3 = (__pyx_v_K - 1);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_y = __pyx_t_4;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":44
 *             cdef unsigned K = len(self.data.labels)
 *             for y in range(K-1):
 *                 label = self.data.labels[y]             # <<<<<<<<<<<<<<
 *                 ret_weights[label] = {BIAS: self.weight_vector[0][y]}
 *                 for f in range(1, num_features()):
 */
    __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels), __pyx_v_y, sizeof(unsigned int)+1, PyLong_FromUnsignedLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_v_label);
    __pyx_v_label = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":45
 *             for y in range(K-1):
 *                 label = self.data.labels[y]
 *                 ret_weights[label] = {BIAS: self.weight_vector[0][y]}             # <<<<<<<<<<<<<<
 *                 for f in range(1, num_features()):
 *                     w = self.weight_vector[0][(K-1) + y * num_features() + f]
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__BIAS); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(((((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector[0])[__pyx_v_y])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(((PyObject *)__pyx_v_ret_weights), __pyx_v_label, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":46
 *                 label = self.data.labels[y]
 *                 ret_weights[label] = {BIAS: self.weight_vector[0][y]}
 *                 for f in range(1, num_features()):             # <<<<<<<<<<<<<<
 *                     w = self.weight_vector[0][(K-1) + y * num_features() + f]
 *                     fname = unicode(Convert(f).c_str(), 'utf8')
 */
    __pyx_t_7 = __pyx_f_6python_5_creg_num_features();
    for (__pyx_t_8 = 1; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_f = __pyx_t_8;

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":47
 *                 ret_weights[label] = {BIAS: self.weight_vector[0][y]}
 *                 for f in range(1, num_features()):
 *                     w = self.weight_vector[0][(K-1) + y * num_features() + f]             # <<<<<<<<<<<<<<
 *                     fname = unicode(Convert(f).c_str(), 'utf8')
 *                     ret_weights[label][fname] = w
 */
      __pyx_v_w = ((((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector[0])[(((__pyx_v_K - 1) + (__pyx_v_y * __pyx_f_6python_5_creg_num_features())) + __pyx_v_f)]);

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":48
 *                 for f in range(1, num_features()):
 *                     w = self.weight_vector[0][(K-1) + y * num_features() + f]
 *                     fname = unicode(Convert(f).c_str(), 'utf8')             # <<<<<<<<<<<<<<
 *                     ret_weights[label][fname] = w
 *             return ret_weights
 */
      __pyx_t_1 = PyBytes_FromString(FD::Convert(__pyx_v_f).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __Pyx_INCREF(((PyObject *)__pyx_n_s__utf8));
      PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_n_s__utf8));
      __Pyx_GIVEREF(((PyObject *)__pyx_n_s__utf8));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyUnicode_Type))), ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __Pyx_XDECREF(((PyObject *)__pyx_v_fname));
      __pyx_v_fname = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":49
 *                     w = self.weight_vector[0][(K-1) + y * num_features() + f]
 *                     fname = unicode(Convert(f).c_str(), 'utf8')
 *                     ret_weights[label][fname] = w             # <<<<<<<<<<<<<<
 *             return ret_weights
 * 
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_w); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_ret_weights), __pyx_v_label); if (!__pyx_t_6) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyObject_SetItem(__pyx_t_6, ((PyObject *)__pyx_v_fname), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":50
 *                     fname = unicode(Convert(f).c_str(), 'utf8')
 *                     ret_weights[label][fname] = w
 *             return ret_weights             # <<<<<<<<<<<<<<
 * 
 *     def fit(self, CategoricalDataset data,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret_weights));
  __pyx_r = ((PyObject *)__pyx_v_ret_weights);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("python._creg.LogisticRegression.weights.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_weights);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":52
 *             return ret_weights
 * 
 *     def fit(self, CategoricalDataset data,             # <<<<<<<<<<<<<<
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):
 */

static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_1fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_1fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6python_5_creg_CategoricalDataset *__pyx_v_data = 0;
  double __pyx_v_l1;
  double __pyx_v_l2;
  unsigned int __pyx_v_memory_buffers;
  double __pyx_v_epsilon;
  double __pyx_v_delta;
  unsigned int __pyx_v_K;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,&__pyx_n_s__l1,&__pyx_n_s__l2,&__pyx_n_s__memory_buffers,&__pyx_n_s__epsilon,&__pyx_n_s__delta,0};
  __Pyx_RefNannySetupContext("fit");
  {
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__l1);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__l2);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__memory_buffers);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__epsilon);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delta);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "fit") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)values[0]);
    if (values[1]) {
      __pyx_v_l1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_l1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":53
 * 
 *     def fit(self, CategoricalDataset data,
 *             double l1=0, double l2=0, unsigned memory_buffers=40,             # <<<<<<<<<<<<<<
 *             double epsilon=1e-4, double delta=0):
 *         self.data = data
 */
      __pyx_v_l1 = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_l2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_l2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_l2 = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_memory_buffers = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_memory_buffers == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_memory_buffers = ((unsigned int)40);
    }
    if (values[4]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":54
 *     def fit(self, CategoricalDataset data,
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):             # <<<<<<<<<<<<<<
 *         self.data = data
 *         cdef unsigned K = len(data.labels)
 */
      __pyx_v_epsilon = ((double)1e-4);
    }
    if (values[5]) {
      __pyx_v_delta = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_delta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_delta = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.LogisticRegression.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_6python_5_creg_CategoricalDataset, 1, "data", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":55
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):
 *         self.data = data             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(data.labels)
 *         if self.loss == NULL:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data));
  ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data = __pyx_v_data;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":56
 *             double epsilon=1e-4, double delta=0):
 *         self.data = data
 *         cdef unsigned K = len(data.labels)             # <<<<<<<<<<<<<<
 *         if self.loss == NULL:
 *             self.weight_vector.resize((1 + num_features()) * (K - 1), 0.0)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_data->labels);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_K = __pyx_t_2;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":57
 *         self.data = data
 *         cdef unsigned K = len(data.labels)
 *         if self.loss == NULL:             # <<<<<<<<<<<<<<
 *             self.weight_vector.resize((1 + num_features()) * (K - 1), 0.0)
 *         else:
 */
  __pyx_t_3 = (((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss == NULL);
  if (__pyx_t_3) {

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":58
 *         cdef unsigned K = len(data.labels)
 *         if self.loss == NULL:
 *             self.weight_vector.resize((1 + num_features()) * (K - 1), 0.0)             # <<<<<<<<<<<<<<
 *         else:
 *             del self.loss
 */
    ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector->resize(((1 + __pyx_f_6python_5_creg_num_features()) * (__pyx_v_K - 1)), 0.0);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":60
 *             self.weight_vector.resize((1 + num_features()) * (K - 1), 0.0)
 *         else:
 *             del self.loss             # <<<<<<<<<<<<<<
 *         self.loss = new MulticlassLogLoss(data.instances[0], K, num_features(), l2)
 *         LearnParameters(self.loss[0], l1, K-1, memory_buffers,
 */
    delete ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss;
  }
  __pyx_L6:;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":61
 *         else:
 *             del self.loss
 *         self.loss = new MulticlassLogLoss(data.instances[0], K, num_features(), l2)             # <<<<<<<<<<<<<<
 *         LearnParameters(self.loss[0], l1, K-1, memory_buffers,
 *             epsilon, delta, self.weight_vector)
 */
  ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss = new MulticlassLogLoss((__pyx_v_data->__pyx_base.instances[0]), __pyx_v_K, __pyx_f_6python_5_creg_num_features(), __pyx_v_l2);

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":63
 *         self.loss = new MulticlassLogLoss(data.instances[0], K, num_features(), l2)
 *         LearnParameters(self.loss[0], l1, K-1, memory_buffers,
 *             epsilon, delta, self.weight_vector)             # <<<<<<<<<<<<<<
 * 
 *     def predict(self, CategoricalDataset test):
 */
  LearnParameters((((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss[0]), __pyx_v_l1, (__pyx_v_K - 1), __pyx_v_memory_buffers, __pyx_v_epsilon, __pyx_v_delta, ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.LogisticRegression.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_18LogisticRegression_3generator3(struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":65
 *             epsilon, delta, self.weight_vector)
 * 
 *     def predict(self, CategoricalDataset test):             # <<<<<<<<<<<<<<
 *         assert (self.loss != NULL)
 *         cdef unsigned y
 */

static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_2predict(PyObject *__pyx_v_self, PyObject *__pyx_v_test); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_2predict(PyObject *__pyx_v_self, PyObject *__pyx_v_test) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("predict");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *)__pyx_ptype_6python_5_creg___pyx_scope_struct_5_predict->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_5_predict, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_v_test);
  __pyx_cur_scope->__pyx_v_test = __pyx_v_test;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_test);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_cur_scope->__pyx_v_test), __pyx_ptype_6python_5_creg_CategoricalDataset, 1, "test", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_18LogisticRegression_3generator3;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.LogisticRegression.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_18LogisticRegression_3generator3(struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":66
 * 
 *     def predict(self, CategoricalDataset test):
 *         assert (self.loss != NULL)             # <<<<<<<<<<<<<<
 *         cdef unsigned y
 *         cdef unsigned i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_cur_scope->__pyx_v_self)->loss != NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":69
 *         cdef unsigned y
 *         cdef unsigned i
 *         for i in range(test.instances.size()):             # <<<<<<<<<<<<<<
 *             y = self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])
 *             yield self.data.labels[y]
 */
  __pyx_t_1 = ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_cur_scope->__pyx_v_test)->__pyx_base.instances->size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":70
 *         cdef unsigned i
 *         for i in range(test.instances.size()):
 *             y = self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])             # <<<<<<<<<<<<<<
 *             yield self.data.labels[y]
 * 
 */
    __pyx_cur_scope->__pyx_v_y = ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_cur_scope->__pyx_v_self)->loss->Predict(((((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_cur_scope->__pyx_v_test)->__pyx_base.instances[0])[__pyx_cur_scope->__pyx_v_i]).x, (((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_cur_scope->__pyx_v_self)->__pyx_base.weight_vector[0]));

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":71
 *         for i in range(test.instances.size()):
 *             y = self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])
 *             yield self.data.labels[y]             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, CategoricalDataset data):
 */
    __pyx_t_3 = __Pyx_GetItemInt_List(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_cur_scope->__pyx_v_self)->data->labels), __pyx_cur_scope->__pyx_v_y, sizeof(unsigned int)+1, PyLong_FromUnsignedLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":73
 *             yield self.data.labels[y]
 * 
 *     def evaluate(self, CategoricalDataset data):             # <<<<<<<<<<<<<<
 *         """ Returns accuracy of the predictions for the dataset"""
 *         assert (self.loss != NULL)
 */

static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_4evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_6python_5_creg_18LogisticRegression_4evaluate[] = " Returns accuracy of the predictions for the dataset";
static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_4evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_6python_5_creg_CategoricalDataset, 1, "data", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":75
 *     def evaluate(self, CategoricalDataset data):
 *         """ Returns accuracy of the predictions for the dataset"""
 *         assert (self.loss != NULL)             # <<<<<<<<<<<<<<
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss != NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":76
 *         """ Returns accuracy of the predictions for the dataset"""
 *         assert (self.loss != NULL)
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])             # <<<<<<<<<<<<<<
 * 
 *     def _load(self, labels, unsigned num_features, weights):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss->Evaluate((((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_v_data)->__pyx_base.instances[0]), (((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.LogisticRegression.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":78
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])
 * 
 *     def _load(self, labels, unsigned num_features, weights):             # <<<<<<<<<<<<<<
 *         assert (self.loss == NULL)
 *         self.data = CategoricalDataset([])
 */

static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_5_load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_18LogisticRegression_5_load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_labels = 0;
  unsigned int __pyx_v_num_features;
  PyObject *__pyx_v_weights = 0;
  PyObject *__pyx_v_lid = NULL;
  PyObject *__pyx_v_label = NULL;
  unsigned int __pyx_v_K;
  unsigned int __pyx_v_y;
  unsigned int __pyx_v_f;
  unsigned int __pyx_v_u;
  PyObject *__pyx_v_label_weights = NULL;
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_v_fval = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  unsigned int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  double __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__labels,&__pyx_n_s__num_features,&__pyx_n_s__weights,0};
  __Pyx_RefNannySetupContext("_load");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__labels);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num_features);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_load", 1, 3, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weights);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_load", 1, 3, 3, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_load") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_labels = values[0];
    __pyx_v_num_features = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_num_features == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_weights = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_load", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.LogisticRegression._load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":79
 * 
 *     def _load(self, labels, unsigned num_features, weights):
 *         assert (self.loss == NULL)             # <<<<<<<<<<<<<<
 *         self.data = CategoricalDataset([])
 *         # Initialize labels
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss == NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":80
 *     def _load(self, labels, unsigned num_features, weights):
 *         assert (self.loss == NULL)
 *         self.data = CategoricalDataset([])             # <<<<<<<<<<<<<<
 *         # Initialize labels
 *         self.data.labels = list(labels)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_CategoricalDataset)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data));
  ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data = ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":82
 *         self.data = CategoricalDataset([])
 *         # Initialize labels
 *         self.data.labels = list(labels)             # <<<<<<<<<<<<<<
 *         for (lid, label) in enumerate(self.data.labels):
 *             self.data.label_map[label] = lid
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_labels);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_labels);
  __Pyx_GIVEREF(__pyx_v_labels);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels));
  ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":83
 *         # Initialize labels
 *         self.data.labels = list(labels)
 *         for (lid, label) in enumerate(self.data.labels):             # <<<<<<<<<<<<<<
 *             self.data.label_map[label] = lid
 *         cdef unsigned K = len(self.data.labels)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_1 = ((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels); __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
    __Pyx_XDECREF(__pyx_v_label);
    __pyx_v_label = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_v_lid);
    __pyx_v_lid = __pyx_t_2;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":84
 *         self.data.labels = list(labels)
 *         for (lid, label) in enumerate(self.data.labels):
 *             self.data.label_map[label] = lid             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(self.data.labels)
 * 
 */
    if (PyDict_SetItem(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->label_map), __pyx_v_label, __pyx_v_lid) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":85
 *         for (lid, label) in enumerate(self.data.labels):
 *             self.data.label_map[label] = lid
 *         cdef unsigned K = len(self.data.labels)             # <<<<<<<<<<<<<<
 * 
 *         # Initialize weights
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->labels);
  __Pyx_INCREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_t_2); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_K = __pyx_t_3;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":88
 * 
 *         # Initialize weights
 *         self.weight_vector.resize((1 + num_features) * (K - 1), 0.0)             # <<<<<<<<<<<<<<
 *         cdef unsigned y, f, u
 *         for label, label_weights in weights.iteritems():
 */
  ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector->resize(((1 + __pyx_v_num_features) * (__pyx_v_K - 1)), 0.0);

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":90
 *         self.weight_vector.resize((1 + num_features) * (K - 1), 0.0)
 *         cdef unsigned y, f, u
 *         for label, label_weights in weights.iteritems():             # <<<<<<<<<<<<<<
 *             y = self.data.label_map[label]
 *             for fname, fval in label_weights.iteritems():
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_weights, __pyx_n_s__iteritems); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else if (PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      if (likely(PyTuple_CheckExact(sequence))) {
        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_label);
    __pyx_v_label = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_v_label_weights);
    __pyx_v_label_weights = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":91
 *         cdef unsigned y, f, u
 *         for label, label_weights in weights.iteritems():
 *             y = self.data.label_map[label]             # <<<<<<<<<<<<<<
 *             for fname, fval in label_weights.iteritems():
 *                 if fname == BIAS:
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject *)((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->label_map), __pyx_v_label); if (!__pyx_t_1) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_y = __pyx_t_9;

    /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":92
 *         for label, label_weights in weights.iteritems():
 *             y = self.data.label_map[label]
 *             for fname, fval in label_weights.iteritems():             # <<<<<<<<<<<<<<
 *                 if fname == BIAS:
 *                     u = y
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_label_weights, __pyx_n_s__iteritems); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyList_CheckExact(__pyx_t_6) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (PyList_CheckExact(__pyx_t_1)) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_1)) break;
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++;
      } else if (PyTuple_CheckExact(__pyx_t_1)) {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++;
      } else {
        __pyx_t_6 = __pyx_t_11(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        if (likely(PyTuple_CheckExact(sequence))) {
          if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
            if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
            else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
            if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
            else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_12)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_12); if (unlikely(!__pyx_t_4)) goto __pyx_L14_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_12); if (unlikely(!__pyx_t_7)) goto __pyx_L14_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_12), 2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L15_unpacking_done;
        __pyx_L14_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
        if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L15_unpacking_done:;
      }
      __Pyx_XDECREF(__pyx_v_fname);
      __pyx_v_fname = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_v_fval);
      __pyx_v_fval = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":93
 *             y = self.data.label_map[label]
 *             for fname, fval in label_weights.iteritems():
 *                 if fname == BIAS:             # <<<<<<<<<<<<<<
 *                     u = y
 *                 else:
 */
      __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__BIAS); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_fname, __pyx_t_6, Py_EQ); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_13) {

        /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":94
 *             for fname, fval in label_weights.iteritems():
 *                 if fname == BIAS:
 *                     u = y             # <<<<<<<<<<<<<<
 *                 else:
 *                     f = Convert(as_str(fname))
 */
        __pyx_v_u = __pyx_v_y;
        goto __pyx_L16;
      }
      /*else*/ {

        /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":96
 *                     u = y
 *                 else:
 *                     f = Convert(as_str(fname))             # <<<<<<<<<<<<<<
 *                     assert (f < num_features)
 *                     u = (K-1) + y * num_features + f
 */
        __pyx_v_f = FD::Convert(__pyx_f_6python_5_creg_as_str(__pyx_v_fname));

        /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":97
 *                 else:
 *                     f = Convert(as_str(fname))
 *                     assert (f < num_features)             # <<<<<<<<<<<<<<
 *                     u = (K-1) + y * num_features + f
 *                 self.weight_vector[0][u] = fval
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!(__pyx_v_f < __pyx_v_num_features))) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #endif

        /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":98
 *                     f = Convert(as_str(fname))
 *                     assert (f < num_features)
 *                     u = (K-1) + y * num_features + f             # <<<<<<<<<<<<<<
 *                 self.weight_vector[0][u] = fval
 *         Freeze()
 */
        __pyx_v_u = (((__pyx_v_K - 1) + (__pyx_v_y * __pyx_v_num_features)) + __pyx_v_f);
      }
      __pyx_L16:;

      /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":99
 *                     assert (f < num_features)
 *                     u = (K-1) + y * num_features + f
 *                 self.weight_vector[0][u] = fval             # <<<<<<<<<<<<<<
 *         Freeze()
 *         self.loss = new MulticlassLogLoss(self.data.instances[0], K, num_features, 0)
 */
      __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_fval); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->__pyx_base.weight_vector[0])[__pyx_v_u]) = __pyx_t_14;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":100
 *                     u = (K-1) + y * num_features + f
 *                 self.weight_vector[0][u] = fval
 *         Freeze()             # <<<<<<<<<<<<<<
 *         self.loss = new MulticlassLogLoss(self.data.instances[0], K, num_features, 0)
 */
  FD::Freeze();

  /* "/Users/vchahun/Sandbox/creg/python/logistic.pxi":101
 *                 self.weight_vector[0][u] = fval
 *         Freeze()
 *         self.loss = new MulticlassLogLoss(self.data.instances[0], K, num_features, 0)             # <<<<<<<<<<<<<<
 */
  ((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->loss = new MulticlassLogLoss((((struct __pyx_obj_6python_5_creg_LogisticRegression *)__pyx_v_self)->data->__pyx_base.instances[0]), __pyx_v_K, __pyx_v_num_features, 0.0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("python._creg.LogisticRegression._load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lid);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_label_weights);
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XDECREF(__pyx_v_fval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":7
 *     cdef readonly set levels
 * 
 *     def __init__(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Dataset with categorical response
 */

static int __pyx_pf_6python_5_creg_14OrdinalDataset___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6python_5_creg_14OrdinalDataset___init__[] = "\n        Dataset with categorical response\n        data: iterator of (dict, int) pairs\n        ";
struct wrapperbase __pyx_wrapperbase_6python_5_creg_14OrdinalDataset___init__;
static int __pyx_pf_6python_5_creg_14OrdinalDataset___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.OrdinalDataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":12
 *         data: iterator of (dict, int) pairs
 *         """
 *         self.levels = set()             # <<<<<<<<<<<<<<
 *         super(OrdinalDataset, self).__init__(data, True)
 *         assert self.levels == set(range(len(self.levels)))
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels));
  ((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":13
 *         """
 *         self.levels = set()
 *         super(OrdinalDataset, self).__init__(data, True)             # <<<<<<<<<<<<<<
 *         assert self.levels == set(range(len(self.levels)))
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_OrdinalDataset)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_OrdinalDataset)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_OrdinalDataset)));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(__pyx_builtin_super, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s____init__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":14
 *         self.levels = set()
 *         super(OrdinalDataset, self).__init__(data, True)
 *         assert self.levels == set(range(len(self.levels)))             # <<<<<<<<<<<<<<
 * 
 *     def get_label(self, response):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  __pyx_t_2 = ((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels);
  __Pyx_INCREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_4 = PySet_Size(__pyx_t_2); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PySet_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels), __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("python._creg.OrdinalDataset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":16
 *         assert self.levels == set(range(len(self.levels)))
 * 
 *     def get_label(self, response):             # <<<<<<<<<<<<<<
 *         level = int(response)
 *         self.levels.add(level)
 */

static PyObject *__pyx_pf_6python_5_creg_14OrdinalDataset_1get_label(PyObject *__pyx_v_self, PyObject *__pyx_v_response); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_14OrdinalDataset_1get_label(PyObject *__pyx_v_self, PyObject *__pyx_v_response) {
  PyObject *__pyx_v_level = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_label");

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":17
 * 
 *     def get_label(self, response):
 *         level = int(response)             # <<<<<<<<<<<<<<
 *         self.levels.add(level)
 *         return level
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_response);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_response);
  __Pyx_GIVEREF(__pyx_v_response);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_level = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":18
 *     def get_label(self, response):
 *         level = int(response)
 *         self.levels.add(level)             # <<<<<<<<<<<<<<
 *         return level
 * 
 */
  if (unlikely(((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PySet_Add(((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels, __pyx_v_level); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":19
 *         level = int(response)
 *         self.levels.add(level)
 *         return level             # <<<<<<<<<<<<<<
 * 
 *     def get_response(self, label):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_level);
  __pyx_r = __pyx_v_level;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python._creg.OrdinalDataset.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_level);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":21
 *         return level
 * 
 *     def get_response(self, label):             # <<<<<<<<<<<<<<
 *         return label
 * 
 */

static PyObject *__pyx_pf_6python_5_creg_14OrdinalDataset_2get_response(PyObject *__pyx_v_self, PyObject *__pyx_v_label); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_14OrdinalDataset_2get_response(PyObject *__pyx_v_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_response");

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":22
 * 
 *     def get_response(self, label):
 *         return label             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_label);
  __pyx_r = __pyx_v_label;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":5
 * cdef class OrdinalDataset(Dataset):
 * 
 *     cdef readonly set levels             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, data):
 */

static PyObject *__pyx_pf_6python_5_creg_14OrdinalDataset_6levels___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_14OrdinalDataset_6levels___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels));
  __pyx_r = ((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_self)->levels);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":29
 *     cdef OrdinalRegression model
 * 
 *     def __cinit__(self, OrdinalRegression model):             # <<<<<<<<<<<<<<
 *         self.model = model
 * 
 */

static int __pyx_pf_6python_5_creg_24OrdinalRegressionWeights___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6python_5_creg_24OrdinalRegressionWeights___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6python_5_creg_OrdinalRegression *__pyx_v_model = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__model,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__model);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_model = ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.OrdinalRegressionWeights.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_model), __pyx_ptype_6python_5_creg_OrdinalRegression, 1, "model", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":30
 * 
 *     def __cinit__(self, OrdinalRegression model):
 *         self.model = model             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_model));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_v_self)->model);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_v_self)->model));
  ((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_v_self)->model = __pyx_v_model;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.OrdinalRegressionWeights.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":32
 *         self.model = model
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(self.model.data.levels)
 *         return num_features() + K - 2
 */

static Py_ssize_t __pyx_pf_6python_5_creg_24OrdinalRegressionWeights_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_6python_5_creg_24OrdinalRegressionWeights_1__len__(PyObject *__pyx_v_self) {
  unsigned int __pyx_v_K;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__");

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":33
 * 
 *     def __len__(self):
 *         cdef unsigned K = len(self.model.data.levels)             # <<<<<<<<<<<<<<
 *         return num_features() + K - 2
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_v_self)->model->data->levels);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PySet_Size(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_K = __pyx_t_2;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":34
 *     def __len__(self):
 *         cdef unsigned K = len(self.model.data.levels)
 *         return num_features() + K - 2             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_r = ((__pyx_f_6python_5_creg_num_features() + __pyx_v_K) - 2);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.OrdinalRegressionWeights.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_24OrdinalRegressionWeights_3generator4(struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":36
 *         return num_features() + K - 2
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(self.model.data.levels)
 *         cdef unsigned k
 */

static PyObject *__pyx_pf_6python_5_creg_24OrdinalRegressionWeights_2__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_24OrdinalRegressionWeights_2__iter__(PyObject *__pyx_v_self) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *)__pyx_ptype_6python_5_creg___pyx_scope_struct_6___iter__->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_6___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_24OrdinalRegressionWeights_3generator4;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_24OrdinalRegressionWeights_3generator4(struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    case 2: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":37
 * 
 *     def __iter__(self):
 *         cdef unsigned K = len(self.model.data.levels)             # <<<<<<<<<<<<<<
 *         cdef unsigned k
 *         for k in range(1, K):
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_cur_scope->__pyx_v_self)->model->data->levels);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PySet_Size(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_cur_scope->__pyx_v_K = __pyx_t_2;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":39
 *         cdef unsigned K = len(self.model.data.levels)
 *         cdef unsigned k
 *         for k in range(1, K):             # <<<<<<<<<<<<<<
 *             yield Intercept(k), self.model.weight_vector[0][k-1]
 *         cdef double fval
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_K;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_k = __pyx_t_4;

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":40
 *         cdef unsigned k
 *         for k in range(1, K):
 *             yield Intercept(k), self.model.weight_vector[0][k-1]             # <<<<<<<<<<<<<<
 *         cdef double fval
 *         cdef unsigned f
 */
    __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_cur_scope->__pyx_v_k); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_Intercept)), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(((((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_cur_scope->__pyx_v_self)->model->__pyx_base.weight_vector[0])[(__pyx_cur_scope->__pyx_v_k - 1)])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_r = ((PyObject *)__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":43
 *         cdef double fval
 *         cdef unsigned f
 *         for f in range(1, num_features()):             # <<<<<<<<<<<<<<
 *             fval = self.model.weight_vector[0][K-1+f]
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 */
  __pyx_t_3 = __pyx_f_6python_5_creg_num_features();
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_f = __pyx_t_4;

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":44
 *         cdef unsigned f
 *         for f in range(1, num_features()):
 *             fval = self.model.weight_vector[0][K-1+f]             # <<<<<<<<<<<<<<
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             yield fname, fval
 */
    __pyx_cur_scope->__pyx_v_fval = ((((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_cur_scope->__pyx_v_self)->model->__pyx_base.weight_vector[0])[((__pyx_cur_scope->__pyx_v_K - 1) + __pyx_cur_scope->__pyx_v_f)]);

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":45
 *         for f in range(1, num_features()):
 *             fval = self.model.weight_vector[0][K-1+f]
 *             fname = unicode(Convert(f).c_str(), 'utf8')             # <<<<<<<<<<<<<<
 *             yield fname, fval
 * 
 */
    __pyx_t_6 = PyBytes_FromString(FD::Convert(__pyx_cur_scope->__pyx_v_f).c_str()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_6));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__utf8));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_n_s__utf8));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__utf8));
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)(&PyUnicode_Type))), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    __Pyx_XDECREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_fname = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":46
 *             fval = self.model.weight_vector[0][K-1+f]
 *             fname = unicode(Convert(f).c_str(), 'utf8')
 *             yield fname, fval             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, fname):
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_fval); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_fname));
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_r = ((PyObject *)__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 2;
    return __pyx_r;
    __pyx_L9_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":48
 *             yield fname, fval
 * 
 *     def __getitem__(self, fname):             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(self.model.data.levels)
 *         cdef unsigned u = (fname.level-1 if isinstance(fname, Intercept)
 */

static PyObject *__pyx_pf_6python_5_creg_24OrdinalRegressionWeights_4__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_24OrdinalRegressionWeights_4__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  unsigned int __pyx_v_K;
  unsigned int __pyx_v_u;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":49
 * 
 *     def __getitem__(self, fname):
 *         cdef unsigned K = len(self.model.data.levels)             # <<<<<<<<<<<<<<
 *         cdef unsigned u = (fname.level-1 if isinstance(fname, Intercept)
 *             else K-1+Convert(<char*> fname))
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_v_self)->model->data->levels);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PySet_Size(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_K = __pyx_t_2;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":50
 *     def __getitem__(self, fname):
 *         cdef unsigned K = len(self.model.data.levels)
 *         cdef unsigned u = (fname.level-1 if isinstance(fname, Intercept)             # <<<<<<<<<<<<<<
 *             else K-1+Convert(<char*> fname))
 *         return self.model.weight_vector[0][u]
 */
  __pyx_t_3 = ((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_Intercept));
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_fname, __pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_fname, __pyx_n_s__level); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":51
 *         cdef unsigned K = len(self.model.data.levels)
 *         cdef unsigned u = (fname.level-1 if isinstance(fname, Intercept)
 *             else K-1+Convert(<char*> fname))             # <<<<<<<<<<<<<<
 *         return self.model.weight_vector[0][u]
 * 
 */
    __pyx_t_6 = PyBytes_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = PyInt_FromLong(((__pyx_v_K - 1) + FD::Convert(((char *)__pyx_t_6)))); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_t_7 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_u = __pyx_t_7;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":52
 *         cdef unsigned u = (fname.level-1 if isinstance(fname, Intercept)
 *             else K-1+Convert(<char*> fname))
 *         return self.model.weight_vector[0][u]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)__pyx_v_self)->model->__pyx_base.weight_vector[0])[__pyx_v_u])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("python._creg.OrdinalRegressionWeights.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":60
 *     cdef OrdinalDataset data
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.loss != NULL:
 *             del self.loss
 */

static void __pyx_pf_6python_5_creg_17OrdinalRegression___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6python_5_creg_17OrdinalRegression___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":61
 * 
 *     def __dealloc__(self):
 *         if self.loss != NULL:             # <<<<<<<<<<<<<<
 *             del self.loss
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss != NULL);
  if (__pyx_t_1) {

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":62
 *     def __dealloc__(self):
 *         if self.loss != NULL:
 *             del self.loss             # <<<<<<<<<<<<<<
 * 
 *     property weights:
 */
    delete ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":65
 * 
 *     property weights:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert (self.weight_vector.size() > 0)
 *             return OrdinalRegressionWeights(self)
 */

static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_7weights___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_7weights___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__");

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":66
 *     property weights:
 *         def __get__(self):
 *             assert (self.weight_vector.size() > 0)             # <<<<<<<<<<<<<<
 *             return OrdinalRegressionWeights(self)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->__pyx_base.weight_vector->size() > 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":67
 *         def __get__(self):
 *             assert (self.weight_vector.size() > 0)
 *             return OrdinalRegressionWeights(self)             # <<<<<<<<<<<<<<
 * 
 *     def fit(self, OrdinalDataset data,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_OrdinalRegressionWeights)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("python._creg.OrdinalRegression.weights.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":69
 *             return OrdinalRegressionWeights(self)
 * 
 *     def fit(self, OrdinalDataset data,             # <<<<<<<<<<<<<<
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):
 */

static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_1fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_1fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6python_5_creg_OrdinalDataset *__pyx_v_data = 0;
  double __pyx_v_l1;
  double __pyx_v_l2;
  unsigned int __pyx_v_memory_buffers;
  double __pyx_v_epsilon;
  double __pyx_v_delta;
  unsigned int __pyx_v_K;
  unsigned int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__data,&__pyx_n_s__l1,&__pyx_n_s__l2,&__pyx_n_s__memory_buffers,&__pyx_n_s__epsilon,&__pyx_n_s__delta,0};
  __Pyx_RefNannySetupContext("fit");
  {
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__l1);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__l2);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__memory_buffers);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__epsilon);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delta);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "fit") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = ((struct __pyx_obj_6python_5_creg_OrdinalDataset *)values[0]);
    if (values[1]) {
      __pyx_v_l1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_l1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":70
 * 
 *     def fit(self, OrdinalDataset data,
 *             double l1=0, double l2=0, unsigned memory_buffers=40,             # <<<<<<<<<<<<<<
 *             double epsilon=1e-4, double delta=0):
 *         self.data = data
 */
      __pyx_v_l1 = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_l2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_l2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_l2 = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_memory_buffers = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_memory_buffers == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_memory_buffers = ((unsigned int)40);
    }
    if (values[4]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":71
 *     def fit(self, OrdinalDataset data,
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):             # <<<<<<<<<<<<<<
 *         self.data = data
 *         cdef unsigned K = len(data.levels)
 */
      __pyx_v_epsilon = ((double)1e-4);
    }
    if (values[5]) {
      __pyx_v_delta = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_delta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_delta = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("python._creg.OrdinalRegression.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_6python_5_creg_OrdinalDataset, 1, "data", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":72
 *             double l1=0, double l2=0, unsigned memory_buffers=40,
 *             double epsilon=1e-4, double delta=0):
 *         self.data = data             # <<<<<<<<<<<<<<
 *         cdef unsigned K = len(data.levels)
 *         cdef unsigned k
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  __Pyx_GOTREF(((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->data);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->data));
  ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->data = __pyx_v_data;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":73
 *             double epsilon=1e-4, double delta=0):
 *         self.data = data
 *         cdef unsigned K = len(data.levels)             # <<<<<<<<<<<<<<
 *         cdef unsigned k
 *         if self.loss == NULL:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_data->levels);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = PySet_Size(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_K = __pyx_t_2;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":75
 *         cdef unsigned K = len(data.levels)
 *         cdef unsigned k
 *         if self.loss == NULL:             # <<<<<<<<<<<<<<
 *             self.weight_vector.resize(K - 1 + num_features(), 0.0)
 *             for k in range(K-1):
 */
  __pyx_t_3 = (((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss == NULL);
  if (__pyx_t_3) {

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":76
 *         cdef unsigned k
 *         if self.loss == NULL:
 *             self.weight_vector.resize(K - 1 + num_features(), 0.0)             # <<<<<<<<<<<<<<
 *             for k in range(K-1):
 *               self.weight_vector[0][k] = log(k+1) - log(K)
 */
    ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->__pyx_base.weight_vector->resize(((__pyx_v_K - 1) + __pyx_f_6python_5_creg_num_features()), 0.0);

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":77
 *         if self.loss == NULL:
 *             self.weight_vector.resize(K - 1 + num_features(), 0.0)
 *             for k in range(K-1):             # <<<<<<<<<<<<<<
 *               self.weight_vector[0][k] = log(k+1) - log(K)
 *         else:
 */
    __pyx_t_4 = (__pyx_v_K - 1);
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_k = __pyx_t_5;

      /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":78
 *             self.weight_vector.resize(K - 1 + num_features(), 0.0)
 *             for k in range(K-1):
 *               self.weight_vector[0][k] = log(k+1) - log(K)             # <<<<<<<<<<<<<<
 *         else:
 *             del self.loss
 */
      ((((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->__pyx_base.weight_vector[0])[__pyx_v_k]) = (log((__pyx_v_k + 1)) - log(__pyx_v_K));
    }
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":80
 *               self.weight_vector[0][k] = log(k+1) - log(K)
 *         else:
 *             del self.loss             # <<<<<<<<<<<<<<
 *         self.loss = new OrdinalLogLoss(data.instances[0], K, num_features(), l2)
 *         LearnParameters(self.loss[0], l1, K-1, memory_buffers,
 */
    delete ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss;
  }
  __pyx_L6:;

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":81
 *         else:
 *             del self.loss
 *         self.loss = new OrdinalLogLoss(data.instances[0], K, num_features(), l2)             # <<<<<<<<<<<<<<
 *         LearnParameters(self.loss[0], l1, K-1, memory_buffers,
 *             epsilon, delta, self.weight_vector)
 */
  ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss = new OrdinalLogLoss((__pyx_v_data->__pyx_base.instances[0]), __pyx_v_K, __pyx_f_6python_5_creg_num_features(), __pyx_v_l2);

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":83
 *         self.loss = new OrdinalLogLoss(data.instances[0], K, num_features(), l2)
 *         LearnParameters(self.loss[0], l1, K-1, memory_buffers,
 *             epsilon, delta, self.weight_vector)             # <<<<<<<<<<<<<<
 * 
 *     def predict(self, OrdinalDataset test):
 */
  LearnParameters((((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss[0]), __pyx_v_l1, (__pyx_v_K - 1), __pyx_v_memory_buffers, __pyx_v_epsilon, __pyx_v_delta, ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->__pyx_base.weight_vector);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.OrdinalRegression.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6python_5_creg_17OrdinalRegression_3generator5(struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *__pyx_cur_scope, PyObject *__pyx_sent_value); /* proto */

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":85
 *             epsilon, delta, self.weight_vector)
 * 
 *     def predict(self, OrdinalDataset test):             # <<<<<<<<<<<<<<
 *         assert (self.loss != NULL)
 *         cdef unsigned i
 */

static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_2predict(PyObject *__pyx_v_self, PyObject *__pyx_v_test); /*proto*/
static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_2predict(PyObject *__pyx_v_self, PyObject *__pyx_v_test) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("predict");
  __pyx_cur_scope = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *)__pyx_ptype_6python_5_creg___pyx_scope_struct_7_predict->tp_new(__pyx_ptype_6python_5_creg___pyx_scope_struct_7_predict, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_v_test);
  __pyx_cur_scope->__pyx_v_test = __pyx_v_test;
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_test);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_cur_scope->__pyx_v_test), __pyx_ptype_6python_5_creg_OrdinalDataset, 1, "test", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_base.resume_label = 0;
  __pyx_cur_scope->__pyx_base.body = (__pyx_generator_body_t) __pyx_gb_6python_5_creg_17OrdinalRegression_3generator5;
  __Pyx_GIVEREF(__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return (PyObject *) __pyx_cur_scope;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("python._creg.OrdinalRegression.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6python_5_creg_17OrdinalRegression_3generator5(struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *__pyx_cur_scope, PyObject *__pyx_sent_value) /* generator body */
{
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None");
  switch (__pyx_cur_scope->__pyx_base.resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":86
 * 
 *     def predict(self, OrdinalDataset test):
 *         assert (self.loss != NULL)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(test.instances.size()):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_cur_scope->__pyx_v_self)->loss != NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":88
 *         assert (self.loss != NULL)
 *         cdef unsigned i
 *         for i in range(test.instances.size()):             # <<<<<<<<<<<<<<
 *             yield self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_cur_scope->__pyx_v_test)->__pyx_base.instances->size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":89
 *         cdef unsigned i
 *         for i in range(test.instances.size()):
 *             yield self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, OrdinalDataset data):
 */
    __pyx_t_3 = PyLong_FromUnsignedLong(((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_cur_scope->__pyx_v_self)->loss->Predict(((((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_cur_scope->__pyx_v_test)->__pyx_base.instances[0])[__pyx_cur_scope->__pyx_v_i]).x, (((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_cur_scope->__pyx_v_self)->__pyx_base.weight_vector[0]))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_cur_scope->__pyx_base.resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_cur_scope->__pyx_base.resume_label = -1;
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":91
 *             yield self.loss.Predict(test.instances[0][i].x, self.weight_vector[0])
 * 
 *     def evaluate(self, OrdinalDataset data):             # <<<<<<<<<<<<<<
 *         """ Returns accuracy of the predictions for the dataset"""
 *         assert (self.loss != NULL)
 */

static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_4evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_6python_5_creg_17OrdinalRegression_4evaluate[] = " Returns accuracy of the predictions for the dataset";
static PyObject *__pyx_pf_6python_5_creg_17OrdinalRegression_4evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_6python_5_creg_OrdinalDataset, 1, "data", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":93
 *     def evaluate(self, OrdinalDataset data):
 *         """ Returns accuracy of the predictions for the dataset"""
 *         assert (self.loss != NULL)             # <<<<<<<<<<<<<<
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!(((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss != NULL))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/Users/vchahun/Sandbox/creg/python/ordinal.pxi":94
 *         """ Returns accuracy of the predictions for the dataset"""
 *         assert (self.loss != NULL)
 *         return self.loss.Evaluate(data.instances[0], self.weight_vector[0])             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->loss->Evaluate((((struct __pyx_obj_6python_5_creg_OrdinalDataset *)__pyx_v_data)->__pyx_base.instances[0]), (((struct __pyx_obj_6python_5_creg_OrdinalRegression *)__pyx_v_self)->__pyx_base.weight_vector[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("python._creg.OrdinalRegression.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/_creg.pxd":76
 *     ctypedef char* const_char_ptr "const char*"
 * 
 * cdef inline unsigned num_features():             # <<<<<<<<<<<<<<
 *     return NumFeats()
 * 
 */

static CYTHON_INLINE unsigned int __pyx_f_6python_5_creg_num_features(void) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_features");

  /* "python/_creg.pxd":77
 * 
 * cdef inline unsigned num_features():
 *     return NumFeats()             # <<<<<<<<<<<<<<
 * 
 * """
 */
  __pyx_r = FD::NumFeats();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6python_5_creg_Bias(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_Bias(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_Bias[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Bias = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Bias = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Bias = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Bias = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_Bias = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.Bias"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_Bias), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_Bias, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pf_6python_5_creg_4Bias___repr__, /*tp_repr*/
  &__pyx_tp_as_number_Bias, /*tp_as_number*/
  &__pyx_tp_as_sequence_Bias, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Bias, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Bias, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_Bias, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_Bias, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_Intercept(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_6python_5_creg_9Intercept___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_Intercept(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_Intercept[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Intercept = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Intercept = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Intercept = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Intercept = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_Intercept = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.Intercept"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_Intercept), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_Intercept, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pf_6python_5_creg_9Intercept_1__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Intercept, /*tp_as_number*/
  &__pyx_tp_as_sequence_Intercept, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Intercept, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Intercept, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_Intercept, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_Intercept, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_Dataset(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_6python_5_creg_7Dataset___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_Dataset(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6python_5_creg_7Dataset_2__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6python_5_creg_Dataset(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6python_5_creg_7Dataset_num_features(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_7Dataset_12num_features___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_Dataset[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_Dataset[] = {
  {(char *)"num_features", __pyx_getprop_6python_5_creg_7Dataset_num_features, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Dataset = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Dataset = {
  __pyx_pf_6python_5_creg_7Dataset_6__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6python_5_creg_Dataset, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Dataset = {
  __pyx_pf_6python_5_creg_7Dataset_6__len__, /*mp_length*/
  __pyx_pf_6python_5_creg_7Dataset_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Dataset = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_Dataset = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.Dataset"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_Dataset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_Dataset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pf_6python_5_creg_7Dataset_3__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Dataset, /*tp_as_number*/
  &__pyx_tp_as_sequence_Dataset, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Dataset, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Dataset, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_6python_5_creg_7Dataset_4__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_Dataset, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_Dataset, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6python_5_creg_7Dataset_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_Dataset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_Weights(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_Weights(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6python_5_creg_7Weights_df(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_7Weights_2df___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_Weights[] = {
  {__Pyx_NAMESTR("top"), (PyCFunction)__pyx_pf_6python_5_creg_7Weights_1top, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_Weights[] = {
  {(char *)"df", __pyx_getprop_6python_5_creg_7Weights_df, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Weights = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Weights = {
  __pyx_pf_6python_5_creg_7Weights___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Weights = {
  __pyx_pf_6python_5_creg_7Weights___len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Weights = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_Weights = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.Weights"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_Weights), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_Weights, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pf_6python_5_creg_7Weights_2__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Weights, /*tp_as_number*/
  &__pyx_tp_as_sequence_Weights, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Weights, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Weights, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_Weights, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_Weights, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_Weights, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_Model(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_6python_5_creg_5Model___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_Model(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6python_5_creg_5Model_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_Model[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Model = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Model = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Model = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Model = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_Model = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.Model"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_Model), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_Model, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Model, /*tp_as_number*/
  &__pyx_tp_as_sequence_Model, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Model, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Model, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_Model, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_Model, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_RealvaluedDataset(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6python_5_creg_Dataset(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6python_5_creg_RealvaluedDataset[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_RealvaluedDataset = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_RealvaluedDataset = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RealvaluedDataset = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_RealvaluedDataset = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_RealvaluedDataset = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.RealvaluedDataset"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_RealvaluedDataset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_Dataset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_RealvaluedDataset, /*tp_as_number*/
  &__pyx_tp_as_sequence_RealvaluedDataset, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RealvaluedDataset, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_RealvaluedDataset, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_RealvaluedDataset, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6python_5_creg_17RealvaluedDataset___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_RealvaluedDataset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_LinearRegressionWeights(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg_LinearRegressionWeights *p;
  PyObject *o = __pyx_tp_new_6python_5_creg_Weights(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)o);
  p->model = ((struct __pyx_obj_6python_5_creg_LinearRegression *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_6python_5_creg_23LinearRegressionWeights___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_LinearRegressionWeights(PyObject *o) {
  struct __pyx_obj_6python_5_creg_LinearRegressionWeights *p = (struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)o;
  Py_XDECREF(((PyObject *)p->model));
  __pyx_tp_dealloc_6python_5_creg_Weights(o);
}

static int __pyx_tp_traverse_6python_5_creg_LinearRegressionWeights(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg_LinearRegressionWeights *p = (struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)o;
  if (__pyx_ptype_6python_5_creg_Weights->tp_traverse) {
    e = __pyx_ptype_6python_5_creg_Weights->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->model) {
    e = (*v)(((PyObject*)p->model), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg_LinearRegressionWeights(PyObject *o) {
  struct __pyx_obj_6python_5_creg_LinearRegressionWeights *p = (struct __pyx_obj_6python_5_creg_LinearRegressionWeights *)o;
  PyObject* tmp;
  if (__pyx_ptype_6python_5_creg_Weights->tp_clear) {
    __pyx_ptype_6python_5_creg_Weights->tp_clear(o);
  }
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_6python_5_creg_LinearRegression *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6python_5_creg_LinearRegressionWeights(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6python_5_creg_LinearRegressionWeights[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_LinearRegressionWeights = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_LinearRegressionWeights = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6python_5_creg_LinearRegressionWeights, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LinearRegressionWeights = {
  0, /*mp_length*/
  __pyx_pf_6python_5_creg_23LinearRegressionWeights_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_LinearRegressionWeights = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_LinearRegressionWeights = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.LinearRegressionWeights"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_LinearRegressionWeights), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_LinearRegressionWeights, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_LinearRegressionWeights, /*tp_as_number*/
  &__pyx_tp_as_sequence_LinearRegressionWeights, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LinearRegressionWeights, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_LinearRegressionWeights, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg_LinearRegressionWeights, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg_LinearRegressionWeights, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_6python_5_creg_23LinearRegressionWeights_1__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_LinearRegressionWeights, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_LinearRegressionWeights, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_LinearRegression(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6python_5_creg_Model(t, a, k);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_LinearRegression(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6python_5_creg_16LinearRegression___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6python_5_creg_Model(o);
}

static PyObject *__pyx_getprop_6python_5_creg_16LinearRegression_weights(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_16LinearRegression_7weights___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_LinearRegression[] = {
  {__Pyx_NAMESTR("fit"), (PyCFunction)__pyx_pf_6python_5_creg_16LinearRegression_1fit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("predict"), (PyCFunction)__pyx_pf_6python_5_creg_16LinearRegression_2predict, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("evaluate"), (PyCFunction)__pyx_pf_6python_5_creg_16LinearRegression_4evaluate, METH_O, __Pyx_DOCSTR(__pyx_doc_6python_5_creg_16LinearRegression_4evaluate)},
  {__Pyx_NAMESTR("_load"), (PyCFunction)__pyx_pf_6python_5_creg_16LinearRegression_5_load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_LinearRegression[] = {
  {(char *)"weights", __pyx_getprop_6python_5_creg_16LinearRegression_weights, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_LinearRegression = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_LinearRegression = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LinearRegression = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_LinearRegression = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_LinearRegression = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.LinearRegression"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_LinearRegression), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_LinearRegression, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_LinearRegression, /*tp_as_number*/
  &__pyx_tp_as_sequence_LinearRegression, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LinearRegression, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_LinearRegression, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_LinearRegression, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_LinearRegression, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_LinearRegression, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_CategoricalDataset(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg_CategoricalDataset *p;
  PyObject *o = __pyx_tp_new_6python_5_creg_Dataset(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)o);
  p->labels = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->label_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_CategoricalDataset(PyObject *o) {
  struct __pyx_obj_6python_5_creg_CategoricalDataset *p = (struct __pyx_obj_6python_5_creg_CategoricalDataset *)o;
  Py_XDECREF(((PyObject *)p->labels));
  Py_XDECREF(((PyObject *)p->label_map));
  __pyx_tp_dealloc_6python_5_creg_Dataset(o);
}

static int __pyx_tp_traverse_6python_5_creg_CategoricalDataset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg_CategoricalDataset *p = (struct __pyx_obj_6python_5_creg_CategoricalDataset *)o;
  if (__pyx_ptype_6python_5_creg_Dataset->tp_traverse) {
    e = __pyx_ptype_6python_5_creg_Dataset->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->labels) {
    e = (*v)(p->labels, a); if (e) return e;
  }
  if (p->label_map) {
    e = (*v)(p->label_map, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg_CategoricalDataset(PyObject *o) {
  struct __pyx_obj_6python_5_creg_CategoricalDataset *p = (struct __pyx_obj_6python_5_creg_CategoricalDataset *)o;
  PyObject* tmp;
  if (__pyx_ptype_6python_5_creg_Dataset->tp_clear) {
    __pyx_ptype_6python_5_creg_Dataset->tp_clear(o);
  }
  tmp = ((PyObject*)p->labels);
  p->labels = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->label_map);
  p->label_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6python_5_creg_18CategoricalDataset_labels(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_18CategoricalDataset_6labels___get__(o);
}

static PyObject *__pyx_getprop_6python_5_creg_18CategoricalDataset_label_map(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_18CategoricalDataset_9label_map___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_CategoricalDataset[] = {
  {__Pyx_NAMESTR("get_label"), (PyCFunction)__pyx_pf_6python_5_creg_18CategoricalDataset_1get_label, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_response"), (PyCFunction)__pyx_pf_6python_5_creg_18CategoricalDataset_2get_response, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_CategoricalDataset[] = {
  {(char *)"labels", __pyx_getprop_6python_5_creg_18CategoricalDataset_labels, 0, 0, 0},
  {(char *)"label_map", __pyx_getprop_6python_5_creg_18CategoricalDataset_label_map, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CategoricalDataset = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CategoricalDataset = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CategoricalDataset = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CategoricalDataset = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_CategoricalDataset = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.CategoricalDataset"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_CategoricalDataset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_CategoricalDataset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CategoricalDataset, /*tp_as_number*/
  &__pyx_tp_as_sequence_CategoricalDataset, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CategoricalDataset, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CategoricalDataset, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg_CategoricalDataset, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg_CategoricalDataset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_CategoricalDataset, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_CategoricalDataset, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6python_5_creg_18CategoricalDataset___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_CategoricalDataset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_LogisticRegression(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg_LogisticRegression *p;
  PyObject *o = __pyx_tp_new_6python_5_creg_Model(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg_LogisticRegression *)o);
  p->data = ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_LogisticRegression(PyObject *o) {
  struct __pyx_obj_6python_5_creg_LogisticRegression *p = (struct __pyx_obj_6python_5_creg_LogisticRegression *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6python_5_creg_18LogisticRegression___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->data));
  __pyx_tp_dealloc_6python_5_creg_Model(o);
}

static int __pyx_tp_traverse_6python_5_creg_LogisticRegression(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg_LogisticRegression *p = (struct __pyx_obj_6python_5_creg_LogisticRegression *)o;
  if (__pyx_ptype_6python_5_creg_Model->tp_traverse) {
    e = __pyx_ptype_6python_5_creg_Model->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->data) {
    e = (*v)(((PyObject*)p->data), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg_LogisticRegression(PyObject *o) {
  struct __pyx_obj_6python_5_creg_LogisticRegression *p = (struct __pyx_obj_6python_5_creg_LogisticRegression *)o;
  PyObject* tmp;
  if (__pyx_ptype_6python_5_creg_Model->tp_clear) {
    __pyx_ptype_6python_5_creg_Model->tp_clear(o);
  }
  tmp = ((PyObject*)p->data);
  p->data = ((struct __pyx_obj_6python_5_creg_CategoricalDataset *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6python_5_creg_18LogisticRegression_weights(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_18LogisticRegression_7weights___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_LogisticRegression[] = {
  {__Pyx_NAMESTR("fit"), (PyCFunction)__pyx_pf_6python_5_creg_18LogisticRegression_1fit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("predict"), (PyCFunction)__pyx_pf_6python_5_creg_18LogisticRegression_2predict, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("evaluate"), (PyCFunction)__pyx_pf_6python_5_creg_18LogisticRegression_4evaluate, METH_O, __Pyx_DOCSTR(__pyx_doc_6python_5_creg_18LogisticRegression_4evaluate)},
  {__Pyx_NAMESTR("_load"), (PyCFunction)__pyx_pf_6python_5_creg_18LogisticRegression_5_load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_LogisticRegression[] = {
  {(char *)"weights", __pyx_getprop_6python_5_creg_18LogisticRegression_weights, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_LogisticRegression = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_LogisticRegression = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogisticRegression = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_LogisticRegression = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_LogisticRegression = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.LogisticRegression"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_LogisticRegression), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_LogisticRegression, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_LogisticRegression, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogisticRegression, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogisticRegression, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_LogisticRegression, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg_LogisticRegression, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg_LogisticRegression, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_LogisticRegression, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_LogisticRegression, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_LogisticRegression, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_OrdinalDataset(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg_OrdinalDataset *p;
  PyObject *o = __pyx_tp_new_6python_5_creg_Dataset(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg_OrdinalDataset *)o);
  p->levels = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_OrdinalDataset(PyObject *o) {
  struct __pyx_obj_6python_5_creg_OrdinalDataset *p = (struct __pyx_obj_6python_5_creg_OrdinalDataset *)o;
  Py_XDECREF(((PyObject *)p->levels));
  __pyx_tp_dealloc_6python_5_creg_Dataset(o);
}

static int __pyx_tp_traverse_6python_5_creg_OrdinalDataset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg_OrdinalDataset *p = (struct __pyx_obj_6python_5_creg_OrdinalDataset *)o;
  if (__pyx_ptype_6python_5_creg_Dataset->tp_traverse) {
    e = __pyx_ptype_6python_5_creg_Dataset->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->levels) {
    e = (*v)(p->levels, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg_OrdinalDataset(PyObject *o) {
  struct __pyx_obj_6python_5_creg_OrdinalDataset *p = (struct __pyx_obj_6python_5_creg_OrdinalDataset *)o;
  PyObject* tmp;
  if (__pyx_ptype_6python_5_creg_Dataset->tp_clear) {
    __pyx_ptype_6python_5_creg_Dataset->tp_clear(o);
  }
  tmp = ((PyObject*)p->levels);
  p->levels = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6python_5_creg_14OrdinalDataset_levels(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_14OrdinalDataset_6levels___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_OrdinalDataset[] = {
  {__Pyx_NAMESTR("get_label"), (PyCFunction)__pyx_pf_6python_5_creg_14OrdinalDataset_1get_label, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_response"), (PyCFunction)__pyx_pf_6python_5_creg_14OrdinalDataset_2get_response, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_OrdinalDataset[] = {
  {(char *)"levels", __pyx_getprop_6python_5_creg_14OrdinalDataset_levels, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_OrdinalDataset = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_OrdinalDataset = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_OrdinalDataset = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_OrdinalDataset = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_OrdinalDataset = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.OrdinalDataset"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_OrdinalDataset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_OrdinalDataset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_OrdinalDataset, /*tp_as_number*/
  &__pyx_tp_as_sequence_OrdinalDataset, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_OrdinalDataset, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_OrdinalDataset, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg_OrdinalDataset, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg_OrdinalDataset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_OrdinalDataset, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_OrdinalDataset, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6python_5_creg_14OrdinalDataset___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_OrdinalDataset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_OrdinalRegressionWeights(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *p;
  PyObject *o = __pyx_tp_new_6python_5_creg_Weights(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)o);
  p->model = ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_6python_5_creg_24OrdinalRegressionWeights___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_OrdinalRegressionWeights(PyObject *o) {
  struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *p = (struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)o;
  Py_XDECREF(((PyObject *)p->model));
  __pyx_tp_dealloc_6python_5_creg_Weights(o);
}

static int __pyx_tp_traverse_6python_5_creg_OrdinalRegressionWeights(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *p = (struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)o;
  if (__pyx_ptype_6python_5_creg_Weights->tp_traverse) {
    e = __pyx_ptype_6python_5_creg_Weights->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->model) {
    e = (*v)(((PyObject*)p->model), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg_OrdinalRegressionWeights(PyObject *o) {
  struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *p = (struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights *)o;
  PyObject* tmp;
  if (__pyx_ptype_6python_5_creg_Weights->tp_clear) {
    __pyx_ptype_6python_5_creg_Weights->tp_clear(o);
  }
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6python_5_creg_OrdinalRegressionWeights(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6python_5_creg_OrdinalRegressionWeights[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_OrdinalRegressionWeights = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_OrdinalRegressionWeights = {
  __pyx_pf_6python_5_creg_24OrdinalRegressionWeights_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6python_5_creg_OrdinalRegressionWeights, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_OrdinalRegressionWeights = {
  __pyx_pf_6python_5_creg_24OrdinalRegressionWeights_1__len__, /*mp_length*/
  __pyx_pf_6python_5_creg_24OrdinalRegressionWeights_4__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_OrdinalRegressionWeights = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_OrdinalRegressionWeights = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.OrdinalRegressionWeights"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_OrdinalRegressionWeights), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_OrdinalRegressionWeights, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_OrdinalRegressionWeights, /*tp_as_number*/
  &__pyx_tp_as_sequence_OrdinalRegressionWeights, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_OrdinalRegressionWeights, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_OrdinalRegressionWeights, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg_OrdinalRegressionWeights, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg_OrdinalRegressionWeights, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_6python_5_creg_24OrdinalRegressionWeights_2__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_OrdinalRegressionWeights, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_OrdinalRegressionWeights, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg_OrdinalRegression(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg_OrdinalRegression *p;
  PyObject *o = __pyx_tp_new_6python_5_creg_Model(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg_OrdinalRegression *)o);
  p->data = ((struct __pyx_obj_6python_5_creg_OrdinalDataset *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg_OrdinalRegression(PyObject *o) {
  struct __pyx_obj_6python_5_creg_OrdinalRegression *p = (struct __pyx_obj_6python_5_creg_OrdinalRegression *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6python_5_creg_17OrdinalRegression___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->data));
  __pyx_tp_dealloc_6python_5_creg_Model(o);
}

static int __pyx_tp_traverse_6python_5_creg_OrdinalRegression(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg_OrdinalRegression *p = (struct __pyx_obj_6python_5_creg_OrdinalRegression *)o;
  if (__pyx_ptype_6python_5_creg_Model->tp_traverse) {
    e = __pyx_ptype_6python_5_creg_Model->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->data) {
    e = (*v)(((PyObject*)p->data), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg_OrdinalRegression(PyObject *o) {
  struct __pyx_obj_6python_5_creg_OrdinalRegression *p = (struct __pyx_obj_6python_5_creg_OrdinalRegression *)o;
  PyObject* tmp;
  if (__pyx_ptype_6python_5_creg_Model->tp_clear) {
    __pyx_ptype_6python_5_creg_Model->tp_clear(o);
  }
  tmp = ((PyObject*)p->data);
  p->data = ((struct __pyx_obj_6python_5_creg_OrdinalDataset *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6python_5_creg_17OrdinalRegression_weights(PyObject *o, void *x) {
  return __pyx_pf_6python_5_creg_17OrdinalRegression_7weights___get__(o);
}

static PyMethodDef __pyx_methods_6python_5_creg_OrdinalRegression[] = {
  {__Pyx_NAMESTR("fit"), (PyCFunction)__pyx_pf_6python_5_creg_17OrdinalRegression_1fit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("predict"), (PyCFunction)__pyx_pf_6python_5_creg_17OrdinalRegression_2predict, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("evaluate"), (PyCFunction)__pyx_pf_6python_5_creg_17OrdinalRegression_4evaluate, METH_O, __Pyx_DOCSTR(__pyx_doc_6python_5_creg_17OrdinalRegression_4evaluate)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6python_5_creg_OrdinalRegression[] = {
  {(char *)"weights", __pyx_getprop_6python_5_creg_17OrdinalRegression_weights, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_OrdinalRegression = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_OrdinalRegression = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_OrdinalRegression = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_OrdinalRegression = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg_OrdinalRegression = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.OrdinalRegression"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg_OrdinalRegression), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg_OrdinalRegression, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_OrdinalRegression, /*tp_as_number*/
  &__pyx_tp_as_sequence_OrdinalRegression, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_OrdinalRegression, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_OrdinalRegression, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg_OrdinalRegression, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg_OrdinalRegression, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg_OrdinalRegression, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6python_5_creg_OrdinalRegression, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg_OrdinalRegression, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_Generator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_Generator_object *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_Generator_object *)o);
  p->exc_type = 0;
  p->exc_value = 0;
  p->exc_traceback = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_Generator(PyObject *o) {
  struct __pyx_Generator_object *p = (struct __pyx_Generator_object *)o;
  Py_XDECREF(p->exc_type);
  Py_XDECREF(p->exc_value);
  Py_XDECREF(p->exc_traceback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_Generator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_Generator_object *p = (struct __pyx_Generator_object *)o;
  if (p->exc_type) {
    e = (*v)(p->exc_type, a); if (e) return e;
  }
  if (p->exc_value) {
    e = (*v)(p->exc_value, a); if (e) return e;
  }
  if (p->exc_traceback) {
    e = (*v)(p->exc_traceback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_Generator(PyObject *o) {
  struct __pyx_Generator_object *p = (struct __pyx_Generator_object *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->exc_type);
  p->exc_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exc_value);
  p->exc_value = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exc_traceback);
  p->exc_traceback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_Generator[] = {
  {__Pyx_NAMESTR("send"), (PyCFunction)__Pyx_Generator_Send, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("close"), (PyCFunction)__Pyx_Generator_Close, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("throw"), (PyCFunction)__Pyx_Generator_Throw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_Generator = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_Generator = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_Generator = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_Generator = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_Generator_type = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_Generator"), /*tp_name*/
  sizeof(struct __pyx_Generator_object), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_Generator, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_Generator, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_Generator, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_Generator, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_Generator, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_Generator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  PyObject_SelfIter, /*tp_iter*/
  __Pyx_Generator_Next, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_Generator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_Generator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *)o);
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__ *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct____iter__[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct____iter__ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct____iter__ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct____iter__ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct____iter__ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct____iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct____iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct____iter__, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct____iter__, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct____iter__, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct____iter__, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct____iter__, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct____iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct____iter__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_1___get__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)o);
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_1___get__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_1___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_1___get__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_1___get__[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_1___get__ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_1___get__ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_1___get__ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_1___get__ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_1___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_1___get__"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_1___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_1___get__, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_1___get__, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_1___get__, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_1___get__, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_1___get__, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_1___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_1___get__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_1___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *)o);
  p->__pyx_outer_scope = 0;
  p->__pyx_v__ = 0;
  p->__pyx_v_w = 0;
  p->__pyx_t_0 = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *)o;
  Py_XDECREF(((PyObject *)p->__pyx_outer_scope));
  Py_XDECREF(p->__pyx_v__);
  Py_XDECREF(p->__pyx_v_w);
  Py_XDECREF(p->__pyx_t_0);
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_1___get__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v__);
  p->__pyx_v__ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_2_genexpr[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_2_genexpr = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_2_genexpr = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_2_genexpr = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_2_genexpr = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_2_genexpr"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_2_genexpr, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_2_genexpr, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_2_genexpr, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_2_genexpr, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_2_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_2_genexpr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_3___iter__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *)o);
  p->__pyx_v_fname = 0;
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_3___iter__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_fname));
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_3___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_v_fname) {
    e = (*v)(p->__pyx_v_fname, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_3___iter__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__ *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_v_fname);
  p->__pyx_v_fname = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_3___iter__[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_3___iter__ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_3___iter__ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_3___iter__ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_3___iter__ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_3___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_3___iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_3___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_3___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_3___iter__, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_3___iter__, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_3___iter__, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_3___iter__, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_3___iter__, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_3___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_3___iter__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_3___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_4_predict(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *)o);
  p->__pyx_v_self = 0;
  p->__pyx_v_test = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_4_predict(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  Py_XDECREF(((PyObject *)p->__pyx_v_test));
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_4_predict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_test) {
    e = (*v)(((PyObject*)p->__pyx_v_test), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_4_predict(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_test);
  p->__pyx_v_test = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_4_predict[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_4_predict = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_4_predict = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_4_predict = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_4_predict = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_4_predict = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_4_predict"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_4_predict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_4_predict, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_4_predict, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_4_predict, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_4_predict, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_4_predict, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_4_predict, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_4_predict, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_4_predict, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_4_predict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_5_predict(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *)o);
  p->__pyx_v_self = 0;
  p->__pyx_v_test = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_5_predict(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  Py_XDECREF(((PyObject *)p->__pyx_v_test));
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_5_predict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_test) {
    e = (*v)(((PyObject*)p->__pyx_v_test), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_5_predict(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_test);
  p->__pyx_v_test = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_5_predict[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_5_predict = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_5_predict = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_5_predict = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_5_predict = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_5_predict = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_5_predict"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_5_predict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_5_predict, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_5_predict, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_5_predict, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_5_predict, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_5_predict, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_5_predict, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_5_predict, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_5_predict, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_5_predict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_6___iter__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *)o);
  p->__pyx_v_fname = 0;
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_6___iter__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_fname));
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_6___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_v_fname) {
    e = (*v)(p->__pyx_v_fname, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_6___iter__(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__ *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_v_fname);
  p->__pyx_v_fname = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_6___iter__[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_6___iter__ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_6___iter__ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_6___iter__ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_6___iter__ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_6___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_6___iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_6___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_6___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_6___iter__, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_6___iter__, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_6___iter__, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_6___iter__, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_6___iter__, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_6___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_6___iter__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_6___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6python_5_creg___pyx_scope_struct_7_predict(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *p;
  PyObject *o = __pyx_tp_new_6python_5_creg___pyx_Generator(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *)o);
  p->__pyx_v_self = 0;
  p->__pyx_v_test = 0;
  return o;
}

static void __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_7_predict(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *)o;
  Py_XDECREF(((PyObject *)p->__pyx_v_self));
  Py_XDECREF(((PyObject *)p->__pyx_v_test));
  __pyx_tp_dealloc_6python_5_creg___pyx_Generator(o);
}

static int __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_7_predict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *)o;
  e = __pyx_tp_traverse_6python_5_creg___pyx_Generator(o, v, a); if (e) return e;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_test) {
    e = (*v)(((PyObject*)p->__pyx_v_test), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6python_5_creg___pyx_scope_struct_7_predict(PyObject *o) {
  struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *p = (struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict *)o;
  PyObject* tmp;
  __pyx_tp_clear_6python_5_creg___pyx_Generator(o);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_test);
  p->__pyx_v_test = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6python_5_creg___pyx_scope_struct_7_predict[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___pyx_scope_struct_7_predict = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___pyx_scope_struct_7_predict = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___pyx_scope_struct_7_predict = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___pyx_scope_struct_7_predict = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6python_5_creg___pyx_scope_struct_7_predict = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("python._creg.__pyx_scope_struct_7_predict"), /*tp_name*/
  sizeof(struct __pyx_obj_6python_5_creg___pyx_scope_struct_7_predict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6python_5_creg___pyx_scope_struct_7_predict, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___pyx_scope_struct_7_predict, /*tp_as_number*/
  &__pyx_tp_as_sequence___pyx_scope_struct_7_predict, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___pyx_scope_struct_7_predict, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___pyx_scope_struct_7_predict, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6python_5_creg___pyx_scope_struct_7_predict, /*tp_traverse*/
  __pyx_tp_clear_6python_5_creg___pyx_scope_struct_7_predict, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6python_5_creg___pyx_scope_struct_7_predict, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6python_5_creg___pyx_scope_struct_7_predict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_creg"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_n_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 1},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__BIAS, __pyx_k__BIAS, sizeof(__pyx_k__BIAS), 0, 0, 1, 1},
  {&__pyx_n_s__KeyError, __pyx_k__KeyError, sizeof(__pyx_k__KeyError), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__categorical, __pyx_k__categorical, sizeof(__pyx_k__categorical), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__delta, __pyx_k__delta, sizeof(__pyx_k__delta), 0, 0, 1, 1},
  {&__pyx_n_s__df, __pyx_k__df, sizeof(__pyx_k__df), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__enumerate, __pyx_k__enumerate, sizeof(__pyx_k__enumerate), 0, 0, 1, 1},
  {&__pyx_n_s__epsilon, __pyx_k__epsilon, sizeof(__pyx_k__epsilon), 0, 0, 1, 1},
  {&__pyx_n_s__get_label, __pyx_k__get_label, sizeof(__pyx_k__get_label), 0, 0, 1, 1},
  {&__pyx_n_s__get_response, __pyx_k__get_response, sizeof(__pyx_k__get_response), 0, 0, 1, 1},
  {&__pyx_n_s__heapq, __pyx_k__heapq, sizeof(__pyx_k__heapq), 0, 0, 1, 1},
  {&__pyx_n_s__iteritems, __pyx_k__iteritems, sizeof(__pyx_k__iteritems), 0, 0, 1, 1},
  {&__pyx_n_s__key, __pyx_k__key, sizeof(__pyx_k__key), 0, 0, 1, 1},
  {&__pyx_n_s__l1, __pyx_k__l1, sizeof(__pyx_k__l1), 0, 0, 1, 1},
  {&__pyx_n_s__l2, __pyx_k__l2, sizeof(__pyx_k__l2), 0, 0, 1, 1},
  {&__pyx_n_s__labels, __pyx_k__labels, sizeof(__pyx_k__labels), 0, 0, 1, 1},
  {&__pyx_n_s__level, __pyx_k__level, sizeof(__pyx_k__level), 0, 0, 1, 1},
  {&__pyx_n_s__memory_buffers, __pyx_k__memory_buffers, sizeof(__pyx_k__memory_buffers), 0, 0, 1, 1},
  {&__pyx_n_s__model, __pyx_k__model, sizeof(__pyx_k__model), 0, 0, 1, 1},
  {&__pyx_n_s__nlargest, __pyx_k__nlargest, sizeof(__pyx_k__nlargest), 0, 0, 1, 1},
  {&__pyx_n_s__num_features, __pyx_k__num_features, sizeof(__pyx_k__num_features), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__setdefault, __pyx_k__setdefault, sizeof(__pyx_k__setdefault), 0, 0, 1, 1},
  {&__pyx_n_s__sum, __pyx_k__sum, sizeof(__pyx_k__sum), 0, 0, 1, 1},
  {&__pyx_n_s__super, __pyx_k__super, sizeof(__pyx_k__super), 0, 0, 1, 1},
  {&__pyx_n_s__utf8, __pyx_k__utf8, sizeof(__pyx_k__utf8), 0, 0, 1, 1},
  {&__pyx_n_s__weights, __pyx_k__weights, sizeof(__pyx_k__weights), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyError = __Pyx_GetName(__pyx_b, __pyx_n_s__KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sum = __Pyx_GetName(__pyx_b, __pyx_n_s__sum); if (!__pyx_builtin_sum) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_super = __Pyx_GetName(__pyx_b, __pyx_n_s__super); if (!__pyx_builtin_super) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetName(__pyx_b, __pyx_n_s__enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "python/_creg.pyx":23
 *         return name
 *     elif isinstance(name, unicode):
 *         name = name.encode('utf8')             # <<<<<<<<<<<<<<
 *         return name
 *     raise TypeError('Cannot convert %s to string.' % type(name))
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__utf8));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_n_s__utf8));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__utf8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));

  /* "python/_creg.pyx":82
 *     def __getitem__(self, int i):
 *         if not 0 <= i < len(self):
 *             raise KeyError('training set index out of range')             # <<<<<<<<<<<<<<
 *         cdef TrainingInstance* instance = &self.instances[0][i]
 *         y = self.get_response(instance.y.label) if self.categorical else instance.y.value
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_creg(void); /*proto*/
PyMODINIT_FUNC init_creg(void)
#else
PyMODINIT_FUNC PyInit__creg(void); /*proto*/
PyMODINIT_FUNC PyInit__creg(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__creg(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_creg"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_python___creg) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6python_5_creg_Bias) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Bias", (PyObject *)&__pyx_type_6python_5_creg_Bias) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_Bias = &__pyx_type_6python_5_creg_Bias;
  if (PyType_Ready(&__pyx_type_6python_5_creg_Intercept) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Intercept", (PyObject *)&__pyx_type_6python_5_creg_Intercept) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_Intercept = &__pyx_type_6python_5_creg_Intercept;
  if (PyType_Ready(&__pyx_type_6python_5_creg_Dataset) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Dataset", (PyObject *)&__pyx_type_6python_5_creg_Dataset) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_Dataset = &__pyx_type_6python_5_creg_Dataset;
  if (PyType_Ready(&__pyx_type_6python_5_creg_Weights) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Weights", (PyObject *)&__pyx_type_6python_5_creg_Weights) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_Weights = &__pyx_type_6python_5_creg_Weights;
  if (PyType_Ready(&__pyx_type_6python_5_creg_Model) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Model", (PyObject *)&__pyx_type_6python_5_creg_Model) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_Model = &__pyx_type_6python_5_creg_Model;
  __pyx_type_6python_5_creg_RealvaluedDataset.tp_base = __pyx_ptype_6python_5_creg_Dataset;
  if (PyType_Ready(&__pyx_type_6python_5_creg_RealvaluedDataset) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6python_5_creg_RealvaluedDataset, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6python_5_creg_17RealvaluedDataset___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6python_5_creg_17RealvaluedDataset___init__.doc = __pyx_doc_6python_5_creg_17RealvaluedDataset___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6python_5_creg_17RealvaluedDataset___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "RealvaluedDataset", (PyObject *)&__pyx_type_6python_5_creg_RealvaluedDataset) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_RealvaluedDataset = &__pyx_type_6python_5_creg_RealvaluedDataset;
  __pyx_type_6python_5_creg_LinearRegressionWeights.tp_base = __pyx_ptype_6python_5_creg_Weights;
  if (PyType_Ready(&__pyx_type_6python_5_creg_LinearRegressionWeights) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "LinearRegressionWeights", (PyObject *)&__pyx_type_6python_5_creg_LinearRegressionWeights) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_LinearRegressionWeights = &__pyx_type_6python_5_creg_LinearRegressionWeights;
  __pyx_type_6python_5_creg_LinearRegression.tp_base = __pyx_ptype_6python_5_creg_Model;
  if (PyType_Ready(&__pyx_type_6python_5_creg_LinearRegression) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "LinearRegression", (PyObject *)&__pyx_type_6python_5_creg_LinearRegression) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_LinearRegression = &__pyx_type_6python_5_creg_LinearRegression;
  __pyx_type_6python_5_creg_CategoricalDataset.tp_base = __pyx_ptype_6python_5_creg_Dataset;
  if (PyType_Ready(&__pyx_type_6python_5_creg_CategoricalDataset) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6python_5_creg_CategoricalDataset, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6python_5_creg_18CategoricalDataset___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6python_5_creg_18CategoricalDataset___init__.doc = __pyx_doc_6python_5_creg_18CategoricalDataset___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6python_5_creg_18CategoricalDataset___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "CategoricalDataset", (PyObject *)&__pyx_type_6python_5_creg_CategoricalDataset) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_CategoricalDataset = &__pyx_type_6python_5_creg_CategoricalDataset;
  __pyx_type_6python_5_creg_LogisticRegression.tp_base = __pyx_ptype_6python_5_creg_Model;
  if (PyType_Ready(&__pyx_type_6python_5_creg_LogisticRegression) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "LogisticRegression", (PyObject *)&__pyx_type_6python_5_creg_LogisticRegression) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_LogisticRegression = &__pyx_type_6python_5_creg_LogisticRegression;
  __pyx_type_6python_5_creg_OrdinalDataset.tp_base = __pyx_ptype_6python_5_creg_Dataset;
  if (PyType_Ready(&__pyx_type_6python_5_creg_OrdinalDataset) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6python_5_creg_OrdinalDataset, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6python_5_creg_14OrdinalDataset___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6python_5_creg_14OrdinalDataset___init__.doc = __pyx_doc_6python_5_creg_14OrdinalDataset___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6python_5_creg_14OrdinalDataset___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "OrdinalDataset", (PyObject *)&__pyx_type_6python_5_creg_OrdinalDataset) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_OrdinalDataset = &__pyx_type_6python_5_creg_OrdinalDataset;
  __pyx_type_6python_5_creg_OrdinalRegressionWeights.tp_base = __pyx_ptype_6python_5_creg_Weights;
  if (PyType_Ready(&__pyx_type_6python_5_creg_OrdinalRegressionWeights) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "OrdinalRegressionWeights", (PyObject *)&__pyx_type_6python_5_creg_OrdinalRegressionWeights) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_OrdinalRegressionWeights = &__pyx_type_6python_5_creg_OrdinalRegressionWeights;
  __pyx_type_6python_5_creg_OrdinalRegression.tp_base = __pyx_ptype_6python_5_creg_Model;
  if (PyType_Ready(&__pyx_type_6python_5_creg_OrdinalRegression) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "OrdinalRegression", (PyObject *)&__pyx_type_6python_5_creg_OrdinalRegression) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg_OrdinalRegression = &__pyx_type_6python_5_creg_OrdinalRegression;
  if (PyType_Ready(&__pyx_Generator_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_Generator = &__pyx_Generator_type;
  __pyx_type_6python_5_creg___pyx_scope_struct____iter__.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct____iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct____iter__ = &__pyx_type_6python_5_creg___pyx_scope_struct____iter__;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_1___get__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_1___get__ = &__pyx_type_6python_5_creg___pyx_scope_struct_1___get__;
  __pyx_type_6python_5_creg___pyx_scope_struct_2_genexpr.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_2_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_2_genexpr = &__pyx_type_6python_5_creg___pyx_scope_struct_2_genexpr;
  __pyx_type_6python_5_creg___pyx_scope_struct_3___iter__.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_3___iter__) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_3___iter__ = &__pyx_type_6python_5_creg___pyx_scope_struct_3___iter__;
  __pyx_type_6python_5_creg___pyx_scope_struct_4_predict.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_4_predict) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_4_predict = &__pyx_type_6python_5_creg___pyx_scope_struct_4_predict;
  __pyx_type_6python_5_creg___pyx_scope_struct_5_predict.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_5_predict) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_5_predict = &__pyx_type_6python_5_creg___pyx_scope_struct_5_predict;
  __pyx_type_6python_5_creg___pyx_scope_struct_6___iter__.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_6___iter__) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_6___iter__ = &__pyx_type_6python_5_creg___pyx_scope_struct_6___iter__;
  __pyx_type_6python_5_creg___pyx_scope_struct_7_predict.tp_base = __pyx_ptype_6python_5_creg___pyx_Generator;
  if (PyType_Ready(&__pyx_type_6python_5_creg___pyx_scope_struct_7_predict) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6python_5_creg___pyx_scope_struct_7_predict = &__pyx_type_6python_5_creg___pyx_scope_struct_7_predict;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "python/_creg.pyx":1
 * import heapq             # <<<<<<<<<<<<<<
 * from cython.operator import preincrement as pinc
 * 
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__heapq), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__heapq, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/_creg.pyx":8
 *         return '***BIAS***'
 * 
 * BIAS = Bias()             # <<<<<<<<<<<<<<
 * 
 * cdef class Intercept:
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6python_5_creg_Bias)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__BIAS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "python/_creg.pyx":1
 * import heapq             # <<<<<<<<<<<<<<
 * from cython.operator import preincrement as pinc
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "python/_creg.pxd":76
 *     ctypedef char* const_char_ptr "const char*"
 * 
 * cdef inline unsigned num_features():             # <<<<<<<<<<<<<<
 *     return NumFeats()
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init python._creg", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init python._creg");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else if (PyErr_Occurred()) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
}


static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is unsubscriptable");
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        PyObject *py_level = PyInt_FromLong(level);
        if (!py_level)
            goto bad;
        module = PyObject_CallFunctionObjArgs(py_import,
            name, global_dict, empty_dict, list, py_level, NULL);
        Py_DECREF(py_level);
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}


static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
    __pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
    op->func.m_ml = ml;
    Py_XINCREF(self);
    op->func.m_self = self;
    Py_XINCREF(module);
    op->func.m_module = module;
    PyObject_GC_Track(op);
    return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
    PyObject_GC_UnTrack(m);
    Py_XDECREF(m->func.m_self);
    Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
    if (obj == Py_None)
            obj = NULL;
    return PyMethod_New(func, obj, type);
}

static int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;

    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;

    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_Generator_ExceptionClear(struct __pyx_Generator_object *self)
{
    Py_XDECREF(self->exc_type);
    Py_XDECREF(self->exc_value);
    Py_XDECREF(self->exc_traceback);

    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
}

static CYTHON_INLINE PyObject *__Pyx_Generator_SendEx(struct __pyx_Generator_object *self, PyObject *value)
{
    PyObject *retval;

    if (self->is_running) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return NULL;
    }

    if (self->resume_label == 0) {
        if (value && value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }

    if (self->resume_label == -1) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }


    if (value)
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value, &self->exc_traceback);
    else
        __Pyx_Generator_ExceptionClear(self);

    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;

    if (retval)
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value, &self->exc_traceback);
    else
        __Pyx_Generator_ExceptionClear(self);

    return retval;
}

static PyObject *__Pyx_Generator_Next(PyObject *self)
{
    return __Pyx_Generator_SendEx((struct __pyx_Generator_object *) self, Py_None);
}

static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value)
{
    return __Pyx_Generator_SendEx((struct __pyx_Generator_object *) self, value);
}

static PyObject *__Pyx_Generator_Close(PyObject *self)
{
    struct __pyx_Generator_object *generator = (struct __pyx_Generator_object *) self;
    PyObject *retval;
#if PY_VERSION_HEX < 0x02050000
    PyErr_SetNone(PyExc_StopIteration);
#else
    PyErr_SetNone(PyExc_GeneratorExit);
#endif
    retval = __Pyx_Generator_SendEx(generator, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
#if PY_VERSION_HEX < 0x02050000
    if (PyErr_ExceptionMatches(PyExc_StopIteration))
#else
    if (PyErr_ExceptionMatches(PyExc_StopIteration)
        || PyErr_ExceptionMatches(PyExc_GeneratorExit))
#endif
    {
        PyErr_Clear();          /* ignore these errors */
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}

static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args, CYTHON_UNUSED PyObject *kwds)
{
    struct __pyx_Generator_object *generator = (struct __pyx_Generator_object *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;

    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(generator, NULL);
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
